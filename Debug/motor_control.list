
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004204  08004204  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08004204  08004204  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004204  08004204  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  0800420c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000050  0800425c  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  0800425c  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb8a  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dfe  00000000  00000000  0002bc03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c50  00000000  00000000  0002da08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  0002e658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000149c3  00000000  00000000  0002f1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009317  00000000  00000000  00043b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071f0f  00000000  00000000  0004ce8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bed99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003448  00000000  00000000  000bee14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000050 	.word	0x20000050
 800012c:	00000000 	.word	0x00000000
 8000130:	080041c0 	.word	0x080041c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000054 	.word	0x20000054
 800014c:	080041c0 	.word	0x080041c0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a48:	f1a2 0201 	sub.w	r2, r2, #1
 8000a4c:	d1ed      	bne.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__aeabi_f2iz>:
 8000e48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e50:	d30f      	bcc.n	8000e72 <__aeabi_f2iz+0x2a>
 8000e52:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e5a:	d90d      	bls.n	8000e78 <__aeabi_f2iz+0x30>
 8000e5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e64:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e68:	fa23 f002 	lsr.w	r0, r3, r2
 8000e6c:	bf18      	it	ne
 8000e6e:	4240      	negne	r0, r0
 8000e70:	4770      	bx	lr
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	4770      	bx	lr
 8000e78:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_f2iz+0x3a>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d105      	bne.n	8000e8e <__aeabi_f2iz+0x46>
 8000e82:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e86:	bf08      	it	eq
 8000e88:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e8c:	4770      	bx	lr
 8000e8e:	f04f 0000 	mov.w	r0, #0
 8000e92:	4770      	bx	lr

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_Init+0x28>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_Init+0x28>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f923 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f002 feee 	bl	8003c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40022000 	.word	0x40022000

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f93b 	bl	800115a <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 f903 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000004c 	.word	0x2000004c
 8000f18:	20000004 	.word	0x20000004
 8000f1c:	20000000 	.word	0x20000000

08000f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_IncTick+0x1c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x20>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <HAL_IncTick+0x20>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	20000004 	.word	0x20000004
 8000f40:	2000011c 	.word	0x2000011c

08000f44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <HAL_GetTick+0x10>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	2000011c 	.word	0x2000011c

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4906      	ldr	r1, [pc, #24]	; (8000ff0 <__NVIC_EnableIRQ+0x34>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff90 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff2d 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff42 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff90 	bl	8001048 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5f 	bl	8000ff4 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff35 	bl	8000fbc <__NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ffa2 	bl	80010ac <SysTick_Config>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e043      	b.n	8001212 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <HAL_DMA_Init+0xa8>)
 8001192:	4413      	add	r3, r2
 8001194:	4a22      	ldr	r2, [pc, #136]	; (8001220 <HAL_DMA_Init+0xac>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	009a      	lsls	r2, r3, #2
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a1f      	ldr	r2, [pc, #124]	; (8001224 <HAL_DMA_Init+0xb0>)
 80011a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2202      	movs	r2, #2
 80011ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80011be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80011c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	bffdfff8 	.word	0xbffdfff8
 8001220:	cccccccd 	.word	0xcccccccd
 8001224:	40020000 	.word	0x40020000

08001228 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <HAL_DMA_Start_IT+0x20>
 8001244:	2302      	movs	r3, #2
 8001246:	e04a      	b.n	80012de <HAL_DMA_Start_IT+0xb6>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001256:	2b01      	cmp	r3, #1
 8001258:	d13a      	bne.n	80012d0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2202      	movs	r2, #2
 800125e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 f938 	bl	80014f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 020e 	orr.w	r2, r2, #14
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	e00f      	b.n	80012be <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0204 	bic.w	r2, r2, #4
 80012ac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 020a 	orr.w	r2, r2, #10
 80012bc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 0201 	orr.w	r2, r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e005      	b.n	80012dc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80012d8:	2302      	movs	r3, #2
 80012da:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	2204      	movs	r2, #4
 8001306:	409a      	lsls	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4013      	ands	r3, r2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d04f      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xc8>
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	d04a      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	2b00      	cmp	r3, #0
 8001326:	d107      	bne.n	8001338 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0204 	bic.w	r2, r2, #4
 8001336:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a66      	ldr	r2, [pc, #408]	; (80014d8 <HAL_DMA_IRQHandler+0x1f0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d029      	beq.n	8001396 <HAL_DMA_IRQHandler+0xae>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a65      	ldr	r2, [pc, #404]	; (80014dc <HAL_DMA_IRQHandler+0x1f4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d022      	beq.n	8001392 <HAL_DMA_IRQHandler+0xaa>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a63      	ldr	r2, [pc, #396]	; (80014e0 <HAL_DMA_IRQHandler+0x1f8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01a      	beq.n	800138c <HAL_DMA_IRQHandler+0xa4>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a62      	ldr	r2, [pc, #392]	; (80014e4 <HAL_DMA_IRQHandler+0x1fc>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d012      	beq.n	8001386 <HAL_DMA_IRQHandler+0x9e>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a60      	ldr	r2, [pc, #384]	; (80014e8 <HAL_DMA_IRQHandler+0x200>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00a      	beq.n	8001380 <HAL_DMA_IRQHandler+0x98>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a5f      	ldr	r2, [pc, #380]	; (80014ec <HAL_DMA_IRQHandler+0x204>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d102      	bne.n	800137a <HAL_DMA_IRQHandler+0x92>
 8001374:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001378:	e00e      	b.n	8001398 <HAL_DMA_IRQHandler+0xb0>
 800137a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800137e:	e00b      	b.n	8001398 <HAL_DMA_IRQHandler+0xb0>
 8001380:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001384:	e008      	b.n	8001398 <HAL_DMA_IRQHandler+0xb0>
 8001386:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800138a:	e005      	b.n	8001398 <HAL_DMA_IRQHandler+0xb0>
 800138c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001390:	e002      	b.n	8001398 <HAL_DMA_IRQHandler+0xb0>
 8001392:	2340      	movs	r3, #64	; 0x40
 8001394:	e000      	b.n	8001398 <HAL_DMA_IRQHandler+0xb0>
 8001396:	2304      	movs	r3, #4
 8001398:	4a55      	ldr	r2, [pc, #340]	; (80014f0 <HAL_DMA_IRQHandler+0x208>)
 800139a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 8094 	beq.w	80014ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80013ae:	e08e      	b.n	80014ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	2202      	movs	r2, #2
 80013b6:	409a      	lsls	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d056      	beq.n	800146e <HAL_DMA_IRQHandler+0x186>
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d051      	beq.n	800146e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10b      	bne.n	80013f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 020a 	bic.w	r2, r2, #10
 80013e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a38      	ldr	r2, [pc, #224]	; (80014d8 <HAL_DMA_IRQHandler+0x1f0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d029      	beq.n	800144e <HAL_DMA_IRQHandler+0x166>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a37      	ldr	r2, [pc, #220]	; (80014dc <HAL_DMA_IRQHandler+0x1f4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d022      	beq.n	800144a <HAL_DMA_IRQHandler+0x162>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a35      	ldr	r2, [pc, #212]	; (80014e0 <HAL_DMA_IRQHandler+0x1f8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d01a      	beq.n	8001444 <HAL_DMA_IRQHandler+0x15c>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a34      	ldr	r2, [pc, #208]	; (80014e4 <HAL_DMA_IRQHandler+0x1fc>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d012      	beq.n	800143e <HAL_DMA_IRQHandler+0x156>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a32      	ldr	r2, [pc, #200]	; (80014e8 <HAL_DMA_IRQHandler+0x200>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00a      	beq.n	8001438 <HAL_DMA_IRQHandler+0x150>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a31      	ldr	r2, [pc, #196]	; (80014ec <HAL_DMA_IRQHandler+0x204>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d102      	bne.n	8001432 <HAL_DMA_IRQHandler+0x14a>
 800142c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001430:	e00e      	b.n	8001450 <HAL_DMA_IRQHandler+0x168>
 8001432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001436:	e00b      	b.n	8001450 <HAL_DMA_IRQHandler+0x168>
 8001438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800143c:	e008      	b.n	8001450 <HAL_DMA_IRQHandler+0x168>
 800143e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001442:	e005      	b.n	8001450 <HAL_DMA_IRQHandler+0x168>
 8001444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001448:	e002      	b.n	8001450 <HAL_DMA_IRQHandler+0x168>
 800144a:	2320      	movs	r3, #32
 800144c:	e000      	b.n	8001450 <HAL_DMA_IRQHandler+0x168>
 800144e:	2302      	movs	r3, #2
 8001450:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <HAL_DMA_IRQHandler+0x208>)
 8001452:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	2b00      	cmp	r3, #0
 8001462:	d034      	beq.n	80014ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800146c:	e02f      	b.n	80014ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	2208      	movs	r2, #8
 8001474:	409a      	lsls	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d028      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x1e8>
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d023      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 020e 	bic.w	r2, r2, #14
 8001496:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a0:	2101      	movs	r1, #1
 80014a2:	fa01 f202 	lsl.w	r2, r1, r2
 80014a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d004      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	4798      	blx	r3
    }
  }
  return;
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
}
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40020008 	.word	0x40020008
 80014dc:	4002001c 	.word	0x4002001c
 80014e0:	40020030 	.word	0x40020030
 80014e4:	40020044 	.word	0x40020044
 80014e8:	40020058 	.word	0x40020058
 80014ec:	4002006c 	.word	0x4002006c
 80014f0:	40020000 	.word	0x40020000

080014f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b10      	cmp	r3, #16
 8001520:	d108      	bne.n	8001534 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001532:	e007      	b.n	8001544 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	60da      	str	r2, [r3, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
	...

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b480      	push	{r7}
 8001552:	b08b      	sub	sp, #44	; 0x2c
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001562:	e127      	b.n	80017b4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001564:	2201      	movs	r2, #1
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 8116 	bne.w	80017ae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b12      	cmp	r3, #18
 8001588:	d034      	beq.n	80015f4 <HAL_GPIO_Init+0xa4>
 800158a:	2b12      	cmp	r3, #18
 800158c:	d80d      	bhi.n	80015aa <HAL_GPIO_Init+0x5a>
 800158e:	2b02      	cmp	r3, #2
 8001590:	d02b      	beq.n	80015ea <HAL_GPIO_Init+0x9a>
 8001592:	2b02      	cmp	r3, #2
 8001594:	d804      	bhi.n	80015a0 <HAL_GPIO_Init+0x50>
 8001596:	2b00      	cmp	r3, #0
 8001598:	d031      	beq.n	80015fe <HAL_GPIO_Init+0xae>
 800159a:	2b01      	cmp	r3, #1
 800159c:	d01c      	beq.n	80015d8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800159e:	e048      	b.n	8001632 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d043      	beq.n	800162c <HAL_GPIO_Init+0xdc>
 80015a4:	2b11      	cmp	r3, #17
 80015a6:	d01b      	beq.n	80015e0 <HAL_GPIO_Init+0x90>
          break;
 80015a8:	e043      	b.n	8001632 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015aa:	4a89      	ldr	r2, [pc, #548]	; (80017d0 <HAL_GPIO_Init+0x280>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d026      	beq.n	80015fe <HAL_GPIO_Init+0xae>
 80015b0:	4a87      	ldr	r2, [pc, #540]	; (80017d0 <HAL_GPIO_Init+0x280>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d806      	bhi.n	80015c4 <HAL_GPIO_Init+0x74>
 80015b6:	4a87      	ldr	r2, [pc, #540]	; (80017d4 <HAL_GPIO_Init+0x284>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d020      	beq.n	80015fe <HAL_GPIO_Init+0xae>
 80015bc:	4a86      	ldr	r2, [pc, #536]	; (80017d8 <HAL_GPIO_Init+0x288>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d01d      	beq.n	80015fe <HAL_GPIO_Init+0xae>
          break;
 80015c2:	e036      	b.n	8001632 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015c4:	4a85      	ldr	r2, [pc, #532]	; (80017dc <HAL_GPIO_Init+0x28c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d019      	beq.n	80015fe <HAL_GPIO_Init+0xae>
 80015ca:	4a85      	ldr	r2, [pc, #532]	; (80017e0 <HAL_GPIO_Init+0x290>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d016      	beq.n	80015fe <HAL_GPIO_Init+0xae>
 80015d0:	4a84      	ldr	r2, [pc, #528]	; (80017e4 <HAL_GPIO_Init+0x294>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d013      	beq.n	80015fe <HAL_GPIO_Init+0xae>
          break;
 80015d6:	e02c      	b.n	8001632 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	623b      	str	r3, [r7, #32]
          break;
 80015de:	e028      	b.n	8001632 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	3304      	adds	r3, #4
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e023      	b.n	8001632 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	3308      	adds	r3, #8
 80015f0:	623b      	str	r3, [r7, #32]
          break;
 80015f2:	e01e      	b.n	8001632 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	330c      	adds	r3, #12
 80015fa:	623b      	str	r3, [r7, #32]
          break;
 80015fc:	e019      	b.n	8001632 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001606:	2304      	movs	r3, #4
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e012      	b.n	8001632 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d105      	bne.n	8001620 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001614:	2308      	movs	r3, #8
 8001616:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	611a      	str	r2, [r3, #16]
          break;
 800161e:	e008      	b.n	8001632 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001620:	2308      	movs	r3, #8
 8001622:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	615a      	str	r2, [r3, #20]
          break;
 800162a:	e002      	b.n	8001632 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
          break;
 8001630:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	2bff      	cmp	r3, #255	; 0xff
 8001636:	d801      	bhi.n	800163c <HAL_GPIO_Init+0xec>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	e001      	b.n	8001640 <HAL_GPIO_Init+0xf0>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3304      	adds	r3, #4
 8001640:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2bff      	cmp	r3, #255	; 0xff
 8001646:	d802      	bhi.n	800164e <HAL_GPIO_Init+0xfe>
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	e002      	b.n	8001654 <HAL_GPIO_Init+0x104>
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	3b08      	subs	r3, #8
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	210f      	movs	r1, #15
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	401a      	ands	r2, r3
 8001666:	6a39      	ldr	r1, [r7, #32]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	431a      	orrs	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8096 	beq.w	80017ae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001682:	4b59      	ldr	r3, [pc, #356]	; (80017e8 <HAL_GPIO_Init+0x298>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	4a58      	ldr	r2, [pc, #352]	; (80017e8 <HAL_GPIO_Init+0x298>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6193      	str	r3, [r2, #24]
 800168e:	4b56      	ldr	r3, [pc, #344]	; (80017e8 <HAL_GPIO_Init+0x298>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800169a:	4a54      	ldr	r2, [pc, #336]	; (80017ec <HAL_GPIO_Init+0x29c>)
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4013      	ands	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4b      	ldr	r2, [pc, #300]	; (80017f0 <HAL_GPIO_Init+0x2a0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d013      	beq.n	80016ee <HAL_GPIO_Init+0x19e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4a      	ldr	r2, [pc, #296]	; (80017f4 <HAL_GPIO_Init+0x2a4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00d      	beq.n	80016ea <HAL_GPIO_Init+0x19a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a49      	ldr	r2, [pc, #292]	; (80017f8 <HAL_GPIO_Init+0x2a8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d007      	beq.n	80016e6 <HAL_GPIO_Init+0x196>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a48      	ldr	r2, [pc, #288]	; (80017fc <HAL_GPIO_Init+0x2ac>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_GPIO_Init+0x192>
 80016de:	2303      	movs	r3, #3
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x1a0>
 80016e2:	2304      	movs	r3, #4
 80016e4:	e004      	b.n	80016f0 <HAL_GPIO_Init+0x1a0>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_Init+0x1a0>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_GPIO_Init+0x1a0>
 80016ee:	2300      	movs	r3, #0
 80016f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f2:	f002 0203 	and.w	r2, r2, #3
 80016f6:	0092      	lsls	r2, r2, #2
 80016f8:	4093      	lsls	r3, r2
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001700:	493a      	ldr	r1, [pc, #232]	; (80017ec <HAL_GPIO_Init+0x29c>)
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3302      	adds	r3, #2
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800171a:	4b39      	ldr	r3, [pc, #228]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4938      	ldr	r1, [pc, #224]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]
 8001726:	e006      	b.n	8001736 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001728:	4b35      	ldr	r3, [pc, #212]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	43db      	mvns	r3, r3
 8001730:	4933      	ldr	r1, [pc, #204]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 8001732:	4013      	ands	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001742:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	492e      	ldr	r1, [pc, #184]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
 800174e:	e006      	b.n	800175e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001750:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	43db      	mvns	r3, r3
 8001758:	4929      	ldr	r1, [pc, #164]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 800175a:	4013      	ands	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	4924      	ldr	r1, [pc, #144]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
 8001776:	e006      	b.n	8001786 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	43db      	mvns	r3, r3
 8001780:	491f      	ldr	r1, [pc, #124]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 8001782:	4013      	ands	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d006      	beq.n	80017a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	491a      	ldr	r1, [pc, #104]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	60cb      	str	r3, [r1, #12]
 800179e:	e006      	b.n	80017ae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	4915      	ldr	r1, [pc, #84]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	3301      	adds	r3, #1
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	fa22 f303 	lsr.w	r3, r2, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f47f aed0 	bne.w	8001564 <HAL_GPIO_Init+0x14>
  }
}
 80017c4:	bf00      	nop
 80017c6:	372c      	adds	r7, #44	; 0x2c
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	10210000 	.word	0x10210000
 80017d4:	10110000 	.word	0x10110000
 80017d8:	10120000 	.word	0x10120000
 80017dc:	10310000 	.word	0x10310000
 80017e0:	10320000 	.word	0x10320000
 80017e4:	10220000 	.word	0x10220000
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010000 	.word	0x40010000
 80017f0:	40010800 	.word	0x40010800
 80017f4:	40010c00 	.word	0x40010c00
 80017f8:	40011000 	.word	0x40011000
 80017fc:	40011400 	.word	0x40011400
 8001800:	40010400 	.word	0x40010400

08001804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
 8001810:	4613      	mov	r3, r2
 8001812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001814:	787b      	ldrb	r3, [r7, #1]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001820:	e003      	b.n	800182a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	041a      	lsls	r2, r3, #16
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	611a      	str	r2, [r3, #16]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e26c      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8087 	beq.w	8001962 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001854:	4b92      	ldr	r3, [pc, #584]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b04      	cmp	r3, #4
 800185e:	d00c      	beq.n	800187a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001860:	4b8f      	ldr	r3, [pc, #572]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b08      	cmp	r3, #8
 800186a:	d112      	bne.n	8001892 <HAL_RCC_OscConfig+0x5e>
 800186c:	4b8c      	ldr	r3, [pc, #560]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001878:	d10b      	bne.n	8001892 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187a:	4b89      	ldr	r3, [pc, #548]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d06c      	beq.n	8001960 <HAL_RCC_OscConfig+0x12c>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d168      	bne.n	8001960 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e246      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x76>
 800189c:	4b80      	ldr	r3, [pc, #512]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a7f      	ldr	r2, [pc, #508]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e02e      	b.n	8001908 <HAL_RCC_OscConfig+0xd4>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x98>
 80018b2:	4b7b      	ldr	r3, [pc, #492]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a7a      	ldr	r2, [pc, #488]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b78      	ldr	r3, [pc, #480]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a77      	ldr	r2, [pc, #476]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e01d      	b.n	8001908 <HAL_RCC_OscConfig+0xd4>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0xbc>
 80018d6:	4b72      	ldr	r3, [pc, #456]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a71      	ldr	r2, [pc, #452]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b6f      	ldr	r3, [pc, #444]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a6e      	ldr	r2, [pc, #440]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e00b      	b.n	8001908 <HAL_RCC_OscConfig+0xd4>
 80018f0:	4b6b      	ldr	r3, [pc, #428]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a6a      	ldr	r2, [pc, #424]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b68      	ldr	r3, [pc, #416]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a67      	ldr	r2, [pc, #412]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001906:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d013      	beq.n	8001938 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fb18 	bl	8000f44 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fb14 	bl	8000f44 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e1fa      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0xe4>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff fb04 	bl	8000f44 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff fb00 	bl	8000f44 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e1e6      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001952:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x10c>
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d063      	beq.n	8001a36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800196e:	4b4c      	ldr	r3, [pc, #304]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800197a:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b08      	cmp	r3, #8
 8001984:	d11c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x18c>
 8001986:	4b46      	ldr	r3, [pc, #280]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d116      	bne.n	80019c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	4b43      	ldr	r3, [pc, #268]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <HAL_RCC_OscConfig+0x176>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d001      	beq.n	80019aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e1ba      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019aa:	4b3d      	ldr	r3, [pc, #244]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4939      	ldr	r1, [pc, #228]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	e03a      	b.n	8001a36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c8:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7ff fab9 	bl	8000f44 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d6:	f7ff fab5 	bl	8000f44 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e19b      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e8:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f4:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4927      	ldr	r1, [pc, #156]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e015      	b.n	8001a36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fa98 	bl	8000f44 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a18:	f7ff fa94 	bl	8000f44 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e17a      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d03a      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d019      	beq.n	8001a7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a50:	f7ff fa78 	bl	8000f44 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff fa74 	bl	8000f44 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e15a      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f000 fada 	bl	8002030 <RCC_Delay>
 8001a7c:	e01c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7ff fa5e 	bl	8000f44 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8a:	e00f      	b.n	8001aac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8c:	f7ff fa5a 	bl	8000f44 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d908      	bls.n	8001aac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e140      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	42420000 	.word	0x42420000
 8001aa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	4b9e      	ldr	r3, [pc, #632]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1e9      	bne.n	8001a8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80a6 	beq.w	8001c12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aca:	4b97      	ldr	r3, [pc, #604]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10d      	bne.n	8001af2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b94      	ldr	r3, [pc, #592]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a93      	ldr	r2, [pc, #588]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b91      	ldr	r3, [pc, #580]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aee:	2301      	movs	r3, #1
 8001af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af2:	4b8e      	ldr	r3, [pc, #568]	; (8001d2c <HAL_RCC_OscConfig+0x4f8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d118      	bne.n	8001b30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001afe:	4b8b      	ldr	r3, [pc, #556]	; (8001d2c <HAL_RCC_OscConfig+0x4f8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a8a      	ldr	r2, [pc, #552]	; (8001d2c <HAL_RCC_OscConfig+0x4f8>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fa1b 	bl	8000f44 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b12:	f7ff fa17 	bl	8000f44 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b64      	cmp	r3, #100	; 0x64
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e0fd      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b24:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <HAL_RCC_OscConfig+0x4f8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x312>
 8001b38:	4b7b      	ldr	r3, [pc, #492]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a7a      	ldr	r2, [pc, #488]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6213      	str	r3, [r2, #32]
 8001b44:	e02d      	b.n	8001ba2 <HAL_RCC_OscConfig+0x36e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x334>
 8001b4e:	4b76      	ldr	r3, [pc, #472]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a75      	ldr	r2, [pc, #468]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	4b73      	ldr	r3, [pc, #460]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a72      	ldr	r2, [pc, #456]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	e01c      	b.n	8001ba2 <HAL_RCC_OscConfig+0x36e>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d10c      	bne.n	8001b8a <HAL_RCC_OscConfig+0x356>
 8001b70:	4b6d      	ldr	r3, [pc, #436]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4a6c      	ldr	r2, [pc, #432]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	6213      	str	r3, [r2, #32]
 8001b7c:	4b6a      	ldr	r3, [pc, #424]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a69      	ldr	r2, [pc, #420]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	e00b      	b.n	8001ba2 <HAL_RCC_OscConfig+0x36e>
 8001b8a:	4b67      	ldr	r3, [pc, #412]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a66      	ldr	r2, [pc, #408]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6213      	str	r3, [r2, #32]
 8001b96:	4b64      	ldr	r3, [pc, #400]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a63      	ldr	r2, [pc, #396]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d015      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001baa:	f7ff f9cb 	bl	8000f44 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7ff f9c7 	bl	8000f44 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e0ab      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	4b57      	ldr	r3, [pc, #348]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0ee      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x37e>
 8001bd4:	e014      	b.n	8001c00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff f9b5 	bl	8000f44 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7ff f9b1 	bl	8000f44 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e095      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf4:	4b4c      	ldr	r3, [pc, #304]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ee      	bne.n	8001bde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d105      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c06:	4b48      	ldr	r3, [pc, #288]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4a47      	ldr	r2, [pc, #284]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8081 	beq.w	8001d1e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c1c:	4b42      	ldr	r3, [pc, #264]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d061      	beq.n	8001cec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d146      	bne.n	8001cbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c30:	4b3f      	ldr	r3, [pc, #252]	; (8001d30 <HAL_RCC_OscConfig+0x4fc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7ff f985 	bl	8000f44 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7ff f981 	bl	8000f44 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e067      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c50:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f0      	bne.n	8001c3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d108      	bne.n	8001c78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c66:	4b30      	ldr	r3, [pc, #192]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	492d      	ldr	r1, [pc, #180]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a19      	ldr	r1, [r3, #32]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	4927      	ldr	r1, [pc, #156]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c90:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <HAL_RCC_OscConfig+0x4fc>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff f955 	bl	8000f44 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff f951 	bl	8000f44 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e037      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x46a>
 8001cbc:	e02f      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <HAL_RCC_OscConfig+0x4fc>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff f93e 	bl	8000f44 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7ff f93a 	bl	8000f44 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e020      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x498>
 8001cea:	e018      	b.n	8001d1e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e013      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	42420060 	.word	0x42420060

08001d34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0d0      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d48:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d910      	bls.n	8001d78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b67      	ldr	r3, [pc, #412]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 0207 	bic.w	r2, r3, #7
 8001d5e:	4965      	ldr	r1, [pc, #404]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0b8      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d020      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d90:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a58      	ldr	r2, [pc, #352]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da8:	4b53      	ldr	r3, [pc, #332]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4a52      	ldr	r2, [pc, #328]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001db2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db4:	4b50      	ldr	r3, [pc, #320]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	494d      	ldr	r1, [pc, #308]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d040      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d115      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e07f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df2:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e073      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	4b3d      	ldr	r3, [pc, #244]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e06b      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e12:	4b39      	ldr	r3, [pc, #228]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f023 0203 	bic.w	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4936      	ldr	r1, [pc, #216]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e24:	f7ff f88e 	bl	8000f44 <HAL_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2c:	f7ff f88a 	bl	8000f44 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e053      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e42:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 020c 	and.w	r2, r3, #12
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d1eb      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d210      	bcs.n	8001e84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 0207 	bic.w	r2, r3, #7
 8001e6a:	4922      	ldr	r1, [pc, #136]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e032      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4916      	ldr	r1, [pc, #88]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	490e      	ldr	r1, [pc, #56]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ec2:	f000 f821 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <HAL_RCC_ClockConfig+0x1c8>)
 8001ed4:	5cd3      	ldrb	r3, [r2, r3]
 8001ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8001eda:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <HAL_RCC_ClockConfig+0x1cc>)
 8001edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_RCC_ClockConfig+0x1d0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe ffec 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40022000 	.word	0x40022000
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	080041ec 	.word	0x080041ec
 8001f00:	2000004c 	.word	0x2000004c
 8001f04:	20000000 	.word	0x20000000

08001f08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f08:	b490      	push	{r4, r7}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f10:	1d3c      	adds	r4, r7, #4
 8001f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f18:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f32:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d002      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0x40>
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d003      	beq.n	8001f4e <HAL_RCC_GetSysClockFreq+0x46>
 8001f46:	e02d      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f4a:	623b      	str	r3, [r7, #32]
      break;
 8001f4c:	e02d      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	0c9b      	lsrs	r3, r3, #18
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f60:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d013      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	0c5b      	lsrs	r3, r3, #17
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f86:	fb02 f203 	mul.w	r2, r2, r3
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
 8001f92:	e004      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f98:	fb02 f303 	mul.w	r3, r2, r3
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	623b      	str	r3, [r7, #32]
      break;
 8001fa2:	e002      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fa6:	623b      	str	r3, [r7, #32]
      break;
 8001fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001faa:	6a3b      	ldr	r3, [r7, #32]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3728      	adds	r7, #40	; 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc90      	pop	{r4, r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	080041d8 	.word	0x080041d8
 8001fbc:	080041e8 	.word	0x080041e8
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	007a1200 	.word	0x007a1200
 8001fc8:	003d0900 	.word	0x003d0900

08001fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd0:	4b02      	ldr	r3, [pc, #8]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x10>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	2000004c 	.word	0x2000004c

08001fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fe4:	f7ff fff2 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8001fe8:	4601      	mov	r1, r0
 8001fea:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4a03      	ldr	r2, [pc, #12]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	080041fc 	.word	0x080041fc

08002008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800200c:	f7ff ffde 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8002010:	4601      	mov	r1, r0
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	0adb      	lsrs	r3, r3, #11
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	4a03      	ldr	r2, [pc, #12]	; (800202c <HAL_RCC_GetPCLK2Freq+0x24>)
 800201e:	5cd3      	ldrb	r3, [r2, r3]
 8002020:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	080041fc 	.word	0x080041fc

08002030 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <RCC_Delay+0x34>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <RCC_Delay+0x38>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	0a5b      	lsrs	r3, r3, #9
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	fb02 f303 	mul.w	r3, r2, r3
 800204a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800204c:	bf00      	nop
  }
  while (Delay --);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1e5a      	subs	r2, r3, #1
 8002052:	60fa      	str	r2, [r7, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f9      	bne.n	800204c <RCC_Delay+0x1c>
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	2000004c 	.word	0x2000004c
 8002068:	10624dd3 	.word	0x10624dd3

0800206c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e01d      	b.n	80020ba <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f001 fe2e 	bl	8003cf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3304      	adds	r3, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f000 f9c8 	bl	8002440 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	6839      	ldr	r1, [r7, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fb9c 	bl	8002814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a10      	ldr	r2, [pc, #64]	; (8002124 <HAL_TIM_PWM_Start+0x60>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d107      	bne.n	80020f6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b06      	cmp	r3, #6
 8002106:	d007      	beq.n	8002118 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40012c00 	.word	0x40012c00

08002128 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e07f      	b.n	800223c <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d106      	bne.n	8002156 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f001 fdff 	bl	8003d54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2202      	movs	r2, #2
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800216c:	f023 0307 	bic.w	r3, r3, #7
 8002170:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3304      	adds	r3, #4
 800217a:	4619      	mov	r1, r3
 800217c:	4610      	mov	r0, r2
 800217e:	f000 f95f 	bl	8002440 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021aa:	f023 0303 	bic.w	r3, r3, #3
 80021ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	4313      	orrs	r3, r2
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80021c8:	f023 030c 	bic.w	r3, r3, #12
 80021cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	4313      	orrs	r3, r2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	011a      	lsls	r2, r3, #4
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	031b      	lsls	r3, r3, #12
 80021f8:	4313      	orrs	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002206:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	4313      	orrs	r3, r2
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <HAL_TIM_Encoder_Start+0x16>
 8002254:	2b04      	cmp	r3, #4
 8002256:	d008      	beq.n	800226a <HAL_TIM_Encoder_Start+0x26>
 8002258:	e00f      	b.n	800227a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2201      	movs	r2, #1
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fad6 	bl	8002814 <TIM_CCxChannelCmd>
      break;
 8002268:	e016      	b.n	8002298 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2201      	movs	r2, #1
 8002270:	2104      	movs	r1, #4
 8002272:	4618      	mov	r0, r3
 8002274:	f000 face 	bl	8002814 <TIM_CCxChannelCmd>
      break;
 8002278:	e00e      	b.n	8002298 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2201      	movs	r2, #1
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fac6 	bl	8002814 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2201      	movs	r2, #1
 800228e:	2104      	movs	r1, #4
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fabf 	bl	8002814 <TIM_CCxChannelCmd>
      break;
 8002296:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e0b4      	b.n	8002438 <HAL_TIM_PWM_ConfigChannel+0x184>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b0c      	cmp	r3, #12
 80022e2:	f200 809f 	bhi.w	8002424 <HAL_TIM_PWM_ConfigChannel+0x170>
 80022e6:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <HAL_TIM_PWM_ConfigChannel+0x38>)
 80022e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ec:	08002321 	.word	0x08002321
 80022f0:	08002425 	.word	0x08002425
 80022f4:	08002425 	.word	0x08002425
 80022f8:	08002425 	.word	0x08002425
 80022fc:	08002361 	.word	0x08002361
 8002300:	08002425 	.word	0x08002425
 8002304:	08002425 	.word	0x08002425
 8002308:	08002425 	.word	0x08002425
 800230c:	080023a3 	.word	0x080023a3
 8002310:	08002425 	.word	0x08002425
 8002314:	08002425 	.word	0x08002425
 8002318:	08002425 	.word	0x08002425
 800231c:	080023e3 	.word	0x080023e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f8ec 	bl	8002504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0208 	orr.w	r2, r2, #8
 800233a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0204 	bic.w	r2, r2, #4
 800234a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6999      	ldr	r1, [r3, #24]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	619a      	str	r2, [r3, #24]
      break;
 800235e:	e062      	b.n	8002426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f932 	bl	80025d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800237a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6999      	ldr	r1, [r3, #24]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	021a      	lsls	r2, r3, #8
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	619a      	str	r2, [r3, #24]
      break;
 80023a0:	e041      	b.n	8002426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f97b 	bl	80026a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69da      	ldr	r2, [r3, #28]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0208 	orr.w	r2, r2, #8
 80023bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0204 	bic.w	r2, r2, #4
 80023cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69d9      	ldr	r1, [r3, #28]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	61da      	str	r2, [r3, #28]
      break;
 80023e0:	e021      	b.n	8002426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 f9c5 	bl	8002778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69da      	ldr	r2, [r3, #28]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800240c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69d9      	ldr	r1, [r3, #28]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	021a      	lsls	r2, r3, #8
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	61da      	str	r2, [r3, #28]
      break;
 8002422:	e000      	b.n	8002426 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002424:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a29      	ldr	r2, [pc, #164]	; (80024f8 <TIM_Base_SetConfig+0xb8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00b      	beq.n	8002470 <TIM_Base_SetConfig+0x30>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245e:	d007      	beq.n	8002470 <TIM_Base_SetConfig+0x30>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a26      	ldr	r2, [pc, #152]	; (80024fc <TIM_Base_SetConfig+0xbc>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d003      	beq.n	8002470 <TIM_Base_SetConfig+0x30>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a25      	ldr	r2, [pc, #148]	; (8002500 <TIM_Base_SetConfig+0xc0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d108      	bne.n	8002482 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a1c      	ldr	r2, [pc, #112]	; (80024f8 <TIM_Base_SetConfig+0xb8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00b      	beq.n	80024a2 <TIM_Base_SetConfig+0x62>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002490:	d007      	beq.n	80024a2 <TIM_Base_SetConfig+0x62>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a19      	ldr	r2, [pc, #100]	; (80024fc <TIM_Base_SetConfig+0xbc>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d003      	beq.n	80024a2 <TIM_Base_SetConfig+0x62>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a18      	ldr	r2, [pc, #96]	; (8002500 <TIM_Base_SetConfig+0xc0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d108      	bne.n	80024b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <TIM_Base_SetConfig+0xb8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d103      	bne.n	80024e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	615a      	str	r2, [r3, #20]
}
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	40012c00 	.word	0x40012c00
 80024fc:	40000400 	.word	0x40000400
 8002500:	40000800 	.word	0x40000800

08002504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	f023 0201 	bic.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 0303 	bic.w	r3, r3, #3
 800253a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f023 0302 	bic.w	r3, r3, #2
 800254c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a1c      	ldr	r2, [pc, #112]	; (80025cc <TIM_OC1_SetConfig+0xc8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d10c      	bne.n	800257a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f023 0308 	bic.w	r3, r3, #8
 8002566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a13      	ldr	r2, [pc, #76]	; (80025cc <TIM_OC1_SetConfig+0xc8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d111      	bne.n	80025a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	621a      	str	r2, [r3, #32]
}
 80025c0:	bf00      	nop
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40012c00 	.word	0x40012c00

080025d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f023 0210 	bic.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f023 0320 	bic.w	r3, r3, #32
 800261a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <TIM_OC2_SetConfig+0xd0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d10d      	bne.n	800264c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800264a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <TIM_OC2_SetConfig+0xd0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d113      	bne.n	800267c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800265a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	621a      	str	r2, [r3, #32]
}
 8002696:	bf00      	nop
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	40012c00 	.word	0x40012c00

080026a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0303 	bic.w	r3, r3, #3
 80026da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <TIM_OC3_SetConfig+0xd0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d10d      	bne.n	800271e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800271c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <TIM_OC3_SetConfig+0xd0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d113      	bne.n	800274e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800272c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	621a      	str	r2, [r3, #32]
}
 8002768:	bf00      	nop
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40012c00 	.word	0x40012c00

08002778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	031b      	lsls	r3, r3, #12
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <TIM_OC4_SetConfig+0x98>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d109      	bne.n	80027ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	621a      	str	r2, [r3, #32]
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	40012c00 	.word	0x40012c00

08002814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	2201      	movs	r2, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a1a      	ldr	r2, [r3, #32]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	43db      	mvns	r3, r3
 8002836:	401a      	ands	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	431a      	orrs	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	621a      	str	r2, [r3, #32]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002870:	2302      	movs	r3, #2
 8002872:	e032      	b.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ac:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e03d      	b.n	800297c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4313      	orrs	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e03f      	b.n	8002a18 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d106      	bne.n	80029b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f001 fa8f 	bl	8003ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2224      	movs	r2, #36	; 0x24
 80029b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f970 	bl	8002cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2220      	movs	r2, #32
 8002a12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	d166      	bne.n	8002b08 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_UART_Receive_DMA+0x26>
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e05f      	b.n	8002b0a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_UART_Receive_DMA+0x38>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e058      	b.n	8002b0a <HAL_UART_Receive_DMA+0xea>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	88fa      	ldrh	r2, [r7, #6]
 8002a6a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2222      	movs	r2, #34	; 0x22
 8002a76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7e:	4a25      	ldr	r2, [pc, #148]	; (8002b14 <HAL_UART_Receive_DMA+0xf4>)
 8002a80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	4a24      	ldr	r2, [pc, #144]	; (8002b18 <HAL_UART_Receive_DMA+0xf8>)
 8002a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8e:	4a23      	ldr	r2, [pc, #140]	; (8002b1c <HAL_UART_Receive_DMA+0xfc>)
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a96:	2200      	movs	r2, #0
 8002a98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	4619      	mov	r1, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	f7fe fbb9 	bl	8001228 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b02:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	e000      	b.n	8002b0a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002b08:	2302      	movs	r3, #2
  }
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	08002b33 	.word	0x08002b33
 8002b18:	08002b9b 	.word	0x08002b9b
 8002b1c:	08002bb7 	.word	0x08002bb7

08002b20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11e      	bne.n	8002b8c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b62:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b82:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f001 f857 	bl	8003c40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f001 f823 	bl	8003bf4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf14      	ite	ne
 8002bd6:	2301      	movne	r3, #1
 8002bd8:	2300      	moveq	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b21      	cmp	r3, #33	; 0x21
 8002be8:	d108      	bne.n	8002bfc <UART_DMAError+0x46>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002bf6:	68b8      	ldr	r0, [r7, #8]
 8002bf8:	f000 f827 	bl	8002c4a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bf14      	ite	ne
 8002c0a:	2301      	movne	r3, #1
 8002c0c:	2300      	moveq	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b22      	cmp	r3, #34	; 0x22
 8002c1c:	d108      	bne.n	8002c30 <UART_DMAError+0x7a>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2200      	movs	r2, #0
 8002c28:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002c2a:	68b8      	ldr	r0, [r7, #8]
 8002c2c:	f000 f822 	bl	8002c74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	f043 0210 	orr.w	r2, r3, #16
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c3c:	68b8      	ldr	r0, [r7, #8]
 8002c3e:	f7ff ff6f 	bl	8002b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002c60:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c8a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
	...

08002cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002cea:	f023 030c 	bic.w	r3, r3, #12
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	68f9      	ldr	r1, [r7, #12]
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a52      	ldr	r2, [pc, #328]	; (8002e5c <UART_SetConfig+0x1ac>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d14e      	bne.n	8002db6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d18:	f7ff f976 	bl	8002008 <HAL_RCC_GetPCLK2Freq>
 8002d1c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009a      	lsls	r2, r3, #2
 8002d28:	441a      	add	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	4a4a      	ldr	r2, [pc, #296]	; (8002e60 <UART_SetConfig+0x1b0>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	0119      	lsls	r1, r3, #4
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	009a      	lsls	r2, r3, #2
 8002d48:	441a      	add	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d54:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <UART_SetConfig+0x1b0>)
 8002d56:	fba3 0302 	umull	r0, r3, r3, r2
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	2064      	movs	r0, #100	; 0x64
 8002d5e:	fb00 f303 	mul.w	r3, r0, r3
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	3332      	adds	r3, #50	; 0x32
 8002d68:	4a3d      	ldr	r2, [pc, #244]	; (8002e60 <UART_SetConfig+0x1b0>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d74:	4419      	add	r1, r3
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009a      	lsls	r2, r3, #2
 8002d80:	441a      	add	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d8c:	4b34      	ldr	r3, [pc, #208]	; (8002e60 <UART_SetConfig+0x1b0>)
 8002d8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2064      	movs	r0, #100	; 0x64
 8002d96:	fb00 f303 	mul.w	r3, r0, r3
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	3332      	adds	r3, #50	; 0x32
 8002da0:	4a2f      	ldr	r2, [pc, #188]	; (8002e60 <UART_SetConfig+0x1b0>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	f003 020f 	and.w	r2, r3, #15
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	440a      	add	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002db4:	e04d      	b.n	8002e52 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002db6:	f7ff f913 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8002dba:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009a      	lsls	r2, r3, #2
 8002dc6:	441a      	add	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd2:	4a23      	ldr	r2, [pc, #140]	; (8002e60 <UART_SetConfig+0x1b0>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	0119      	lsls	r1, r3, #4
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009a      	lsls	r2, r3, #2
 8002de6:	441a      	add	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	fbb2 f2f3 	udiv	r2, r2, r3
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <UART_SetConfig+0x1b0>)
 8002df4:	fba3 0302 	umull	r0, r3, r3, r2
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	2064      	movs	r0, #100	; 0x64
 8002dfc:	fb00 f303 	mul.w	r3, r0, r3
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	3332      	adds	r3, #50	; 0x32
 8002e06:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <UART_SetConfig+0x1b0>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e12:	4419      	add	r1, r3
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009a      	lsls	r2, r3, #2
 8002e1e:	441a      	add	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <UART_SetConfig+0x1b0>)
 8002e2c:	fba3 0302 	umull	r0, r3, r3, r2
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	2064      	movs	r0, #100	; 0x64
 8002e34:	fb00 f303 	mul.w	r3, r0, r3
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	3332      	adds	r3, #50	; 0x32
 8002e3e:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <UART_SetConfig+0x1b0>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	f003 020f 	and.w	r2, r3, #15
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	440a      	add	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]
}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40013800 	.word	0x40013800
 8002e60:	51eb851f 	.word	0x51eb851f
 8002e64:	00000000 	.word	0x00000000

08002e68 <decoupling>:
#include "algorithnm.h"
#include "main.h"
#include "stdio.h"
#include "string.h"

void decoupling(float forwardspeed,float rollspeed,decoulpe_TypeDef * decouple){
 8002e68:	b5b0      	push	{r4, r5, r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
	decouple->Speed_L = forwardspeed*1+rollspeed*(-0.2050);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7fd facf 	bl	8000418 <__aeabi_f2d>
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	460d      	mov	r5, r1
 8002e7e:	68b8      	ldr	r0, [r7, #8]
 8002e80:	f7fd faca 	bl	8000418 <__aeabi_f2d>
 8002e84:	a31a      	add	r3, pc, #104	; (adr r3, 8002ef0 <decoupling+0x88>)
 8002e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8a:	f7fd fb1d 	bl	80004c8 <__aeabi_dmul>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4620      	mov	r0, r4
 8002e94:	4629      	mov	r1, r5
 8002e96:	f7fd f961 	bl	800015c <__adddf3>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	460c      	mov	r4, r1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	f7fd fd23 	bl	80008ec <__aeabi_d2f>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	601a      	str	r2, [r3, #0]
	decouple->Speed_R = forwardspeed*1+rollspeed*0.2050;
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f7fd fab3 	bl	8000418 <__aeabi_f2d>
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	460d      	mov	r5, r1
 8002eb6:	68b8      	ldr	r0, [r7, #8]
 8002eb8:	f7fd faae 	bl	8000418 <__aeabi_f2d>
 8002ebc:	a30e      	add	r3, pc, #56	; (adr r3, 8002ef8 <decoupling+0x90>)
 8002ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec2:	f7fd fb01 	bl	80004c8 <__aeabi_dmul>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4620      	mov	r0, r4
 8002ecc:	4629      	mov	r1, r5
 8002ece:	f7fd f945 	bl	800015c <__adddf3>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	460c      	mov	r4, r1
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	4621      	mov	r1, r4
 8002eda:	f7fd fd07 	bl	80008ec <__aeabi_d2f>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	605a      	str	r2, [r3, #4]
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bdb0      	pop	{r4, r5, r7, pc}
 8002eec:	f3af 8000 	nop.w
 8002ef0:	a3d70a3d 	.word	0xa3d70a3d
 8002ef4:	bfca3d70 	.word	0xbfca3d70
 8002ef8:	a3d70a3d 	.word	0xa3d70a3d
 8002efc:	3fca3d70 	.word	0x3fca3d70

08002f00 <fliter>:

float fliter(float r,Filer_TypeDef *filer){
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
	static float A,B,C,u_return;
	A=(2*filer->tc-filer->ts)/(2*filer->tc+filer->ts);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd fd41 	bl	8000998 <__addsf3>
 8002f16:	4603      	mov	r3, r0
 8002f18:	461a      	mov	r2, r3
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4610      	mov	r0, r2
 8002f22:	f7fd fd37 	bl	8000994 <__aeabi_fsub>
 8002f26:	4603      	mov	r3, r0
 8002f28:	461c      	mov	r4, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd fd31 	bl	8000998 <__addsf3>
 8002f36:	4603      	mov	r3, r0
 8002f38:	461a      	mov	r2, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4610      	mov	r0, r2
 8002f42:	f7fd fd29 	bl	8000998 <__addsf3>
 8002f46:	4603      	mov	r3, r0
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f7fd fee0 	bl	8000d10 <__aeabi_fdiv>
 8002f50:	4603      	mov	r3, r0
 8002f52:	461a      	mov	r2, r3
 8002f54:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <fliter+0x154>)
 8002f56:	601a      	str	r2, [r3, #0]
	B=(2*filer->to+filer->ts)/(2*filer->tc+filer->ts);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd fd1a 	bl	8000998 <__addsf3>
 8002f64:	4603      	mov	r3, r0
 8002f66:	461a      	mov	r2, r3
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f7fd fd12 	bl	8000998 <__addsf3>
 8002f74:	4603      	mov	r3, r0
 8002f76:	461c      	mov	r4, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fd0a 	bl	8000998 <__addsf3>
 8002f84:	4603      	mov	r3, r0
 8002f86:	461a      	mov	r2, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f7fd fd02 	bl	8000998 <__addsf3>
 8002f94:	4603      	mov	r3, r0
 8002f96:	4619      	mov	r1, r3
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f7fd feb9 	bl	8000d10 <__aeabi_fdiv>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <fliter+0x158>)
 8002fa4:	601a      	str	r2, [r3, #0]
	C=(filer->ts-2*filer->to)/(2*filer->tc+filer->ts);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681c      	ldr	r4, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd fcf1 	bl	8000998 <__addsf3>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f7fd fcea 	bl	8000994 <__aeabi_fsub>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461c      	mov	r4, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fce4 	bl	8000998 <__addsf3>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7fd fcdc 	bl	8000998 <__addsf3>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f7fd fe93 	bl	8000d10 <__aeabi_fdiv>
 8002fea:	4603      	mov	r3, r0
 8002fec:	461a      	mov	r2, r3
 8002fee:	4b1b      	ldr	r3, [pc, #108]	; (800305c <fliter+0x15c>)
 8002ff0:	601a      	str	r2, [r3, #0]
	u_return = A*filer->u_last+B*r+C*r;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	4b17      	ldr	r3, [pc, #92]	; (8003054 <fliter+0x154>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	f7fd fdd3 	bl	8000ba8 <__aeabi_fmul>
 8003002:	4603      	mov	r3, r0
 8003004:	461c      	mov	r4, r3
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <fliter+0x158>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd fdcb 	bl	8000ba8 <__aeabi_fmul>
 8003012:	4603      	mov	r3, r0
 8003014:	4619      	mov	r1, r3
 8003016:	4620      	mov	r0, r4
 8003018:	f7fd fcbe 	bl	8000998 <__addsf3>
 800301c:	4603      	mov	r3, r0
 800301e:	461c      	mov	r4, r3
 8003020:	4b0e      	ldr	r3, [pc, #56]	; (800305c <fliter+0x15c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fdbe 	bl	8000ba8 <__aeabi_fmul>
 800302c:	4603      	mov	r3, r0
 800302e:	4619      	mov	r1, r3
 8003030:	4620      	mov	r0, r4
 8003032:	f7fd fcb1 	bl	8000998 <__addsf3>
 8003036:	4603      	mov	r3, r0
 8003038:	461a      	mov	r2, r3
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <fliter+0x160>)
 800303c:	601a      	str	r2, [r3, #0]
	filer->u_last = u_return;
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <fliter+0x160>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	60da      	str	r2, [r3, #12]
	return u_return;
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <fliter+0x160>)
 8003048:	681b      	ldr	r3, [r3, #0]
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bd90      	pop	{r4, r7, pc}
 8003052:	bf00      	nop
 8003054:	2000006c 	.word	0x2000006c
 8003058:	20000070 	.word	0x20000070
 800305c:	20000074 	.word	0x20000074
 8003060:	20000078 	.word	0x20000078

08003064 <PID_Inc>:

int PID_Inc(float SetValue, float ActualValue, PID_IncTypeDef *PID){
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
	PID->Ek = SetValue - ActualValue;
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7fd fc8e 	bl	8000994 <__aeabi_fsub>
 8003078:	4603      	mov	r3, r0
 800307a:	461a      	mov	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	60da      	str	r2, [r3, #12]
//	float Inc = (PID->Kp*(PID->Ek-PID->Ek1))+(PID->Ki*PID->Ek)+(PID->Kd*(PID->Ek+PID->Ek2-(PID->Ek1*2)));
	float Inc = (PID->Kp * PID->Ek) - (PID->Ki * PID->Ek1) + (PID->Kd * PID->Ek2);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f7fd fd8c 	bl	8000ba8 <__aeabi_fmul>
 8003090:	4603      	mov	r3, r0
 8003092:	461c      	mov	r4, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7fd fd82 	bl	8000ba8 <__aeabi_fmul>
 80030a4:	4603      	mov	r3, r0
 80030a6:	4619      	mov	r1, r3
 80030a8:	4620      	mov	r0, r4
 80030aa:	f7fd fc73 	bl	8000994 <__aeabi_fsub>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461c      	mov	r4, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	4619      	mov	r1, r3
 80030bc:	4610      	mov	r0, r2
 80030be:	f7fd fd73 	bl	8000ba8 <__aeabi_fmul>
 80030c2:	4603      	mov	r3, r0
 80030c4:	4619      	mov	r1, r3
 80030c6:	4620      	mov	r0, r4
 80030c8:	f7fd fc66 	bl	8000998 <__addsf3>
 80030cc:	4603      	mov	r3, r0
 80030ce:	617b      	str	r3, [r7, #20]
	PID->Ek2 = PID->Ek1;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	615a      	str	r2, [r3, #20]
	PID->Ek1 = PID->Ek;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	611a      	str	r2, [r3, #16]
	PID->PWMvalue += (int)Inc;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699c      	ldr	r4, [r3, #24]
 80030e4:	6978      	ldr	r0, [r7, #20]
 80030e6:	f7fd feaf 	bl	8000e48 <__aeabi_f2iz>
 80030ea:	4603      	mov	r3, r0
 80030ec:	18e2      	adds	r2, r4, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	619a      	str	r2, [r3, #24]
	return PID->PWMvalue;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd90      	pop	{r4, r7, pc}

080030fe <saturation>:

int saturation(int r,int uplimit,int downlimit){
 80030fe:	b480      	push	{r7}
 8003100:	b087      	sub	sp, #28
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
	int result;
	if(r > uplimit){
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	429a      	cmp	r2, r3
 8003110:	dd02      	ble.n	8003118 <saturation+0x1a>
		result = uplimit;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	e008      	b.n	800312a <saturation+0x2c>
	}else{
		if(r < downlimit){
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	da02      	bge.n	8003126 <saturation+0x28>
			result = downlimit;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	e001      	b.n	800312a <saturation+0x2c>
		}else{
			result = r;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	617b      	str	r3, [r7, #20]
		}
	}
	return result;
 800312a:	697b      	ldr	r3, [r7, #20]
}
 800312c:	4618      	mov	r0, r3
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
	...

08003138 <PID_R_motor>:


int PID_R_motor(float r,float speed){
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
	static Transfer1_3_Parameters transfer_data = {{0.04541},{1,17.74,292.9}};
	static Final_Parameters Parameters_data = {5,15,1.5,0.005};
	float kpd = transfer_data.den[0]*Parameters_data.wo/(transfer_data.num[0]*Parameters_data.lam);
 8003142:	4b3a      	ldr	r3, [pc, #232]	; (800322c <PID_R_motor+0xf4>)
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	4b3a      	ldr	r3, [pc, #232]	; (8003230 <PID_R_motor+0xf8>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4619      	mov	r1, r3
 800314c:	4610      	mov	r0, r2
 800314e:	f7fd fd2b 	bl	8000ba8 <__aeabi_fmul>
 8003152:	4603      	mov	r3, r0
 8003154:	461c      	mov	r4, r3
 8003156:	4b35      	ldr	r3, [pc, #212]	; (800322c <PID_R_motor+0xf4>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b35      	ldr	r3, [pc, #212]	; (8003230 <PID_R_motor+0xf8>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f7fd fd21 	bl	8000ba8 <__aeabi_fmul>
 8003166:	4603      	mov	r3, r0
 8003168:	4619      	mov	r1, r3
 800316a:	4620      	mov	r0, r4
 800316c:	f7fd fdd0 	bl	8000d10 <__aeabi_fdiv>
 8003170:	4603      	mov	r3, r0
 8003172:	60fb      	str	r3, [r7, #12]
	static Filer_TypeDef Filter_data;
	static PID_IncTypeDef PID_data;
	Filter_data.ts = Parameters_data.ts;Filter_data.tc =1/Parameters_data.wc;
 8003174:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <PID_R_motor+0xf8>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4a2e      	ldr	r2, [pc, #184]	; (8003234 <PID_R_motor+0xfc>)
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b2c      	ldr	r3, [pc, #176]	; (8003230 <PID_R_motor+0xf8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4619      	mov	r1, r3
 8003182:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003186:	f7fd fdc3 	bl	8000d10 <__aeabi_fdiv>
 800318a:	4603      	mov	r3, r0
 800318c:	461a      	mov	r2, r3
 800318e:	4b29      	ldr	r3, [pc, #164]	; (8003234 <PID_R_motor+0xfc>)
 8003190:	609a      	str	r2, [r3, #8]
	Filter_data.to = 1/Parameters_data.wo;
 8003192:	4b27      	ldr	r3, [pc, #156]	; (8003230 <PID_R_motor+0xf8>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4619      	mov	r1, r3
 8003198:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800319c:	f7fd fdb8 	bl	8000d10 <__aeabi_fdiv>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b23      	ldr	r3, [pc, #140]	; (8003234 <PID_R_motor+0xfc>)
 80031a6:	605a      	str	r2, [r3, #4]
	PID_data.Kp = kpd*(1+Parameters_data.wc*Parameters_data.lam);
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <PID_R_motor+0xf8>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b20      	ldr	r3, [pc, #128]	; (8003230 <PID_R_motor+0xf8>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4619      	mov	r1, r3
 80031b2:	4610      	mov	r0, r2
 80031b4:	f7fd fcf8 	bl	8000ba8 <__aeabi_fmul>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fbea 	bl	8000998 <__addsf3>
 80031c4:	4603      	mov	r3, r0
 80031c6:	68f9      	ldr	r1, [r7, #12]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd fced 	bl	8000ba8 <__aeabi_fmul>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <PID_R_motor+0x100>)
 80031d4:	601a      	str	r2, [r3, #0]
	PID_data.Ki = kpd*Parameters_data.wc;
 80031d6:	4b16      	ldr	r3, [pc, #88]	; (8003230 <PID_R_motor+0xf8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd fce3 	bl	8000ba8 <__aeabi_fmul>
 80031e2:	4603      	mov	r3, r0
 80031e4:	461a      	mov	r2, r3
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <PID_R_motor+0x100>)
 80031e8:	605a      	str	r2, [r3, #4]
	PID_data.Kd = kpd*Parameters_data.lam;
 80031ea:	4b11      	ldr	r3, [pc, #68]	; (8003230 <PID_R_motor+0xf8>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fd fcd9 	bl	8000ba8 <__aeabi_fmul>
 80031f6:	4603      	mov	r3, r0
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <PID_R_motor+0x100>)
 80031fc:	609a      	str	r2, [r3, #8]

	return saturation(PID_Inc(fliter(r,&Filter_data),speed,&PID_data),10000,-10000);
 80031fe:	490d      	ldr	r1, [pc, #52]	; (8003234 <PID_R_motor+0xfc>)
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff fe7d 	bl	8002f00 <fliter>
 8003206:	4603      	mov	r3, r0
 8003208:	4a0b      	ldr	r2, [pc, #44]	; (8003238 <PID_R_motor+0x100>)
 800320a:	6839      	ldr	r1, [r7, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff29 	bl	8003064 <PID_Inc>
 8003212:	4603      	mov	r3, r0
 8003214:	4a09      	ldr	r2, [pc, #36]	; (800323c <PID_R_motor+0x104>)
 8003216:	f242 7110 	movw	r1, #10000	; 0x2710
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff ff6f 	bl	80030fe <saturation>
 8003220:	4603      	mov	r3, r0
//	int b = PID_Inc(a,speed,&PID_data);
//	int c = saturation(b,10000,-10000);
//	sprintf(data,"d:%d,%d,%0.3f,",b,c,a);
//	HAL_UART_Transmit(&huart1, data, strlen(data), 0x03);
//	return c;
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	bd90      	pop	{r4, r7, pc}
 800322a:	bf00      	nop
 800322c:	20000008 	.word	0x20000008
 8003230:	20000018 	.word	0x20000018
 8003234:	2000007c 	.word	0x2000007c
 8003238:	2000008c 	.word	0x2000008c
 800323c:	ffffd8f0 	.word	0xffffd8f0

08003240 <PID_L_motor>:

//static uint8_t data[20];
//extern UART_HandleTypeDef huart1;
int PID_L_motor(float r,float speed){
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
	static Transfer1_3_Parameters transfer_data = {{0.08475},{1,32.93,502.1}};
	static Final_Parameters Parameters_data = {5,15,1.5,0.005};
	float kpd = transfer_data.den[0]*Parameters_data.wo/(transfer_data.num[0]*Parameters_data.lam);
 800324a:	4b3a      	ldr	r3, [pc, #232]	; (8003334 <PID_L_motor+0xf4>)
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	4b3a      	ldr	r3, [pc, #232]	; (8003338 <PID_L_motor+0xf8>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4619      	mov	r1, r3
 8003254:	4610      	mov	r0, r2
 8003256:	f7fd fca7 	bl	8000ba8 <__aeabi_fmul>
 800325a:	4603      	mov	r3, r0
 800325c:	461c      	mov	r4, r3
 800325e:	4b35      	ldr	r3, [pc, #212]	; (8003334 <PID_L_motor+0xf4>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b35      	ldr	r3, [pc, #212]	; (8003338 <PID_L_motor+0xf8>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	4619      	mov	r1, r3
 8003268:	4610      	mov	r0, r2
 800326a:	f7fd fc9d 	bl	8000ba8 <__aeabi_fmul>
 800326e:	4603      	mov	r3, r0
 8003270:	4619      	mov	r1, r3
 8003272:	4620      	mov	r0, r4
 8003274:	f7fd fd4c 	bl	8000d10 <__aeabi_fdiv>
 8003278:	4603      	mov	r3, r0
 800327a:	60fb      	str	r3, [r7, #12]
	static Filer_TypeDef Filter_data;
	static PID_IncTypeDef PID_data;
	Filter_data.ts = Parameters_data.ts;Filter_data.tc =1/Parameters_data.wc;
 800327c:	4b2e      	ldr	r3, [pc, #184]	; (8003338 <PID_L_motor+0xf8>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4a2e      	ldr	r2, [pc, #184]	; (800333c <PID_L_motor+0xfc>)
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b2c      	ldr	r3, [pc, #176]	; (8003338 <PID_L_motor+0xf8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800328e:	f7fd fd3f 	bl	8000d10 <__aeabi_fdiv>
 8003292:	4603      	mov	r3, r0
 8003294:	461a      	mov	r2, r3
 8003296:	4b29      	ldr	r3, [pc, #164]	; (800333c <PID_L_motor+0xfc>)
 8003298:	609a      	str	r2, [r3, #8]
	Filter_data.to = 1/Parameters_data.wo;
 800329a:	4b27      	ldr	r3, [pc, #156]	; (8003338 <PID_L_motor+0xf8>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4619      	mov	r1, r3
 80032a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80032a4:	f7fd fd34 	bl	8000d10 <__aeabi_fdiv>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	4b23      	ldr	r3, [pc, #140]	; (800333c <PID_L_motor+0xfc>)
 80032ae:	605a      	str	r2, [r3, #4]
	PID_data.Kp = kpd*(1+Parameters_data.wc*Parameters_data.lam);
 80032b0:	4b21      	ldr	r3, [pc, #132]	; (8003338 <PID_L_motor+0xf8>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b20      	ldr	r3, [pc, #128]	; (8003338 <PID_L_motor+0xf8>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f7fd fc74 	bl	8000ba8 <__aeabi_fmul>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd fb66 	bl	8000998 <__addsf3>
 80032cc:	4603      	mov	r3, r0
 80032ce:	68f9      	ldr	r1, [r7, #12]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd fc69 	bl	8000ba8 <__aeabi_fmul>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	4b19      	ldr	r3, [pc, #100]	; (8003340 <PID_L_motor+0x100>)
 80032dc:	601a      	str	r2, [r3, #0]
	PID_data.Ki = kpd*Parameters_data.wc;
 80032de:	4b16      	ldr	r3, [pc, #88]	; (8003338 <PID_L_motor+0xf8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68f9      	ldr	r1, [r7, #12]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd fc5f 	bl	8000ba8 <__aeabi_fmul>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b14      	ldr	r3, [pc, #80]	; (8003340 <PID_L_motor+0x100>)
 80032f0:	605a      	str	r2, [r3, #4]
	PID_data.Kd = kpd*Parameters_data.lam;
 80032f2:	4b11      	ldr	r3, [pc, #68]	; (8003338 <PID_L_motor+0xf8>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	68f9      	ldr	r1, [r7, #12]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd fc55 	bl	8000ba8 <__aeabi_fmul>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <PID_L_motor+0x100>)
 8003304:	609a      	str	r2, [r3, #8]

	return saturation(PID_Inc(fliter(r,&Filter_data),speed,&PID_data),10000,-10000);
 8003306:	490d      	ldr	r1, [pc, #52]	; (800333c <PID_L_motor+0xfc>)
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fdf9 	bl	8002f00 <fliter>
 800330e:	4603      	mov	r3, r0
 8003310:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <PID_L_motor+0x100>)
 8003312:	6839      	ldr	r1, [r7, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fea5 	bl	8003064 <PID_Inc>
 800331a:	4603      	mov	r3, r0
 800331c:	4a09      	ldr	r2, [pc, #36]	; (8003344 <PID_L_motor+0x104>)
 800331e:	f242 7110 	movw	r1, #10000	; 0x2710
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff feeb 	bl	80030fe <saturation>
 8003328:	4603      	mov	r3, r0
//	int b = PID_Inc(a,speed,&PID_data);
//	int c = saturation(b,10000,-10000);
//	sprintf(data,"d:%d,%d,%0.3f,",b,c,a);
//	HAL_UART_Transmit(&huart1, data, strlen(data), 0x03);
//	return c;
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bd90      	pop	{r4, r7, pc}
 8003332:	bf00      	nop
 8003334:	20000028 	.word	0x20000028
 8003338:	20000038 	.word	0x20000038
 800333c:	200000a8 	.word	0x200000a8
 8003340:	200000b8 	.word	0x200000b8
 8003344:	ffffd8f0 	.word	0xffffd8f0

08003348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800334c:	f7fd fda2 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003350:	f000 f813 	bl	800337a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003354:	f000 fa28 	bl	80037a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003358:	f000 fa00 	bl	800375c <MX_DMA_Init>
  MX_TIM1_Init();
 800335c:	f000 f852 	bl	8003404 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003360:	f000 f8d2 	bl	8003508 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003364:	f000 f928 	bl	80035b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003368:	f000 f97a 	bl	8003660 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800336c:	f000 f9cc 	bl	8003708 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  motor_init();
 8003370:	f000 fa82 	bl	8003878 <motor_init>
  my_uart_init();
 8003374:	f000 fbf2 	bl	8003b5c <my_uart_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003378:	e7fe      	b.n	8003378 <main+0x30>

0800337a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b090      	sub	sp, #64	; 0x40
 800337e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003380:	f107 0318 	add.w	r3, r7, #24
 8003384:	2228      	movs	r2, #40	; 0x28
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f000 ff11 	bl	80041b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800339c:	2301      	movs	r3, #1
 800339e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033a4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80033a6:	2300      	movs	r3, #0
 80033a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033aa:	2301      	movs	r3, #1
 80033ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033ae:	2302      	movs	r3, #2
 80033b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80033b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80033bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033be:	f107 0318 	add.w	r3, r7, #24
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fa36 	bl	8001834 <HAL_RCC_OscConfig>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80033ce:	f000 fa4d 	bl	800386c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033d2:	230f      	movs	r3, #15
 80033d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033d6:	2302      	movs	r3, #2
 80033d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033e8:	1d3b      	adds	r3, r7, #4
 80033ea:	2102      	movs	r1, #2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe fca1 	bl	8001d34 <HAL_RCC_ClockConfig>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <SystemClock_Config+0x82>
  {
    Error_Handler();
 80033f8:	f000 fa38 	bl	800386c <Error_Handler>
  }
}
 80033fc:	bf00      	nop
 80033fe:	3740      	adds	r7, #64	; 0x40
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b092      	sub	sp, #72	; 0x48
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800340a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
 8003424:	615a      	str	r2, [r3, #20]
 8003426:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003428:	1d3b      	adds	r3, r7, #4
 800342a:	2220      	movs	r2, #32
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f000 febe 	bl	80041b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003434:	4b32      	ldr	r3, [pc, #200]	; (8003500 <MX_TIM1_Init+0xfc>)
 8003436:	4a33      	ldr	r2, [pc, #204]	; (8003504 <MX_TIM1_Init+0x100>)
 8003438:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800343a:	4b31      	ldr	r3, [pc, #196]	; (8003500 <MX_TIM1_Init+0xfc>)
 800343c:	2200      	movs	r2, #0
 800343e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003440:	4b2f      	ldr	r3, [pc, #188]	; (8003500 <MX_TIM1_Init+0xfc>)
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10001;
 8003446:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <MX_TIM1_Init+0xfc>)
 8003448:	f242 7211 	movw	r2, #10001	; 0x2711
 800344c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800344e:	4b2c      	ldr	r3, [pc, #176]	; (8003500 <MX_TIM1_Init+0xfc>)
 8003450:	2200      	movs	r2, #0
 8003452:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003454:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <MX_TIM1_Init+0xfc>)
 8003456:	2200      	movs	r2, #0
 8003458:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800345a:	4b29      	ldr	r3, [pc, #164]	; (8003500 <MX_TIM1_Init+0xfc>)
 800345c:	2200      	movs	r2, #0
 800345e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003460:	4827      	ldr	r0, [pc, #156]	; (8003500 <MX_TIM1_Init+0xfc>)
 8003462:	f7fe fe03 	bl	800206c <HAL_TIM_PWM_Init>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800346c:	f000 f9fe 	bl	800386c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003470:	2300      	movs	r3, #0
 8003472:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003474:	2300      	movs	r3, #0
 8003476:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003478:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800347c:	4619      	mov	r1, r3
 800347e:	4820      	ldr	r0, [pc, #128]	; (8003500 <MX_TIM1_Init+0xfc>)
 8003480:	f7ff f9ec 	bl	800285c <HAL_TIMEx_MasterConfigSynchronization>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800348a:	f000 f9ef 	bl	800386c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800348e:	2360      	movs	r3, #96	; 0x60
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003496:	2300      	movs	r3, #0
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800349a:	2300      	movs	r3, #0
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800349e:	2300      	movs	r3, #0
 80034a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034aa:	220c      	movs	r2, #12
 80034ac:	4619      	mov	r1, r3
 80034ae:	4814      	ldr	r0, [pc, #80]	; (8003500 <MX_TIM1_Init+0xfc>)
 80034b0:	f7fe ff00 	bl	80022b4 <HAL_TIM_PWM_ConfigChannel>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80034ba:	f000 f9d7 	bl	800386c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	4619      	mov	r1, r3
 80034e0:	4807      	ldr	r0, [pc, #28]	; (8003500 <MX_TIM1_Init+0xfc>)
 80034e2:	f7ff f9ff 	bl	80028e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80034ec:	f000 f9be 	bl	800386c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80034f0:	4803      	ldr	r0, [pc, #12]	; (8003500 <MX_TIM1_Init+0xfc>)
 80034f2:	f000 fc9b 	bl	8003e2c <HAL_TIM_MspPostInit>

}
 80034f6:	bf00      	nop
 80034f8:	3748      	adds	r7, #72	; 0x48
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000268 	.word	0x20000268
 8003504:	40012c00 	.word	0x40012c00

08003508 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	; 0x28
 800350c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800350e:	f107 0320 	add.w	r3, r7, #32
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003518:	1d3b      	adds	r3, r7, #4
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	60da      	str	r2, [r3, #12]
 8003524:	611a      	str	r2, [r3, #16]
 8003526:	615a      	str	r2, [r3, #20]
 8003528:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <MX_TIM2_Init+0xac>)
 800352c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003530:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <MX_TIM2_Init+0xac>)
 8003534:	2200      	movs	r2, #0
 8003536:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003538:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <MX_TIM2_Init+0xac>)
 800353a:	2200      	movs	r2, #0
 800353c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10001;
 800353e:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <MX_TIM2_Init+0xac>)
 8003540:	f242 7211 	movw	r2, #10001	; 0x2711
 8003544:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003546:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <MX_TIM2_Init+0xac>)
 8003548:	2200      	movs	r2, #0
 800354a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800354c:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <MX_TIM2_Init+0xac>)
 800354e:	2200      	movs	r2, #0
 8003550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003552:	4818      	ldr	r0, [pc, #96]	; (80035b4 <MX_TIM2_Init+0xac>)
 8003554:	f7fe fd8a 	bl	800206c <HAL_TIM_PWM_Init>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800355e:	f000 f985 	bl	800386c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003566:	2300      	movs	r3, #0
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800356a:	f107 0320 	add.w	r3, r7, #32
 800356e:	4619      	mov	r1, r3
 8003570:	4810      	ldr	r0, [pc, #64]	; (80035b4 <MX_TIM2_Init+0xac>)
 8003572:	f7ff f973 	bl	800285c <HAL_TIMEx_MasterConfigSynchronization>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800357c:	f000 f976 	bl	800386c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003580:	2360      	movs	r3, #96	; 0x60
 8003582:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	220c      	movs	r2, #12
 8003594:	4619      	mov	r1, r3
 8003596:	4807      	ldr	r0, [pc, #28]	; (80035b4 <MX_TIM2_Init+0xac>)
 8003598:	f7fe fe8c 	bl	80022b4 <HAL_TIM_PWM_ConfigChannel>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80035a2:	f000 f963 	bl	800386c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80035a6:	4803      	ldr	r0, [pc, #12]	; (80035b4 <MX_TIM2_Init+0xac>)
 80035a8:	f000 fc40 	bl	8003e2c <HAL_TIM_MspPostInit>

}
 80035ac:	bf00      	nop
 80035ae:	3728      	adds	r7, #40	; 0x28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	200002a8 	.word	0x200002a8

080035b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08c      	sub	sp, #48	; 0x30
 80035bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035be:	f107 030c 	add.w	r3, r7, #12
 80035c2:	2224      	movs	r2, #36	; 0x24
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fdf2 	bl	80041b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035d4:	4b20      	ldr	r3, [pc, #128]	; (8003658 <MX_TIM3_Init+0xa0>)
 80035d6:	4a21      	ldr	r2, [pc, #132]	; (800365c <MX_TIM3_Init+0xa4>)
 80035d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80035da:	4b1f      	ldr	r3, [pc, #124]	; (8003658 <MX_TIM3_Init+0xa0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <MX_TIM3_Init+0xa0>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80035e6:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <MX_TIM3_Init+0xa0>)
 80035e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ee:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <MX_TIM3_Init+0xa0>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035f4:	4b18      	ldr	r3, [pc, #96]	; (8003658 <MX_TIM3_Init+0xa0>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80035fa:	2303      	movs	r3, #3
 80035fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003602:	2301      	movs	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800360a:	2305      	movs	r3, #5
 800360c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800360e:	2300      	movs	r3, #0
 8003610:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003612:	2301      	movs	r3, #1
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003616:	2300      	movs	r3, #0
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 800361a:	2305      	movs	r3, #5
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800361e:	f107 030c 	add.w	r3, r7, #12
 8003622:	4619      	mov	r1, r3
 8003624:	480c      	ldr	r0, [pc, #48]	; (8003658 <MX_TIM3_Init+0xa0>)
 8003626:	f7fe fd7f 	bl	8002128 <HAL_TIM_Encoder_Init>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003630:	f000 f91c 	bl	800386c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003634:	2300      	movs	r3, #0
 8003636:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003638:	2300      	movs	r3, #0
 800363a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	4619      	mov	r1, r3
 8003640:	4805      	ldr	r0, [pc, #20]	; (8003658 <MX_TIM3_Init+0xa0>)
 8003642:	f7ff f90b 	bl	800285c <HAL_TIMEx_MasterConfigSynchronization>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800364c:	f000 f90e 	bl	800386c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003650:	bf00      	nop
 8003652:	3730      	adds	r7, #48	; 0x30
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20000160 	.word	0x20000160
 800365c:	40000400 	.word	0x40000400

08003660 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08c      	sub	sp, #48	; 0x30
 8003664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003666:	f107 030c 	add.w	r3, r7, #12
 800366a:	2224      	movs	r2, #36	; 0x24
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fd9e 	bl	80041b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800367c:	4b20      	ldr	r3, [pc, #128]	; (8003700 <MX_TIM4_Init+0xa0>)
 800367e:	4a21      	ldr	r2, [pc, #132]	; (8003704 <MX_TIM4_Init+0xa4>)
 8003680:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003682:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <MX_TIM4_Init+0xa0>)
 8003684:	2200      	movs	r2, #0
 8003686:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003688:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <MX_TIM4_Init+0xa0>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800368e:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <MX_TIM4_Init+0xa0>)
 8003690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003694:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003696:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <MX_TIM4_Init+0xa0>)
 8003698:	2200      	movs	r2, #0
 800369a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800369c:	4b18      	ldr	r3, [pc, #96]	; (8003700 <MX_TIM4_Init+0xa0>)
 800369e:	2200      	movs	r2, #0
 80036a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036a2:	2303      	movs	r3, #3
 80036a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036aa:	2301      	movs	r3, #1
 80036ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80036b2:	2305      	movs	r3, #5
 80036b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036b6:	2300      	movs	r3, #0
 80036b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036ba:	2301      	movs	r3, #1
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80036be:	2300      	movs	r3, #0
 80036c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 80036c2:	2305      	movs	r3, #5
 80036c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80036c6:	f107 030c 	add.w	r3, r7, #12
 80036ca:	4619      	mov	r1, r3
 80036cc:	480c      	ldr	r0, [pc, #48]	; (8003700 <MX_TIM4_Init+0xa0>)
 80036ce:	f7fe fd2b 	bl	8002128 <HAL_TIM_Encoder_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80036d8:	f000 f8c8 	bl	800386c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036dc:	2300      	movs	r3, #0
 80036de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036e4:	1d3b      	adds	r3, r7, #4
 80036e6:	4619      	mov	r1, r3
 80036e8:	4805      	ldr	r0, [pc, #20]	; (8003700 <MX_TIM4_Init+0xa0>)
 80036ea:	f7ff f8b7 	bl	800285c <HAL_TIMEx_MasterConfigSynchronization>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80036f4:	f000 f8ba 	bl	800386c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80036f8:	bf00      	nop
 80036fa:	3730      	adds	r7, #48	; 0x30
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20000120 	.word	0x20000120
 8003704:	40000800 	.word	0x40000800

08003708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <MX_USART1_UART_Init+0x4c>)
 800370e:	4a12      	ldr	r2, [pc, #72]	; (8003758 <MX_USART1_UART_Init+0x50>)
 8003710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <MX_USART1_UART_Init+0x4c>)
 8003714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800371a:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <MX_USART1_UART_Init+0x4c>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <MX_USART1_UART_Init+0x4c>)
 8003722:	2200      	movs	r2, #0
 8003724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <MX_USART1_UART_Init+0x4c>)
 8003728:	2200      	movs	r2, #0
 800372a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <MX_USART1_UART_Init+0x4c>)
 800372e:	220c      	movs	r2, #12
 8003730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <MX_USART1_UART_Init+0x4c>)
 8003734:	2200      	movs	r2, #0
 8003736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <MX_USART1_UART_Init+0x4c>)
 800373a:	2200      	movs	r2, #0
 800373c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800373e:	4805      	ldr	r0, [pc, #20]	; (8003754 <MX_USART1_UART_Init+0x4c>)
 8003740:	f7ff f921 	bl	8002986 <HAL_UART_Init>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800374a:	f000 f88f 	bl	800386c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000228 	.word	0x20000228
 8003758:	40013800 	.word	0x40013800

0800375c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <MX_DMA_Init+0x48>)
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	4a0f      	ldr	r2, [pc, #60]	; (80037a4 <MX_DMA_Init+0x48>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	6153      	str	r3, [r2, #20]
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <MX_DMA_Init+0x48>)
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 800377a:	2200      	movs	r2, #0
 800377c:	2103      	movs	r1, #3
 800377e:	200e      	movs	r0, #14
 8003780:	f7fd fcc1 	bl	8001106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003784:	200e      	movs	r0, #14
 8003786:	f7fd fcda 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 800378a:	2200      	movs	r2, #0
 800378c:	2103      	movs	r1, #3
 800378e:	200f      	movs	r0, #15
 8003790:	f7fd fcb9 	bl	8001106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003794:	200f      	movs	r0, #15
 8003796:	f7fd fcd2 	bl	800113e <HAL_NVIC_EnableIRQ>

}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000

080037a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ae:	f107 0310 	add.w	r3, r7, #16
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037bc:	4b28      	ldr	r3, [pc, #160]	; (8003860 <MX_GPIO_Init+0xb8>)
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	4a27      	ldr	r2, [pc, #156]	; (8003860 <MX_GPIO_Init+0xb8>)
 80037c2:	f043 0320 	orr.w	r3, r3, #32
 80037c6:	6193      	str	r3, [r2, #24]
 80037c8:	4b25      	ldr	r3, [pc, #148]	; (8003860 <MX_GPIO_Init+0xb8>)
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d4:	4b22      	ldr	r3, [pc, #136]	; (8003860 <MX_GPIO_Init+0xb8>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	4a21      	ldr	r2, [pc, #132]	; (8003860 <MX_GPIO_Init+0xb8>)
 80037da:	f043 0304 	orr.w	r3, r3, #4
 80037de:	6193      	str	r3, [r2, #24]
 80037e0:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <MX_GPIO_Init+0xb8>)
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ec:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <MX_GPIO_Init+0xb8>)
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <MX_GPIO_Init+0xb8>)
 80037f2:	f043 0308 	orr.w	r3, r3, #8
 80037f6:	6193      	str	r3, [r2, #24]
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <MX_GPIO_Init+0xb8>)
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DirOfRight_Pin|DirOfLeft_Pin, GPIO_PIN_RESET);
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800380a:	4816      	ldr	r0, [pc, #88]	; (8003864 <MX_GPIO_Init+0xbc>)
 800380c:	f7fd fffa 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(brake_GPIO_Port, brake_Pin, GPIO_PIN_RESET);
 8003810:	2200      	movs	r2, #0
 8003812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003816:	4814      	ldr	r0, [pc, #80]	; (8003868 <MX_GPIO_Init+0xc0>)
 8003818:	f7fd fff4 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DirOfRight_Pin DirOfLeft_Pin */
  GPIO_InitStruct.Pin = DirOfRight_Pin|DirOfLeft_Pin;
 800381c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003822:	2301      	movs	r3, #1
 8003824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800382a:	2301      	movs	r3, #1
 800382c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800382e:	f107 0310 	add.w	r3, r7, #16
 8003832:	4619      	mov	r1, r3
 8003834:	480b      	ldr	r0, [pc, #44]	; (8003864 <MX_GPIO_Init+0xbc>)
 8003836:	f7fd fe8b 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : brake_Pin */
  GPIO_InitStruct.Pin = brake_Pin;
 800383a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800383e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003840:	2301      	movs	r3, #1
 8003842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003848:	2302      	movs	r3, #2
 800384a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(brake_GPIO_Port, &GPIO_InitStruct);
 800384c:	f107 0310 	add.w	r3, r7, #16
 8003850:	4619      	mov	r1, r3
 8003852:	4805      	ldr	r0, [pc, #20]	; (8003868 <MX_GPIO_Init+0xc0>)
 8003854:	f7fd fe7c 	bl	8001550 <HAL_GPIO_Init>

}
 8003858:	bf00      	nop
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000
 8003864:	40010c00 	.word	0x40010c00
 8003868:	40010800 	.word	0x40010800

0800386c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <motor_init>:
extern TIM_HandleTypeDef htim3;
static int LeftValueOfPulseNum;
static int RightValueOPulseNum;
static float speed_R,speed_L;

void motor_init(){
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800387c:	213c      	movs	r1, #60	; 0x3c
 800387e:	4814      	ldr	r0, [pc, #80]	; (80038d0 <motor_init+0x58>)
 8003880:	f7fe fce0 	bl	8002244 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8003884:	213c      	movs	r1, #60	; 0x3c
 8003886:	4813      	ldr	r0, [pc, #76]	; (80038d4 <motor_init+0x5c>)
 8003888:	f7fe fcdc 	bl	8002244 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim3,CENTRAL_POINT);
 800388c:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <motor_init+0x58>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 8003894:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,CENTRAL_POINT);
 8003896:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <motor_init+0x5c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 800389e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4); //PWM
 80038a0:	210c      	movs	r1, #12
 80038a2:	480d      	ldr	r0, [pc, #52]	; (80038d8 <motor_init+0x60>)
 80038a4:	f7fe fc0e 	bl	80020c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4); //PWM
 80038a8:	210c      	movs	r1, #12
 80038aa:	480c      	ldr	r0, [pc, #48]	; (80038dc <motor_init+0x64>)
 80038ac:	f7fe fc0a 	bl	80020c4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <motor_init+0x60>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2200      	movs	r2, #0
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,0);
 80038b8:	4b08      	ldr	r3, [pc, #32]	; (80038dc <motor_init+0x64>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2200      	movs	r2, #0
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80038c0:	2200      	movs	r2, #0
 80038c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038c6:	4806      	ldr	r0, [pc, #24]	; (80038e0 <motor_init+0x68>)
 80038c8:	f7fd ff9c 	bl	8001804 <HAL_GPIO_WritePin>
}
 80038cc:	bf00      	nop
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000160 	.word	0x20000160
 80038d4:	20000120 	.word	0x20000120
 80038d8:	20000268 	.word	0x20000268
 80038dc:	200002a8 	.word	0x200002a8
 80038e0:	40010800 	.word	0x40010800

080038e4 <set_motor_PWM>:

void set_motor_PWM(enum RightOrLeft side,int value){
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	6039      	str	r1, [r7, #0]
 80038ee:	71fb      	strb	r3, [r7, #7]
	if(side == left){
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d119      	bne.n	800392a <set_motor_PWM+0x46>
		if (value >= 0) {
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	db0a      	blt.n	8003912 <set_motor_PWM+0x2e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80038fc:	2201      	movs	r2, #1
 80038fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003902:	4818      	ldr	r0, [pc, #96]	; (8003964 <set_motor_PWM+0x80>)
 8003904:	f7fd ff7e 	bl	8001804 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,value);
 8003908:	4b17      	ldr	r3, [pc, #92]	; (8003968 <set_motor_PWM+0x84>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
		}else{//backward
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,-value);
		}
	}
}
 8003910:	e024      	b.n	800395c <set_motor_PWM+0x78>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8003912:	2200      	movs	r2, #0
 8003914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003918:	4812      	ldr	r0, [pc, #72]	; (8003964 <set_motor_PWM+0x80>)
 800391a:	f7fd ff73 	bl	8001804 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,-value);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	425a      	negs	r2, r3
 8003922:	4b11      	ldr	r3, [pc, #68]	; (8003968 <set_motor_PWM+0x84>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003928:	e018      	b.n	800395c <set_motor_PWM+0x78>
		if (value >= 0) {
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	db0a      	blt.n	8003946 <set_motor_PWM+0x62>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8003930:	2201      	movs	r2, #1
 8003932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003936:	480b      	ldr	r0, [pc, #44]	; (8003964 <set_motor_PWM+0x80>)
 8003938:	f7fd ff64 	bl	8001804 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,value);
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <set_motor_PWM+0x88>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003944:	e00a      	b.n	800395c <set_motor_PWM+0x78>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8003946:	2200      	movs	r2, #0
 8003948:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800394c:	4805      	ldr	r0, [pc, #20]	; (8003964 <set_motor_PWM+0x80>)
 800394e:	f7fd ff59 	bl	8001804 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,-value);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	425a      	negs	r2, r3
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <set_motor_PWM+0x88>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40010c00 	.word	0x40010c00
 8003968:	20000268 	.word	0x20000268
 800396c:	200002a8 	.word	0x200002a8

08003970 <get_motor_speed>:

void get_motor_speed(){
 8003970:	b598      	push	{r3, r4, r7, lr}
 8003972:	af00      	add	r7, sp, #0
//	DirOfLeft = !(!((htim3.Instance->CR1) & (0x10)));
//	DirOfRight = !((htim4.Instance->CR1) & (0x10));
	LeftValueOfPulseNum = (uint32_t)(__HAL_TIM_GET_COUNTER(&htim3));
 8003974:	4b40      	ldr	r3, [pc, #256]	; (8003a78 <get_motor_speed+0x108>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	461a      	mov	r2, r3
 800397c:	4b3f      	ldr	r3, [pc, #252]	; (8003a7c <get_motor_speed+0x10c>)
 800397e:	601a      	str	r2, [r3, #0]
	RightValueOPulseNum = (uint32_t)(__HAL_TIM_GET_COUNTER(&htim4));
 8003980:	4b3f      	ldr	r3, [pc, #252]	; (8003a80 <get_motor_speed+0x110>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	461a      	mov	r2, r3
 8003988:	4b3e      	ldr	r3, [pc, #248]	; (8003a84 <get_motor_speed+0x114>)
 800398a:	601a      	str	r2, [r3, #0]
//	if(DirOfRight != forward){
//		RightValueOPulseNum = -(RightValueOPulseNum-CENTRAL_POINT );
//	}else{//正转
//		RightValueOPulseNum = CENTRAL_POINT - RightValueOPulseNum;
//	}
	RightValueOPulseNum = RightValueOPulseNum - CENTRAL_POINT ;
 800398c:	4b3d      	ldr	r3, [pc, #244]	; (8003a84 <get_motor_speed+0x114>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8003994:	3b7d      	subs	r3, #125	; 0x7d
 8003996:	4a3b      	ldr	r2, [pc, #236]	; (8003a84 <get_motor_speed+0x114>)
 8003998:	6013      	str	r3, [r2, #0]
	LeftValueOfPulseNum = CENTRAL_POINT-LeftValueOfPulseNum;
 800399a:	4b38      	ldr	r3, [pc, #224]	; (8003a7c <get_motor_speed+0x10c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80039a2:	337d      	adds	r3, #125	; 0x7d
 80039a4:	4a35      	ldr	r2, [pc, #212]	; (8003a7c <get_motor_speed+0x10c>)
 80039a6:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim3,CENTRAL_POINT);
 80039a8:	4b33      	ldr	r3, [pc, #204]	; (8003a78 <get_motor_speed+0x108>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,CENTRAL_POINT);
 80039b2:	4b33      	ldr	r3, [pc, #204]	; (8003a80 <get_motor_speed+0x110>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24
	speed_R= ((float)RightValueOPulseNum)*200.0/2528.0*0.6283;
 80039bc:	4b31      	ldr	r3, [pc, #196]	; (8003a84 <get_motor_speed+0x114>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fd f89d 	bl	8000b00 <__aeabi_i2f>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fc fd25 	bl	8000418 <__aeabi_f2d>
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <get_motor_speed+0x118>)
 80039d4:	f7fc fd78 	bl	80004c8 <__aeabi_dmul>
 80039d8:	4603      	mov	r3, r0
 80039da:	460c      	mov	r4, r1
 80039dc:	4618      	mov	r0, r3
 80039de:	4621      	mov	r1, r4
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	4b29      	ldr	r3, [pc, #164]	; (8003a8c <get_motor_speed+0x11c>)
 80039e6:	f7fc fe99 	bl	800071c <__aeabi_ddiv>
 80039ea:	4603      	mov	r3, r0
 80039ec:	460c      	mov	r4, r1
 80039ee:	4618      	mov	r0, r3
 80039f0:	4621      	mov	r1, r4
 80039f2:	a31d      	add	r3, pc, #116	; (adr r3, 8003a68 <get_motor_speed+0xf8>)
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	f7fc fd66 	bl	80004c8 <__aeabi_dmul>
 80039fc:	4603      	mov	r3, r0
 80039fe:	460c      	mov	r4, r1
 8003a00:	4618      	mov	r0, r3
 8003a02:	4621      	mov	r1, r4
 8003a04:	f7fc ff72 	bl	80008ec <__aeabi_d2f>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <get_motor_speed+0x120>)
 8003a0c:	601a      	str	r2, [r3, #0]
	speed_L= ((float)LeftValueOfPulseNum)*200.0/1685.0*0.6283;
 8003a0e:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <get_motor_speed+0x10c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd f874 	bl	8000b00 <__aeabi_i2f>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fc fcfc 	bl	8000418 <__aeabi_f2d>
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	4b18      	ldr	r3, [pc, #96]	; (8003a88 <get_motor_speed+0x118>)
 8003a26:	f7fc fd4f 	bl	80004c8 <__aeabi_dmul>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	460c      	mov	r4, r1
 8003a2e:	4618      	mov	r0, r3
 8003a30:	4621      	mov	r1, r4
 8003a32:	a30f      	add	r3, pc, #60	; (adr r3, 8003a70 <get_motor_speed+0x100>)
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	f7fc fe70 	bl	800071c <__aeabi_ddiv>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	460c      	mov	r4, r1
 8003a40:	4618      	mov	r0, r3
 8003a42:	4621      	mov	r1, r4
 8003a44:	a308      	add	r3, pc, #32	; (adr r3, 8003a68 <get_motor_speed+0xf8>)
 8003a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4a:	f7fc fd3d 	bl	80004c8 <__aeabi_dmul>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	460c      	mov	r4, r1
 8003a52:	4618      	mov	r0, r3
 8003a54:	4621      	mov	r1, r4
 8003a56:	f7fc ff49 	bl	80008ec <__aeabi_d2f>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <get_motor_speed+0x124>)
 8003a5e:	601a      	str	r2, [r3, #0]
}
 8003a60:	bf00      	nop
 8003a62:	bd98      	pop	{r3, r4, r7, pc}
 8003a64:	f3af 8000 	nop.w
 8003a68:	9a027525 	.word	0x9a027525
 8003a6c:	3fe41b08 	.word	0x3fe41b08
 8003a70:	00000000 	.word	0x00000000
 8003a74:	409a5400 	.word	0x409a5400
 8003a78:	20000160 	.word	0x20000160
 8003a7c:	200000d4 	.word	0x200000d4
 8003a80:	20000120 	.word	0x20000120
 8003a84:	200000d8 	.word	0x200000d8
 8003a88:	40690000 	.word	0x40690000
 8003a8c:	40a3c000 	.word	0x40a3c000
 8003a90:	200000dc 	.word	0x200000dc
 8003a94:	200000e0 	.word	0x200000e0

08003a98 <my_one_step>:

//static uint8_t data[30];
//uint32_t counter;
//uint32_t PWM=0;
void my_one_step(){
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
	static uint32_t wakeup_counter = 0;
	int left_PWMvalue,right_PWMvalue;
//	int PWMvalue;
//	static uint32_t i = 0;
	get_motor_speed();
 8003a9e:	f7ff ff67 	bl	8003970 <get_motor_speed>
//	PWMvalue = PID_R_motor(ForwardSpeed,speed_R);
//	PWMvalue = PID_L_motor(ForwardSpeed,speed_L);
//	if(i<2000){i++;}else{PWMvalue+=3000;}
	static decoulpe_TypeDef decouple_speed;
	decoupling(ForwardSpeed, RollSpeed, &decouple_speed);
 8003aa2:	4b27      	ldr	r3, [pc, #156]	; (8003b40 <my_one_step+0xa8>)
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <my_one_step+0xac>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a27      	ldr	r2, [pc, #156]	; (8003b48 <my_one_step+0xb0>)
 8003aac:	4619      	mov	r1, r3
 8003aae:	f7ff f9db 	bl	8002e68 <decoupling>
	left_PWMvalue = PID_L_motor(decouple_speed.Speed_L,speed_L);
 8003ab2:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <my_one_step+0xb0>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b25      	ldr	r3, [pc, #148]	; (8003b4c <my_one_step+0xb4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f7ff fbbf 	bl	8003240 <PID_L_motor>
 8003ac2:	6078      	str	r0, [r7, #4]
	right_PWMvalue = PID_R_motor(decouple_speed.Speed_R,speed_R);
 8003ac4:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <my_one_step+0xb0>)
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <my_one_step+0xb8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f7ff fb32 	bl	8003138 <PID_R_motor>
 8003ad4:	6038      	str	r0, [r7, #0]
	set_motor_PWM(left,left_PWMvalue);
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	2001      	movs	r0, #1
 8003ada:	f7ff ff03 	bl	80038e4 <set_motor_PWM>
	set_motor_PWM(right,right_PWMvalue);
 8003ade:	6839      	ldr	r1, [r7, #0]
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f7ff feff 	bl	80038e4 <set_motor_PWM>
	if(left_PWMvalue <= 100 && left_PWMvalue>= -100 && right_PWMvalue <=100 && right_PWMvalue>= -100){
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b64      	cmp	r3, #100	; 0x64
 8003aea:	dc1b      	bgt.n	8003b24 <my_one_step+0x8c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003af2:	db17      	blt.n	8003b24 <my_one_step+0x8c>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	dc14      	bgt.n	8003b24 <my_one_step+0x8c>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003b00:	db10      	blt.n	8003b24 <my_one_step+0x8c>
		if(wakeup_counter > 100){
 8003b02:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <my_one_step+0xbc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b64      	cmp	r3, #100	; 0x64
 8003b08:	d906      	bls.n	8003b18 <my_one_step+0x80>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b10:	4811      	ldr	r0, [pc, #68]	; (8003b58 <my_one_step+0xc0>)
 8003b12:	f7fd fe77 	bl	8001804 <HAL_GPIO_WritePin>
		if(wakeup_counter > 100){
 8003b16:	e00e      	b.n	8003b36 <my_one_step+0x9e>
		}else{
			wakeup_counter++;
 8003b18:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <my_one_step+0xbc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	4a0d      	ldr	r2, [pc, #52]	; (8003b54 <my_one_step+0xbc>)
 8003b20:	6013      	str	r3, [r2, #0]
		if(wakeup_counter > 100){
 8003b22:	e008      	b.n	8003b36 <my_one_step+0x9e>
		}
	}else{
		wakeup_counter=0;
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <my_one_step+0xbc>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b30:	4809      	ldr	r0, [pc, #36]	; (8003b58 <my_one_step+0xc0>)
 8003b32:	f7fd fe67 	bl	8001804 <HAL_GPIO_WritePin>
	}
//	sprintf(data,"%2.4f\n",speed_L);
//	HAL_UART_Transmit(&huart1, data, strlen(data), 0x05);


}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000110 	.word	0x20000110
 8003b44:	20000048 	.word	0x20000048
 8003b48:	200000e4 	.word	0x200000e4
 8003b4c:	200000e0 	.word	0x200000e0
 8003b50:	200000dc 	.word	0x200000dc
 8003b54:	200000ec 	.word	0x200000ec
 8003b58:	40010800 	.word	0x40010800

08003b5c <my_uart_init>:

static uint8_t rec_data_FIFO[20];
static uint8_t rec_data[10];
float ForwardSpeed = 0,RollSpeed = 0.5;
static FloatToUnsignedChar FTUC;
void my_uart_init(){
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, rec_data_FIFO, 20);
 8003b60:	2214      	movs	r2, #20
 8003b62:	4903      	ldr	r1, [pc, #12]	; (8003b70 <my_uart_init+0x14>)
 8003b64:	4803      	ldr	r0, [pc, #12]	; (8003b74 <my_uart_init+0x18>)
 8003b66:	f7fe ff5b 	bl	8002a20 <HAL_UART_Receive_DMA>
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200000f0 	.word	0x200000f0
 8003b74:	20000228 	.word	0x20000228

08003b78 <transfer_data_old>:

void transfer_data_old(){
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
	if((rec_data[0]==0xff)&&(rec_data[9]==0xff)){
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <transfer_data_old+0x6c>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2bff      	cmp	r3, #255	; 0xff
 8003b82:	d12b      	bne.n	8003bdc <transfer_data_old+0x64>
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <transfer_data_old+0x6c>)
 8003b86:	7a5b      	ldrb	r3, [r3, #9]
 8003b88:	2bff      	cmp	r3, #255	; 0xff
 8003b8a:	d127      	bne.n	8003bdc <transfer_data_old+0x64>
		FTUC.U8.low = rec_data[1];
 8003b8c:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <transfer_data_old+0x6c>)
 8003b8e:	785a      	ldrb	r2, [r3, #1]
 8003b90:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <transfer_data_old+0x70>)
 8003b92:	701a      	strb	r2, [r3, #0]
		FTUC.U8.mlow = rec_data[2];
 8003b94:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <transfer_data_old+0x6c>)
 8003b96:	789a      	ldrb	r2, [r3, #2]
 8003b98:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <transfer_data_old+0x70>)
 8003b9a:	705a      	strb	r2, [r3, #1]
		FTUC.U8.mhigh = rec_data[3];
 8003b9c:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <transfer_data_old+0x6c>)
 8003b9e:	78da      	ldrb	r2, [r3, #3]
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <transfer_data_old+0x70>)
 8003ba2:	709a      	strb	r2, [r3, #2]
		FTUC.U8.high = rec_data[4];
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <transfer_data_old+0x6c>)
 8003ba6:	791a      	ldrb	r2, [r3, #4]
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <transfer_data_old+0x70>)
 8003baa:	70da      	strb	r2, [r3, #3]
		ForwardSpeed = FTUC.F32;
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <transfer_data_old+0x70>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a0e      	ldr	r2, [pc, #56]	; (8003bec <transfer_data_old+0x74>)
 8003bb2:	6013      	str	r3, [r2, #0]
		FTUC.U8.low = rec_data[5];
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <transfer_data_old+0x6c>)
 8003bb6:	795a      	ldrb	r2, [r3, #5]
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <transfer_data_old+0x70>)
 8003bba:	701a      	strb	r2, [r3, #0]
		FTUC.U8.mlow = rec_data[6];
 8003bbc:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <transfer_data_old+0x6c>)
 8003bbe:	799a      	ldrb	r2, [r3, #6]
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <transfer_data_old+0x70>)
 8003bc2:	705a      	strb	r2, [r3, #1]
		FTUC.U8.mhigh = rec_data[7];
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <transfer_data_old+0x6c>)
 8003bc6:	79da      	ldrb	r2, [r3, #7]
 8003bc8:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <transfer_data_old+0x70>)
 8003bca:	709a      	strb	r2, [r3, #2]
		FTUC.U8.high = rec_data[8];
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <transfer_data_old+0x6c>)
 8003bce:	7a1a      	ldrb	r2, [r3, #8]
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <transfer_data_old+0x70>)
 8003bd2:	70da      	strb	r2, [r3, #3]
		RollSpeed = FTUC.F32;
 8003bd4:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <transfer_data_old+0x70>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <transfer_data_old+0x78>)
 8003bda:	6013      	str	r3, [r2, #0]
	}
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr
 8003be4:	20000104 	.word	0x20000104
 8003be8:	20000114 	.word	0x20000114
 8003bec:	20000110 	.word	0x20000110
 8003bf0:	20000048 	.word	0x20000048

08003bf4 <HAL_UART_RxHalfCpltCallback>:
				}
			}
	}
}

void HAL_UART_RxHalfCpltCallback  ( UART_HandleTypeDef *  huart ){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance){
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <HAL_UART_RxHalfCpltCallback+0x40>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d110      	bne.n	8003c2a <HAL_UART_RxHalfCpltCallback+0x36>
		for(uint8_t i =0;i<10;i++){
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73fb      	strb	r3, [r7, #15]
 8003c0c:	e00a      	b.n	8003c24 <HAL_UART_RxHalfCpltCallback+0x30>
			rec_data[i]=rec_data_FIFO[i];
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	4909      	ldr	r1, [pc, #36]	; (8003c38 <HAL_UART_RxHalfCpltCallback+0x44>)
 8003c14:	5c89      	ldrb	r1, [r1, r2]
 8003c16:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <HAL_UART_RxHalfCpltCallback+0x48>)
 8003c18:	54d1      	strb	r1, [r2, r3]
			transfer_data_old();
 8003c1a:	f7ff ffad 	bl	8003b78 <transfer_data_old>
		for(uint8_t i =0;i<10;i++){
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	3301      	adds	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	2b09      	cmp	r3, #9
 8003c28:	d9f1      	bls.n	8003c0e <HAL_UART_RxHalfCpltCallback+0x1a>
		}
	}
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000228 	.word	0x20000228
 8003c38:	200000f0 	.word	0x200000f0
 8003c3c:	20000104 	.word	0x20000104

08003c40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback  ( UART_HandleTypeDef *  huart ){
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance){
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <HAL_UART_RxCpltCallback+0x44>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d112      	bne.n	8003c7a <HAL_UART_RxCpltCallback+0x3a>
		for(uint8_t i =0;i<10;i++){
 8003c54:	2300      	movs	r3, #0
 8003c56:	73fb      	strb	r3, [r7, #15]
 8003c58:	e00c      	b.n	8003c74 <HAL_UART_RxCpltCallback+0x34>
			rec_data[i]=rec_data_FIFO[i+10];
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	f103 020a 	add.w	r2, r3, #10
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	4909      	ldr	r1, [pc, #36]	; (8003c88 <HAL_UART_RxCpltCallback+0x48>)
 8003c64:	5c89      	ldrb	r1, [r1, r2]
 8003c66:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <HAL_UART_RxCpltCallback+0x4c>)
 8003c68:	54d1      	strb	r1, [r2, r3]
			transfer_data_old();
 8003c6a:	f7ff ff85 	bl	8003b78 <transfer_data_old>
		for(uint8_t i =0;i<10;i++){
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	3301      	adds	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b09      	cmp	r3, #9
 8003c78:	d9ef      	bls.n	8003c5a <HAL_UART_RxCpltCallback+0x1a>
		}
	}
}
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000228 	.word	0x20000228
 8003c88:	200000f0 	.word	0x200000f0
 8003c8c:	20000104 	.word	0x20000104

08003c90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_MspInit+0x5c>)
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	4a14      	ldr	r2, [pc, #80]	; (8003cec <HAL_MspInit+0x5c>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	6193      	str	r3, [r2, #24]
 8003ca2:	4b12      	ldr	r3, [pc, #72]	; (8003cec <HAL_MspInit+0x5c>)
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	60bb      	str	r3, [r7, #8]
 8003cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_MspInit+0x5c>)
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <HAL_MspInit+0x5c>)
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	61d3      	str	r3, [r2, #28]
 8003cba:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <HAL_MspInit+0x5c>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <HAL_MspInit+0x60>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <HAL_MspInit+0x60>)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40010000 	.word	0x40010000

08003cf4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a12      	ldr	r2, [pc, #72]	; (8003d4c <HAL_TIM_PWM_MspInit+0x58>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d10c      	bne.n	8003d20 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <HAL_TIM_PWM_MspInit+0x5c>)
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	4a11      	ldr	r2, [pc, #68]	; (8003d50 <HAL_TIM_PWM_MspInit+0x5c>)
 8003d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d10:	6193      	str	r3, [r2, #24]
 8003d12:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <HAL_TIM_PWM_MspInit+0x5c>)
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d1e:	e010      	b.n	8003d42 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d28:	d10b      	bne.n	8003d42 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_TIM_PWM_MspInit+0x5c>)
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <HAL_TIM_PWM_MspInit+0x5c>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	61d3      	str	r3, [r2, #28]
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_TIM_PWM_MspInit+0x5c>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	60bb      	str	r3, [r7, #8]
 8003d40:	68bb      	ldr	r3, [r7, #8]
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40021000 	.word	0x40021000

08003d54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5c:	f107 0318 	add.w	r3, r7, #24
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2a      	ldr	r2, [pc, #168]	; (8003e18 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d124      	bne.n	8003dbe <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d74:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	4a28      	ldr	r2, [pc, #160]	; (8003e1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003d7a:	f043 0302 	orr.w	r3, r3, #2
 8003d7e:	61d3      	str	r3, [r2, #28]
 8003d80:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d8c:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	4a22      	ldr	r2, [pc, #136]	; (8003e1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	6193      	str	r3, [r2, #24]
 8003d98:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = A_Left_Pin|B_Left_Pin;
 8003da4:	23c0      	movs	r3, #192	; 0xc0
 8003da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dac:	2301      	movs	r3, #1
 8003dae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db0:	f107 0318 	add.w	r3, r7, #24
 8003db4:	4619      	mov	r1, r3
 8003db6:	481a      	ldr	r0, [pc, #104]	; (8003e20 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003db8:	f7fd fbca 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003dbc:	e028      	b.n	8003e10 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <HAL_TIM_Encoder_MspInit+0xd0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d123      	bne.n	8003e10 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003dc8:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	4a13      	ldr	r2, [pc, #76]	; (8003e1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003dce:	f043 0304 	orr.w	r3, r3, #4
 8003dd2:	61d3      	str	r3, [r2, #28]
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de0:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	4a0d      	ldr	r2, [pc, #52]	; (8003e1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003de6:	f043 0308 	orr.w	r3, r3, #8
 8003dea:	6193      	str	r3, [r2, #24]
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_Right_Pin|B_Right_Pin;
 8003df8:	23c0      	movs	r3, #192	; 0xc0
 8003dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e00:	2301      	movs	r3, #1
 8003e02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e04:	f107 0318 	add.w	r3, r7, #24
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4807      	ldr	r0, [pc, #28]	; (8003e28 <HAL_TIM_Encoder_MspInit+0xd4>)
 8003e0c:	f7fd fba0 	bl	8001550 <HAL_GPIO_Init>
}
 8003e10:	bf00      	nop
 8003e12:	3728      	adds	r7, #40	; 0x28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40000400 	.word	0x40000400
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40010800 	.word	0x40010800
 8003e24:	40000800 	.word	0x40000800
 8003e28:	40010c00 	.word	0x40010c00

08003e2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 0310 	add.w	r3, r7, #16
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <HAL_TIM_MspPostInit+0x98>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d119      	bne.n	8003e80 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ec8 <HAL_TIM_MspPostInit+0x9c>)
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <HAL_TIM_MspPostInit+0x9c>)
 8003e52:	f043 0304 	orr.w	r3, r3, #4
 8003e56:	6193      	str	r3, [r2, #24]
 8003e58:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <HAL_TIM_MspPostInit+0x9c>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWMOfLeft_Pin;
 8003e64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOfLeft_GPIO_Port, &GPIO_InitStruct);
 8003e72:	f107 0310 	add.w	r3, r7, #16
 8003e76:	4619      	mov	r1, r3
 8003e78:	4814      	ldr	r0, [pc, #80]	; (8003ecc <HAL_TIM_MspPostInit+0xa0>)
 8003e7a:	f7fd fb69 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003e7e:	e01c      	b.n	8003eba <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e88:	d117      	bne.n	8003eba <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <HAL_TIM_MspPostInit+0x9c>)
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	4a0e      	ldr	r2, [pc, #56]	; (8003ec8 <HAL_TIM_MspPostInit+0x9c>)
 8003e90:	f043 0304 	orr.w	r3, r3, #4
 8003e94:	6193      	str	r3, [r2, #24]
 8003e96:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <HAL_TIM_MspPostInit+0x9c>)
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMOfRight_Pin;
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOfRight_GPIO_Port, &GPIO_InitStruct);
 8003eae:	f107 0310 	add.w	r3, r7, #16
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4805      	ldr	r0, [pc, #20]	; (8003ecc <HAL_TIM_MspPostInit+0xa0>)
 8003eb6:	f7fd fb4b 	bl	8001550 <HAL_GPIO_Init>
}
 8003eba:	bf00      	nop
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40010800 	.word	0x40010800

08003ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed8:	f107 0310 	add.w	r3, r7, #16
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a43      	ldr	r2, [pc, #268]	; (8003ff8 <HAL_UART_MspInit+0x128>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d17f      	bne.n	8003ff0 <HAL_UART_MspInit+0x120>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ef0:	4b42      	ldr	r3, [pc, #264]	; (8003ffc <HAL_UART_MspInit+0x12c>)
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	4a41      	ldr	r2, [pc, #260]	; (8003ffc <HAL_UART_MspInit+0x12c>)
 8003ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003efa:	6193      	str	r3, [r2, #24]
 8003efc:	4b3f      	ldr	r3, [pc, #252]	; (8003ffc <HAL_UART_MspInit+0x12c>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f08:	4b3c      	ldr	r3, [pc, #240]	; (8003ffc <HAL_UART_MspInit+0x12c>)
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	4a3b      	ldr	r2, [pc, #236]	; (8003ffc <HAL_UART_MspInit+0x12c>)
 8003f0e:	f043 0304 	orr.w	r3, r3, #4
 8003f12:	6193      	str	r3, [r2, #24]
 8003f14:	4b39      	ldr	r3, [pc, #228]	; (8003ffc <HAL_UART_MspInit+0x12c>)
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f26:	2302      	movs	r3, #2
 8003f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2e:	f107 0310 	add.w	r3, r7, #16
 8003f32:	4619      	mov	r1, r3
 8003f34:	4832      	ldr	r0, [pc, #200]	; (8004000 <HAL_UART_MspInit+0x130>)
 8003f36:	f7fd fb0b 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f48:	f107 0310 	add.w	r3, r7, #16
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	482c      	ldr	r0, [pc, #176]	; (8004000 <HAL_UART_MspInit+0x130>)
 8003f50:	f7fd fafe 	bl	8001550 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003f54:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <HAL_UART_MspInit+0x134>)
 8003f56:	4a2c      	ldr	r2, [pc, #176]	; (8004008 <HAL_UART_MspInit+0x138>)
 8003f58:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f5a:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <HAL_UART_MspInit+0x134>)
 8003f5c:	2210      	movs	r2, #16
 8003f5e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f60:	4b28      	ldr	r3, [pc, #160]	; (8004004 <HAL_UART_MspInit+0x134>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f66:	4b27      	ldr	r3, [pc, #156]	; (8004004 <HAL_UART_MspInit+0x134>)
 8003f68:	2280      	movs	r2, #128	; 0x80
 8003f6a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <HAL_UART_MspInit+0x134>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f72:	4b24      	ldr	r3, [pc, #144]	; (8004004 <HAL_UART_MspInit+0x134>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003f78:	4b22      	ldr	r3, [pc, #136]	; (8004004 <HAL_UART_MspInit+0x134>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003f7e:	4b21      	ldr	r3, [pc, #132]	; (8004004 <HAL_UART_MspInit+0x134>)
 8003f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003f86:	481f      	ldr	r0, [pc, #124]	; (8004004 <HAL_UART_MspInit+0x134>)
 8003f88:	f7fd f8f4 	bl	8001174 <HAL_DMA_Init>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003f92:	f7ff fc6b 	bl	800386c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1a      	ldr	r2, [pc, #104]	; (8004004 <HAL_UART_MspInit+0x134>)
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f9c:	4a19      	ldr	r2, [pc, #100]	; (8004004 <HAL_UART_MspInit+0x134>)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003fa2:	4b1a      	ldr	r3, [pc, #104]	; (800400c <HAL_UART_MspInit+0x13c>)
 8003fa4:	4a1a      	ldr	r2, [pc, #104]	; (8004010 <HAL_UART_MspInit+0x140>)
 8003fa6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fa8:	4b18      	ldr	r3, [pc, #96]	; (800400c <HAL_UART_MspInit+0x13c>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fae:	4b17      	ldr	r3, [pc, #92]	; (800400c <HAL_UART_MspInit+0x13c>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fb4:	4b15      	ldr	r3, [pc, #84]	; (800400c <HAL_UART_MspInit+0x13c>)
 8003fb6:	2280      	movs	r2, #128	; 0x80
 8003fb8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fba:	4b14      	ldr	r3, [pc, #80]	; (800400c <HAL_UART_MspInit+0x13c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fc0:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_UART_MspInit+0x13c>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003fc6:	4b11      	ldr	r3, [pc, #68]	; (800400c <HAL_UART_MspInit+0x13c>)
 8003fc8:	2220      	movs	r2, #32
 8003fca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <HAL_UART_MspInit+0x13c>)
 8003fce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fd2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003fd4:	480d      	ldr	r0, [pc, #52]	; (800400c <HAL_UART_MspInit+0x13c>)
 8003fd6:	f7fd f8cd 	bl	8001174 <HAL_DMA_Init>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8003fe0:	f7ff fc44 	bl	800386c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a09      	ldr	r2, [pc, #36]	; (800400c <HAL_UART_MspInit+0x13c>)
 8003fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8003fea:	4a08      	ldr	r2, [pc, #32]	; (800400c <HAL_UART_MspInit+0x13c>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003ff0:	bf00      	nop
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40013800 	.word	0x40013800
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40010800 	.word	0x40010800
 8004004:	200001a0 	.word	0x200001a0
 8004008:	40020044 	.word	0x40020044
 800400c:	200001e4 	.word	0x200001e4
 8004010:	40020058 	.word	0x40020058

08004014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004024:	e7fe      	b.n	8004024 <HardFault_Handler+0x4>

08004026 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004026:	b480      	push	{r7}
 8004028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800402a:	e7fe      	b.n	800402a <MemManage_Handler+0x4>

0800402c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004030:	e7fe      	b.n	8004030 <BusFault_Handler+0x4>

08004032 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004032:	b480      	push	{r7}
 8004034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004036:	e7fe      	b.n	8004036 <UsageFault_Handler+0x4>

08004038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004048:	bf00      	nop
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint8_t flag =0;
	if(flag >=5 ){
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <SysTick_Handler+0x2c>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b04      	cmp	r3, #4
 8004066:	d905      	bls.n	8004074 <SysTick_Handler+0x18>
		my_one_step();
 8004068:	f7ff fd16 	bl	8003a98 <my_one_step>
		flag =0;
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <SysTick_Handler+0x2c>)
 800406e:	2200      	movs	r2, #0
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e005      	b.n	8004080 <SysTick_Handler+0x24>
	}else{
		flag++;
 8004074:	4b04      	ldr	r3, [pc, #16]	; (8004088 <SysTick_Handler+0x2c>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	3301      	adds	r3, #1
 800407a:	b2da      	uxtb	r2, r3
 800407c:	4b02      	ldr	r3, [pc, #8]	; (8004088 <SysTick_Handler+0x2c>)
 800407e:	701a      	strb	r2, [r3, #0]
	}
//	my_one_step();
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004080:	f7fc ff4e 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000118 	.word	0x20000118

0800408c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004090:	4802      	ldr	r0, [pc, #8]	; (800409c <DMA1_Channel4_IRQHandler+0x10>)
 8004092:	f7fd f929 	bl	80012e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200001a0 	.word	0x200001a0

080040a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80040a4:	4802      	ldr	r0, [pc, #8]	; (80040b0 <DMA1_Channel5_IRQHandler+0x10>)
 80040a6:	f7fd f91f 	bl	80012e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200001e4 	.word	0x200001e4

080040b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80040b8:	4b15      	ldr	r3, [pc, #84]	; (8004110 <SystemInit+0x5c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a14      	ldr	r2, [pc, #80]	; (8004110 <SystemInit+0x5c>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80040c4:	4b12      	ldr	r3, [pc, #72]	; (8004110 <SystemInit+0x5c>)
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	4911      	ldr	r1, [pc, #68]	; (8004110 <SystemInit+0x5c>)
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <SystemInit+0x60>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80040d0:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <SystemInit+0x5c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0e      	ldr	r2, [pc, #56]	; (8004110 <SystemInit+0x5c>)
 80040d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80040da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <SystemInit+0x5c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <SystemInit+0x5c>)
 80040e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80040ec:	4b08      	ldr	r3, [pc, #32]	; (8004110 <SystemInit+0x5c>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a07      	ldr	r2, [pc, #28]	; (8004110 <SystemInit+0x5c>)
 80040f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80040f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <SystemInit+0x5c>)
 80040fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80040fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <SystemInit+0x64>)
 8004102:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004106:	609a      	str	r2, [r3, #8]
#endif 
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	40021000 	.word	0x40021000
 8004114:	f8ff0000 	.word	0xf8ff0000
 8004118:	e000ed00 	.word	0xe000ed00

0800411c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800411c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800411e:	e003      	b.n	8004128 <LoopCopyDataInit>

08004120 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004122:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004124:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004126:	3104      	adds	r1, #4

08004128 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004128:	480a      	ldr	r0, [pc, #40]	; (8004154 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800412c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800412e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004130:	d3f6      	bcc.n	8004120 <CopyDataInit>
  ldr r2, =_sbss
 8004132:	4a0a      	ldr	r2, [pc, #40]	; (800415c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004134:	e002      	b.n	800413c <LoopFillZerobss>

08004136 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004136:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004138:	f842 3b04 	str.w	r3, [r2], #4

0800413c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800413c:	4b08      	ldr	r3, [pc, #32]	; (8004160 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800413e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004140:	d3f9      	bcc.n	8004136 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004142:	f7ff ffb7 	bl	80040b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004146:	f000 f80f 	bl	8004168 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800414a:	f7ff f8fd 	bl	8003348 <main>
  bx lr
 800414e:	4770      	bx	lr
  ldr r3, =_sidata
 8004150:	0800420c 	.word	0x0800420c
  ldr r0, =_sdata
 8004154:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004158:	20000050 	.word	0x20000050
  ldr r2, =_sbss
 800415c:	20000050 	.word	0x20000050
  ldr r3, = _ebss
 8004160:	200002e8 	.word	0x200002e8

08004164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004164:	e7fe      	b.n	8004164 <ADC1_2_IRQHandler>
	...

08004168 <__libc_init_array>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	2500      	movs	r5, #0
 800416c:	4e0c      	ldr	r6, [pc, #48]	; (80041a0 <__libc_init_array+0x38>)
 800416e:	4c0d      	ldr	r4, [pc, #52]	; (80041a4 <__libc_init_array+0x3c>)
 8004170:	1ba4      	subs	r4, r4, r6
 8004172:	10a4      	asrs	r4, r4, #2
 8004174:	42a5      	cmp	r5, r4
 8004176:	d109      	bne.n	800418c <__libc_init_array+0x24>
 8004178:	f000 f822 	bl	80041c0 <_init>
 800417c:	2500      	movs	r5, #0
 800417e:	4e0a      	ldr	r6, [pc, #40]	; (80041a8 <__libc_init_array+0x40>)
 8004180:	4c0a      	ldr	r4, [pc, #40]	; (80041ac <__libc_init_array+0x44>)
 8004182:	1ba4      	subs	r4, r4, r6
 8004184:	10a4      	asrs	r4, r4, #2
 8004186:	42a5      	cmp	r5, r4
 8004188:	d105      	bne.n	8004196 <__libc_init_array+0x2e>
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004190:	4798      	blx	r3
 8004192:	3501      	adds	r5, #1
 8004194:	e7ee      	b.n	8004174 <__libc_init_array+0xc>
 8004196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800419a:	4798      	blx	r3
 800419c:	3501      	adds	r5, #1
 800419e:	e7f2      	b.n	8004186 <__libc_init_array+0x1e>
 80041a0:	08004204 	.word	0x08004204
 80041a4:	08004204 	.word	0x08004204
 80041a8:	08004204 	.word	0x08004204
 80041ac:	08004208 	.word	0x08004208

080041b0 <memset>:
 80041b0:	4603      	mov	r3, r0
 80041b2:	4402      	add	r2, r0
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d100      	bne.n	80041ba <memset+0xa>
 80041b8:	4770      	bx	lr
 80041ba:	f803 1b01 	strb.w	r1, [r3], #1
 80041be:	e7f9      	b.n	80041b4 <memset+0x4>

080041c0 <_init>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	bf00      	nop
 80041c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c6:	bc08      	pop	{r3}
 80041c8:	469e      	mov	lr, r3
 80041ca:	4770      	bx	lr

080041cc <_fini>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	bf00      	nop
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr
