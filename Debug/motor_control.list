
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c18  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005d28  08005d28  00015d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f30  08005f30  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08005f30  08005f30  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f30  08005f30  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f34  08005f34  00015f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08005f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000050  08005f88  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005f88  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0b7  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e71  00000000  00000000  0002c130  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c58  00000000  00000000  0002dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  0002ec00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014bd0  00000000  00000000  0002f760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009383  00000000  00000000  00044330  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000727bf  00000000  00000000  0004d6b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bfe72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000377c  00000000  00000000  000bfef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000050 	.word	0x20000050
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d10 	.word	0x08005d10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000054 	.word	0x20000054
 800014c:	08005d10 	.word	0x08005d10

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	d1ed      	bne.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_f2iz>:
 8000fa8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fb0:	d30f      	bcc.n	8000fd2 <__aeabi_f2iz+0x2a>
 8000fb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fba:	d90d      	bls.n	8000fd8 <__aeabi_f2iz+0x30>
 8000fbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fcc:	bf18      	it	ne
 8000fce:	4240      	negne	r0, r0
 8000fd0:	4770      	bx	lr
 8000fd2:	f04f 0000 	mov.w	r0, #0
 8000fd6:	4770      	bx	lr
 8000fd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fdc:	d101      	bne.n	8000fe2 <__aeabi_f2iz+0x3a>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	d105      	bne.n	8000fee <__aeabi_f2iz+0x46>
 8000fe2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fe6:	bf08      	it	eq
 8000fe8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_Init+0x28>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_Init+0x28>)
 8000ffe:	f043 0310 	orr.w	r3, r3, #16
 8001002:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f945 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f808 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001010:	f003 fbb0 	bl	8004774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40022000 	.word	0x40022000

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x54>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x58>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f95d 	bl	80012fe <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e00e      	b.n	800106c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d80a      	bhi.n	800106a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f000 f925 	bl	80012aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <HAL_InitTick+0x5c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2000004c 	.word	0x2000004c
 8001078:	20000004 	.word	0x20000004
 800107c:	20000000 	.word	0x20000000

08001080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_IncTick+0x1c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x20>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x20>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	20000004 	.word	0x20000004
 80010a0:	20000120 	.word	0x20000120

080010a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b02      	ldr	r3, [pc, #8]	; (80010b4 <HAL_GetTick+0x10>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	20000120 	.word	0x20000120

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff fff0 	bl	80010a4 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_Delay+0x40>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffe0 	bl	80010a4 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000004 	.word	0x20000004

080010fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001118:	4013      	ands	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <__NVIC_GetPriorityGrouping+0x18>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	f003 0307 	and.w	r3, r3, #7
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db0b      	blt.n	800118a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f003 021f 	and.w	r2, r3, #31
 8001178:	4906      	ldr	r1, [pc, #24]	; (8001194 <__NVIC_EnableIRQ+0x34>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	095b      	lsrs	r3, r3, #5
 8001180:	2001      	movs	r0, #1
 8001182:	fa00 f202 	lsl.w	r2, r0, r2
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f7ff ff90 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff2d 	bl	80010fc <__NVIC_SetPriorityGrouping>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff42 	bl	8001144 <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff90 	bl	80011ec <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5f 	bl	8001198 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff35 	bl	8001160 <__NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffa2 	bl	8001250 <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e043      	b.n	80013b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <HAL_DMA_Init+0xa8>)
 8001336:	4413      	add	r3, r2
 8001338:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <HAL_DMA_Init+0xac>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	009a      	lsls	r2, r3, #2
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <HAL_DMA_Init+0xb0>)
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2202      	movs	r2, #2
 8001350:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001362:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001366:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001370:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	bffdfff8 	.word	0xbffdfff8
 80013c4:	cccccccd 	.word	0xcccccccd
 80013c8:	40020000 	.word	0x40020000

080013cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_DMA_Start_IT+0x20>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e04a      	b.n	8001482 <HAL_DMA_Start_IT+0xb6>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d13a      	bne.n	8001474 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2202      	movs	r2, #2
 8001402:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f000 f9ae 	bl	8001784 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 020e 	orr.w	r2, r2, #14
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	e00f      	b.n	8001462 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0204 	bic.w	r2, r2, #4
 8001450:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 020a 	orr.w	r2, r2, #10
 8001460:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 0201 	orr.w	r2, r2, #1
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e005      	b.n	8001480 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800147c:	2302      	movs	r3, #2
 800147e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001480:	7dfb      	ldrb	r3, [r7, #23]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d005      	beq.n	80014ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2204      	movs	r2, #4
 80014a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e051      	b.n	8001552 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 020e 	bic.w	r2, r2, #14
 80014bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0201 	bic.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a22      	ldr	r2, [pc, #136]	; (800155c <HAL_DMA_Abort_IT+0xd0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d029      	beq.n	800152c <HAL_DMA_Abort_IT+0xa0>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a20      	ldr	r2, [pc, #128]	; (8001560 <HAL_DMA_Abort_IT+0xd4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d022      	beq.n	8001528 <HAL_DMA_Abort_IT+0x9c>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <HAL_DMA_Abort_IT+0xd8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d01a      	beq.n	8001522 <HAL_DMA_Abort_IT+0x96>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <HAL_DMA_Abort_IT+0xdc>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d012      	beq.n	800151c <HAL_DMA_Abort_IT+0x90>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <HAL_DMA_Abort_IT+0xe0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d00a      	beq.n	8001516 <HAL_DMA_Abort_IT+0x8a>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a1a      	ldr	r2, [pc, #104]	; (8001570 <HAL_DMA_Abort_IT+0xe4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d102      	bne.n	8001510 <HAL_DMA_Abort_IT+0x84>
 800150a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800150e:	e00e      	b.n	800152e <HAL_DMA_Abort_IT+0xa2>
 8001510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001514:	e00b      	b.n	800152e <HAL_DMA_Abort_IT+0xa2>
 8001516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151a:	e008      	b.n	800152e <HAL_DMA_Abort_IT+0xa2>
 800151c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001520:	e005      	b.n	800152e <HAL_DMA_Abort_IT+0xa2>
 8001522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001526:	e002      	b.n	800152e <HAL_DMA_Abort_IT+0xa2>
 8001528:	2310      	movs	r3, #16
 800152a:	e000      	b.n	800152e <HAL_DMA_Abort_IT+0xa2>
 800152c:	2301      	movs	r3, #1
 800152e:	4a11      	ldr	r2, [pc, #68]	; (8001574 <HAL_DMA_Abort_IT+0xe8>)
 8001530:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	4798      	blx	r3
    } 
  }
  return status;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40020008 	.word	0x40020008
 8001560:	4002001c 	.word	0x4002001c
 8001564:	40020030 	.word	0x40020030
 8001568:	40020044 	.word	0x40020044
 800156c:	40020058 	.word	0x40020058
 8001570:	4002006c 	.word	0x4002006c
 8001574:	40020000 	.word	0x40020000

08001578 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	2204      	movs	r2, #4
 8001596:	409a      	lsls	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4013      	ands	r3, r2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d04f      	beq.n	8001640 <HAL_DMA_IRQHandler+0xc8>
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d04a      	beq.n	8001640 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0320 	and.w	r3, r3, #32
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d107      	bne.n	80015c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0204 	bic.w	r2, r2, #4
 80015c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a66      	ldr	r2, [pc, #408]	; (8001768 <HAL_DMA_IRQHandler+0x1f0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d029      	beq.n	8001626 <HAL_DMA_IRQHandler+0xae>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a65      	ldr	r2, [pc, #404]	; (800176c <HAL_DMA_IRQHandler+0x1f4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d022      	beq.n	8001622 <HAL_DMA_IRQHandler+0xaa>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a63      	ldr	r2, [pc, #396]	; (8001770 <HAL_DMA_IRQHandler+0x1f8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d01a      	beq.n	800161c <HAL_DMA_IRQHandler+0xa4>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a62      	ldr	r2, [pc, #392]	; (8001774 <HAL_DMA_IRQHandler+0x1fc>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d012      	beq.n	8001616 <HAL_DMA_IRQHandler+0x9e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a60      	ldr	r2, [pc, #384]	; (8001778 <HAL_DMA_IRQHandler+0x200>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00a      	beq.n	8001610 <HAL_DMA_IRQHandler+0x98>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a5f      	ldr	r2, [pc, #380]	; (800177c <HAL_DMA_IRQHandler+0x204>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d102      	bne.n	800160a <HAL_DMA_IRQHandler+0x92>
 8001604:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001608:	e00e      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 800160a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800160e:	e00b      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 8001610:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001614:	e008      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 8001616:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800161a:	e005      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 800161c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001620:	e002      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 8001622:	2340      	movs	r3, #64	; 0x40
 8001624:	e000      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 8001626:	2304      	movs	r3, #4
 8001628:	4a55      	ldr	r2, [pc, #340]	; (8001780 <HAL_DMA_IRQHandler+0x208>)
 800162a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 8094 	beq.w	800175e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800163e:	e08e      	b.n	800175e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	2202      	movs	r2, #2
 8001646:	409a      	lsls	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d056      	beq.n	80016fe <HAL_DMA_IRQHandler+0x186>
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d051      	beq.n	80016fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0320 	and.w	r3, r3, #32
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10b      	bne.n	8001680 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 020a 	bic.w	r2, r2, #10
 8001676:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a38      	ldr	r2, [pc, #224]	; (8001768 <HAL_DMA_IRQHandler+0x1f0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d029      	beq.n	80016de <HAL_DMA_IRQHandler+0x166>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a37      	ldr	r2, [pc, #220]	; (800176c <HAL_DMA_IRQHandler+0x1f4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d022      	beq.n	80016da <HAL_DMA_IRQHandler+0x162>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a35      	ldr	r2, [pc, #212]	; (8001770 <HAL_DMA_IRQHandler+0x1f8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d01a      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x15c>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a34      	ldr	r2, [pc, #208]	; (8001774 <HAL_DMA_IRQHandler+0x1fc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d012      	beq.n	80016ce <HAL_DMA_IRQHandler+0x156>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a32      	ldr	r2, [pc, #200]	; (8001778 <HAL_DMA_IRQHandler+0x200>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d00a      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x150>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a31      	ldr	r2, [pc, #196]	; (800177c <HAL_DMA_IRQHandler+0x204>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d102      	bne.n	80016c2 <HAL_DMA_IRQHandler+0x14a>
 80016bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016c0:	e00e      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016c6:	e00b      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016cc:	e008      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d2:	e005      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d8:	e002      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016da:	2320      	movs	r3, #32
 80016dc:	e000      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016de:	2302      	movs	r3, #2
 80016e0:	4a27      	ldr	r2, [pc, #156]	; (8001780 <HAL_DMA_IRQHandler+0x208>)
 80016e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d034      	beq.n	800175e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016fc:	e02f      	b.n	800175e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	2208      	movs	r2, #8
 8001704:	409a      	lsls	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d028      	beq.n	8001760 <HAL_DMA_IRQHandler+0x1e8>
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d023      	beq.n	8001760 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 020e 	bic.w	r2, r2, #14
 8001726:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001730:	2101      	movs	r1, #1
 8001732:	fa01 f202 	lsl.w	r2, r1, r2
 8001736:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	2b00      	cmp	r3, #0
 8001754:	d004      	beq.n	8001760 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
    }
  }
  return;
 800175e:	bf00      	nop
 8001760:	bf00      	nop
}
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40020008 	.word	0x40020008
 800176c:	4002001c 	.word	0x4002001c
 8001770:	40020030 	.word	0x40020030
 8001774:	40020044 	.word	0x40020044
 8001778:	40020058 	.word	0x40020058
 800177c:	4002006c 	.word	0x4002006c
 8001780:	40020000 	.word	0x40020000

08001784 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b10      	cmp	r3, #16
 80017b0:	d108      	bne.n	80017c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017c2:	e007      	b.n	80017d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	60da      	str	r2, [r3, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b08b      	sub	sp, #44	; 0x2c
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f2:	e127      	b.n	8001a44 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f4:	2201      	movs	r2, #1
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 8116 	bne.w	8001a3e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b12      	cmp	r3, #18
 8001818:	d034      	beq.n	8001884 <HAL_GPIO_Init+0xa4>
 800181a:	2b12      	cmp	r3, #18
 800181c:	d80d      	bhi.n	800183a <HAL_GPIO_Init+0x5a>
 800181e:	2b02      	cmp	r3, #2
 8001820:	d02b      	beq.n	800187a <HAL_GPIO_Init+0x9a>
 8001822:	2b02      	cmp	r3, #2
 8001824:	d804      	bhi.n	8001830 <HAL_GPIO_Init+0x50>
 8001826:	2b00      	cmp	r3, #0
 8001828:	d031      	beq.n	800188e <HAL_GPIO_Init+0xae>
 800182a:	2b01      	cmp	r3, #1
 800182c:	d01c      	beq.n	8001868 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800182e:	e048      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001830:	2b03      	cmp	r3, #3
 8001832:	d043      	beq.n	80018bc <HAL_GPIO_Init+0xdc>
 8001834:	2b11      	cmp	r3, #17
 8001836:	d01b      	beq.n	8001870 <HAL_GPIO_Init+0x90>
          break;
 8001838:	e043      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800183a:	4a89      	ldr	r2, [pc, #548]	; (8001a60 <HAL_GPIO_Init+0x280>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d026      	beq.n	800188e <HAL_GPIO_Init+0xae>
 8001840:	4a87      	ldr	r2, [pc, #540]	; (8001a60 <HAL_GPIO_Init+0x280>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d806      	bhi.n	8001854 <HAL_GPIO_Init+0x74>
 8001846:	4a87      	ldr	r2, [pc, #540]	; (8001a64 <HAL_GPIO_Init+0x284>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d020      	beq.n	800188e <HAL_GPIO_Init+0xae>
 800184c:	4a86      	ldr	r2, [pc, #536]	; (8001a68 <HAL_GPIO_Init+0x288>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d01d      	beq.n	800188e <HAL_GPIO_Init+0xae>
          break;
 8001852:	e036      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001854:	4a85      	ldr	r2, [pc, #532]	; (8001a6c <HAL_GPIO_Init+0x28c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d019      	beq.n	800188e <HAL_GPIO_Init+0xae>
 800185a:	4a85      	ldr	r2, [pc, #532]	; (8001a70 <HAL_GPIO_Init+0x290>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d016      	beq.n	800188e <HAL_GPIO_Init+0xae>
 8001860:	4a84      	ldr	r2, [pc, #528]	; (8001a74 <HAL_GPIO_Init+0x294>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <HAL_GPIO_Init+0xae>
          break;
 8001866:	e02c      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	623b      	str	r3, [r7, #32]
          break;
 800186e:	e028      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	3304      	adds	r3, #4
 8001876:	623b      	str	r3, [r7, #32]
          break;
 8001878:	e023      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	3308      	adds	r3, #8
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e01e      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	330c      	adds	r3, #12
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	e019      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001896:	2304      	movs	r3, #4
 8001898:	623b      	str	r3, [r7, #32]
          break;
 800189a:	e012      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a4:	2308      	movs	r3, #8
 80018a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	611a      	str	r2, [r3, #16]
          break;
 80018ae:	e008      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b0:	2308      	movs	r3, #8
 80018b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	615a      	str	r2, [r3, #20]
          break;
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
          break;
 80018c0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2bff      	cmp	r3, #255	; 0xff
 80018c6:	d801      	bhi.n	80018cc <HAL_GPIO_Init+0xec>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	e001      	b.n	80018d0 <HAL_GPIO_Init+0xf0>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3304      	adds	r3, #4
 80018d0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2bff      	cmp	r3, #255	; 0xff
 80018d6:	d802      	bhi.n	80018de <HAL_GPIO_Init+0xfe>
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_Init+0x104>
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	3b08      	subs	r3, #8
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	210f      	movs	r1, #15
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	401a      	ands	r2, r3
 80018f6:	6a39      	ldr	r1, [r7, #32]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	431a      	orrs	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8096 	beq.w	8001a3e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001912:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <HAL_GPIO_Init+0x298>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	4a58      	ldr	r2, [pc, #352]	; (8001a78 <HAL_GPIO_Init+0x298>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6193      	str	r3, [r2, #24]
 800191e:	4b56      	ldr	r3, [pc, #344]	; (8001a78 <HAL_GPIO_Init+0x298>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800192a:	4a54      	ldr	r2, [pc, #336]	; (8001a7c <HAL_GPIO_Init+0x29c>)
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4013      	ands	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4b      	ldr	r2, [pc, #300]	; (8001a80 <HAL_GPIO_Init+0x2a0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_GPIO_Init+0x19e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4a      	ldr	r2, [pc, #296]	; (8001a84 <HAL_GPIO_Init+0x2a4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d00d      	beq.n	800197a <HAL_GPIO_Init+0x19a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a49      	ldr	r2, [pc, #292]	; (8001a88 <HAL_GPIO_Init+0x2a8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d007      	beq.n	8001976 <HAL_GPIO_Init+0x196>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a48      	ldr	r2, [pc, #288]	; (8001a8c <HAL_GPIO_Init+0x2ac>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_GPIO_Init+0x192>
 800196e:	2303      	movs	r3, #3
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x1a0>
 8001972:	2304      	movs	r3, #4
 8001974:	e004      	b.n	8001980 <HAL_GPIO_Init+0x1a0>
 8001976:	2302      	movs	r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x1a0>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x1a0>
 800197e:	2300      	movs	r3, #0
 8001980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001982:	f002 0203 	and.w	r2, r2, #3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4093      	lsls	r3, r2
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001990:	493a      	ldr	r1, [pc, #232]	; (8001a7c <HAL_GPIO_Init+0x29c>)
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4938      	ldr	r1, [pc, #224]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
 80019b6:	e006      	b.n	80019c6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b8:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	43db      	mvns	r3, r3
 80019c0:	4933      	ldr	r1, [pc, #204]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d006      	beq.n	80019e0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d2:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	492e      	ldr	r1, [pc, #184]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]
 80019de:	e006      	b.n	80019ee <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	4929      	ldr	r1, [pc, #164]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019fa:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	4924      	ldr	r1, [pc, #144]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	608b      	str	r3, [r1, #8]
 8001a06:	e006      	b.n	8001a16 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	491f      	ldr	r1, [pc, #124]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	491a      	ldr	r1, [pc, #104]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60cb      	str	r3, [r1, #12]
 8001a2e:	e006      	b.n	8001a3e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	4915      	ldr	r1, [pc, #84]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	3301      	adds	r3, #1
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f47f aed0 	bne.w	80017f4 <HAL_GPIO_Init+0x14>
  }
}
 8001a54:	bf00      	nop
 8001a56:	372c      	adds	r7, #44	; 0x2c
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	10210000 	.word	0x10210000
 8001a64:	10110000 	.word	0x10110000
 8001a68:	10120000 	.word	0x10120000
 8001a6c:	10310000 	.word	0x10310000
 8001a70:	10320000 	.word	0x10320000
 8001a74:	10220000 	.word	0x10220000
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40010800 	.word	0x40010800
 8001a84:	40010c00 	.word	0x40010c00
 8001a88:	40011000 	.word	0x40011000
 8001a8c:	40011400 	.word	0x40011400
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa4:	787b      	ldrb	r3, [r7, #1]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ab0:	e003      	b.n	8001aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	041a      	lsls	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e26c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8087 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae4:	4b92      	ldr	r3, [pc, #584]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d00c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af0:	4b8f      	ldr	r3, [pc, #572]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d112      	bne.n	8001b22 <HAL_RCC_OscConfig+0x5e>
 8001afc:	4b8c      	ldr	r3, [pc, #560]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b08:	d10b      	bne.n	8001b22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	4b89      	ldr	r3, [pc, #548]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d06c      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x12c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d168      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e246      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x76>
 8001b2c:	4b80      	ldr	r3, [pc, #512]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a7f      	ldr	r2, [pc, #508]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	e02e      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x98>
 8001b42:	4b7b      	ldr	r3, [pc, #492]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a7a      	ldr	r2, [pc, #488]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b78      	ldr	r3, [pc, #480]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a77      	ldr	r2, [pc, #476]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e01d      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0xbc>
 8001b66:	4b72      	ldr	r3, [pc, #456]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a71      	ldr	r2, [pc, #452]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b6f      	ldr	r3, [pc, #444]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a6e      	ldr	r2, [pc, #440]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e00b      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b80:	4b6b      	ldr	r3, [pc, #428]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a6a      	ldr	r2, [pc, #424]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a67      	ldr	r2, [pc, #412]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d013      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fa80 	bl	80010a4 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fa7c 	bl	80010a4 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e1fa      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	4b5d      	ldr	r3, [pc, #372]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0xe4>
 8001bc6:	e014      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fa6c 	bl	80010a4 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fa68 	bl	80010a4 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1e6      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x10c>
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d063      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bfe:	4b4c      	ldr	r3, [pc, #304]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c0a:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d11c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x18c>
 8001c16:	4b46      	ldr	r3, [pc, #280]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_RCC_OscConfig+0x176>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e1ba      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3a:	4b3d      	ldr	r3, [pc, #244]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4939      	ldr	r1, [pc, #228]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	e03a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d020      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c58:	4b36      	ldr	r3, [pc, #216]	; (8001d34 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fa21 	bl	80010a4 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c66:	f7ff fa1d 	bl	80010a4 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e19b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4927      	ldr	r1, [pc, #156]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
 8001c98:	e015      	b.n	8001cc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9a:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fa00 	bl	80010a4 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca8:	f7ff f9fc 	bl	80010a4 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e17a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d03a      	beq.n	8001d48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d019      	beq.n	8001d0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce0:	f7ff f9e0 	bl	80010a4 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7ff f9dc 	bl	80010a4 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e15a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f000 fada 	bl	80022c0 <RCC_Delay>
 8001d0c:	e01c      	b.n	8001d48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_RCC_OscConfig+0x274>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d14:	f7ff f9c6 	bl	80010a4 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1a:	e00f      	b.n	8001d3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7ff f9c2 	bl	80010a4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d908      	bls.n	8001d3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e140      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	42420000 	.word	0x42420000
 8001d38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	4b9e      	ldr	r3, [pc, #632]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e9      	bne.n	8001d1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80a6 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5a:	4b97      	ldr	r3, [pc, #604]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10d      	bne.n	8001d82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b94      	ldr	r3, [pc, #592]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a93      	ldr	r2, [pc, #588]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	61d3      	str	r3, [r2, #28]
 8001d72:	4b91      	ldr	r3, [pc, #580]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b8e      	ldr	r3, [pc, #568]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d118      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	4b8b      	ldr	r3, [pc, #556]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a8a      	ldr	r2, [pc, #552]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff f983 	bl	80010a4 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7ff f97f 	bl	80010a4 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b64      	cmp	r3, #100	; 0x64
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0fd      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x312>
 8001dc8:	4b7b      	ldr	r3, [pc, #492]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4a7a      	ldr	r2, [pc, #488]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6213      	str	r3, [r2, #32]
 8001dd4:	e02d      	b.n	8001e32 <HAL_RCC_OscConfig+0x36e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x334>
 8001dde:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a75      	ldr	r2, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a72      	ldr	r2, [pc, #456]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	6213      	str	r3, [r2, #32]
 8001df6:	e01c      	b.n	8001e32 <HAL_RCC_OscConfig+0x36e>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d10c      	bne.n	8001e1a <HAL_RCC_OscConfig+0x356>
 8001e00:	4b6d      	ldr	r3, [pc, #436]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4a6c      	ldr	r2, [pc, #432]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6213      	str	r3, [r2, #32]
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a69      	ldr	r2, [pc, #420]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6213      	str	r3, [r2, #32]
 8001e18:	e00b      	b.n	8001e32 <HAL_RCC_OscConfig+0x36e>
 8001e1a:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a66      	ldr	r2, [pc, #408]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	4b64      	ldr	r3, [pc, #400]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a63      	ldr	r2, [pc, #396]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d015      	beq.n	8001e66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff f933 	bl	80010a4 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7ff f92f 	bl	80010a4 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0ab      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	4b57      	ldr	r3, [pc, #348]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0ee      	beq.n	8001e42 <HAL_RCC_OscConfig+0x37e>
 8001e64:	e014      	b.n	8001e90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7ff f91d 	bl	80010a4 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7ff f919 	bl	80010a4 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e095      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e84:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1ee      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d105      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e96:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a47      	ldr	r2, [pc, #284]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8081 	beq.w	8001fae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eac:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d061      	beq.n	8001f7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d146      	bne.n	8001f4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec0:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_RCC_OscConfig+0x4fc>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7ff f8ed 	bl	80010a4 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7ff f8e9 	bl	80010a4 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e067      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee0:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef4:	d108      	bne.n	8001f08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ef6:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	492d      	ldr	r1, [pc, #180]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a19      	ldr	r1, [r3, #32]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	4927      	ldr	r1, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0x4fc>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff f8bd 	bl	80010a4 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7ff f8b9 	bl	80010a4 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e037      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x46a>
 8001f4c:	e02f      	b.n	8001fae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <HAL_RCC_OscConfig+0x4fc>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff f8a6 	bl	80010a4 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff f8a2 	bl	80010a4 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e020      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x498>
 8001f7a:	e018      	b.n	8001fae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e013      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	42420060 	.word	0x42420060

08001fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0d0      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d910      	bls.n	8002008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b67      	ldr	r3, [pc, #412]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	4965      	ldr	r1, [pc, #404]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b63      	ldr	r3, [pc, #396]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0b8      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002020:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800202a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002038:	4b53      	ldr	r3, [pc, #332]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a52      	ldr	r2, [pc, #328]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002042:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002044:	4b50      	ldr	r3, [pc, #320]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	494d      	ldr	r1, [pc, #308]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d040      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d115      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e07f      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e073      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e06b      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a2:	4b39      	ldr	r3, [pc, #228]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f023 0203 	bic.w	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4936      	ldr	r1, [pc, #216]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b4:	f7fe fff6 	bl	80010a4 <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020bc:	f7fe fff2 	bl	80010a4 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e053      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 020c 	and.w	r2, r3, #12
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d1eb      	bne.n	80020bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d210      	bcs.n	8002114 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 0207 	bic.w	r2, r3, #7
 80020fa:	4922      	ldr	r1, [pc, #136]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e032      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4916      	ldr	r1, [pc, #88]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	490e      	ldr	r1, [pc, #56]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002152:	f000 f821 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8002156:	4601      	mov	r1, r0
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_RCC_ClockConfig+0x1c8>)
 8002164:	5cd3      	ldrb	r3, [r2, r3]
 8002166:	fa21 f303 	lsr.w	r3, r1, r3
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <HAL_RCC_ClockConfig+0x1cc>)
 800216c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1d0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe ff54 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40022000 	.word	0x40022000
 8002188:	40021000 	.word	0x40021000
 800218c:	08005d3c 	.word	0x08005d3c
 8002190:	2000004c 	.word	0x2000004c
 8002194:	20000000 	.word	0x20000000

08002198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002198:	b490      	push	{r4, r7}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021a0:	1d3c      	adds	r4, r7, #4
 80021a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d002      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x40>
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d003      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x46>
 80021d6:	e02d      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021da:	623b      	str	r3, [r7, #32]
      break;
 80021dc:	e02d      	b.n	800223a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	0c9b      	lsrs	r3, r3, #18
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ea:	4413      	add	r3, r2
 80021ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	0c5b      	lsrs	r3, r3, #17
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800220a:	4413      	add	r3, r2
 800220c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002210:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	4a0f      	ldr	r2, [pc, #60]	; (8002254 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002216:	fb02 f203 	mul.w	r2, r2, r3
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
 8002222:	e004      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	623b      	str	r3, [r7, #32]
      break;
 8002232:	e002      	b.n	800223a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002236:	623b      	str	r3, [r7, #32]
      break;
 8002238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223a:	6a3b      	ldr	r3, [r7, #32]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bc90      	pop	{r4, r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	08005d28 	.word	0x08005d28
 800224c:	08005d38 	.word	0x08005d38
 8002250:	40021000 	.word	0x40021000
 8002254:	007a1200 	.word	0x007a1200
 8002258:	003d0900 	.word	0x003d0900

0800225c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b02      	ldr	r3, [pc, #8]	; (800226c <HAL_RCC_GetHCLKFreq+0x10>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	2000004c 	.word	0x2000004c

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002274:	f7ff fff2 	bl	800225c <HAL_RCC_GetHCLKFreq>
 8002278:	4601      	mov	r1, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4a03      	ldr	r2, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	fa21 f303 	lsr.w	r3, r1, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	08005d4c 	.word	0x08005d4c

08002298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800229c:	f7ff ffde 	bl	800225c <HAL_RCC_GetHCLKFreq>
 80022a0:	4601      	mov	r1, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	0adb      	lsrs	r3, r3, #11
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4a03      	ldr	r2, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	08005d4c 	.word	0x08005d4c

080022c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <RCC_Delay+0x34>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <RCC_Delay+0x38>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0a5b      	lsrs	r3, r3, #9
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022dc:	bf00      	nop
  }
  while (Delay --);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e5a      	subs	r2, r3, #1
 80022e2:	60fa      	str	r2, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f9      	bne.n	80022dc <RCC_Delay+0x1c>
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	2000004c 	.word	0x2000004c
 80022f8:	10624dd3 	.word	0x10624dd3

080022fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e01d      	b.n	800234a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f002 fa58 	bl	80047d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f000 f9c8 	bl	80026d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2201      	movs	r2, #1
 8002364:	6839      	ldr	r1, [r7, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fb9c 	bl	8002aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <HAL_TIM_PWM_Start+0x60>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d107      	bne.n	8002386 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b06      	cmp	r3, #6
 8002396:	d007      	beq.n	80023a8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40012c00 	.word	0x40012c00

080023b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e07f      	b.n	80024cc <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d106      	bne.n	80023e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f002 fa29 	bl	8004838 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2202      	movs	r2, #2
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023fc:	f023 0307 	bic.w	r3, r3, #7
 8002400:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3304      	adds	r3, #4
 800240a:	4619      	mov	r1, r3
 800240c:	4610      	mov	r0, r2
 800240e:	f000 f95f 	bl	80026d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243a:	f023 0303 	bic.w	r3, r3, #3
 800243e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	4313      	orrs	r3, r2
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002458:	f023 030c 	bic.w	r3, r3, #12
 800245c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002464:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	4313      	orrs	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	011a      	lsls	r2, r3, #4
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	031b      	lsls	r3, r3, #12
 8002488:	4313      	orrs	r3, r2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002496:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	4313      	orrs	r3, r2
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_TIM_Encoder_Start+0x16>
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d008      	beq.n	80024fa <HAL_TIM_Encoder_Start+0x26>
 80024e8:	e00f      	b.n	800250a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2201      	movs	r2, #1
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fad6 	bl	8002aa4 <TIM_CCxChannelCmd>
      break;
 80024f8:	e016      	b.n	8002528 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2201      	movs	r2, #1
 8002500:	2104      	movs	r1, #4
 8002502:	4618      	mov	r0, r3
 8002504:	f000 face 	bl	8002aa4 <TIM_CCxChannelCmd>
      break;
 8002508:	e00e      	b.n	8002528 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2201      	movs	r2, #1
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f000 fac6 	bl	8002aa4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2201      	movs	r2, #1
 800251e:	2104      	movs	r1, #4
 8002520:	4618      	mov	r0, r3
 8002522:	f000 fabf 	bl	8002aa4 <TIM_CCxChannelCmd>
      break;
 8002526:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800255a:	2302      	movs	r3, #2
 800255c:	e0b4      	b.n	80026c8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2202      	movs	r2, #2
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b0c      	cmp	r3, #12
 8002572:	f200 809f 	bhi.w	80026b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002576:	a201      	add	r2, pc, #4	; (adr r2, 800257c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257c:	080025b1 	.word	0x080025b1
 8002580:	080026b5 	.word	0x080026b5
 8002584:	080026b5 	.word	0x080026b5
 8002588:	080026b5 	.word	0x080026b5
 800258c:	080025f1 	.word	0x080025f1
 8002590:	080026b5 	.word	0x080026b5
 8002594:	080026b5 	.word	0x080026b5
 8002598:	080026b5 	.word	0x080026b5
 800259c:	08002633 	.word	0x08002633
 80025a0:	080026b5 	.word	0x080026b5
 80025a4:	080026b5 	.word	0x080026b5
 80025a8:	080026b5 	.word	0x080026b5
 80025ac:	08002673 	.word	0x08002673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f8ec 	bl	8002794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0208 	orr.w	r2, r2, #8
 80025ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0204 	bic.w	r2, r2, #4
 80025da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6999      	ldr	r1, [r3, #24]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	619a      	str	r2, [r3, #24]
      break;
 80025ee:	e062      	b.n	80026b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f932 	bl	8002860 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800260a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6999      	ldr	r1, [r3, #24]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	021a      	lsls	r2, r3, #8
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	619a      	str	r2, [r3, #24]
      break;
 8002630:	e041      	b.n	80026b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f97b 	bl	8002934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69da      	ldr	r2, [r3, #28]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0208 	orr.w	r2, r2, #8
 800264c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0204 	bic.w	r2, r2, #4
 800265c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69d9      	ldr	r1, [r3, #28]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	61da      	str	r2, [r3, #28]
      break;
 8002670:	e021      	b.n	80026b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f9c5 	bl	8002a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69da      	ldr	r2, [r3, #28]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69d9      	ldr	r1, [r3, #28]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	021a      	lsls	r2, r3, #8
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	61da      	str	r2, [r3, #28]
      break;
 80026b2:	e000      	b.n	80026b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80026b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a29      	ldr	r2, [pc, #164]	; (8002788 <TIM_Base_SetConfig+0xb8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00b      	beq.n	8002700 <TIM_Base_SetConfig+0x30>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ee:	d007      	beq.n	8002700 <TIM_Base_SetConfig+0x30>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a26      	ldr	r2, [pc, #152]	; (800278c <TIM_Base_SetConfig+0xbc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d003      	beq.n	8002700 <TIM_Base_SetConfig+0x30>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a25      	ldr	r2, [pc, #148]	; (8002790 <TIM_Base_SetConfig+0xc0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d108      	bne.n	8002712 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <TIM_Base_SetConfig+0xb8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00b      	beq.n	8002732 <TIM_Base_SetConfig+0x62>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002720:	d007      	beq.n	8002732 <TIM_Base_SetConfig+0x62>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <TIM_Base_SetConfig+0xbc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d003      	beq.n	8002732 <TIM_Base_SetConfig+0x62>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a18      	ldr	r2, [pc, #96]	; (8002790 <TIM_Base_SetConfig+0xc0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d108      	bne.n	8002744 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a07      	ldr	r2, [pc, #28]	; (8002788 <TIM_Base_SetConfig+0xb8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d103      	bne.n	8002778 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	615a      	str	r2, [r3, #20]
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40000400 	.word	0x40000400
 8002790:	40000800 	.word	0x40000800

08002794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f023 0201 	bic.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 0303 	bic.w	r3, r3, #3
 80027ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f023 0302 	bic.w	r3, r3, #2
 80027dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a1c      	ldr	r2, [pc, #112]	; (800285c <TIM_OC1_SetConfig+0xc8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d10c      	bne.n	800280a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f023 0308 	bic.w	r3, r3, #8
 80027f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a13      	ldr	r2, [pc, #76]	; (800285c <TIM_OC1_SetConfig+0xc8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d111      	bne.n	8002836 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	621a      	str	r2, [r3, #32]
}
 8002850:	bf00      	nop
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40012c00 	.word	0x40012c00

08002860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0210 	bic.w	r2, r3, #16
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800288e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f023 0320 	bic.w	r3, r3, #32
 80028aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <TIM_OC2_SetConfig+0xd0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d10d      	bne.n	80028dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a14      	ldr	r2, [pc, #80]	; (8002930 <TIM_OC2_SetConfig+0xd0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d113      	bne.n	800290c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	621a      	str	r2, [r3, #32]
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	40012c00 	.word	0x40012c00

08002934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0303 	bic.w	r3, r3, #3
 800296a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800297c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	021b      	lsls	r3, r3, #8
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <TIM_OC3_SetConfig+0xd0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10d      	bne.n	80029ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <TIM_OC3_SetConfig+0xd0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d113      	bne.n	80029de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	621a      	str	r2, [r3, #32]
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40012c00 	.word	0x40012c00

08002a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	031b      	lsls	r3, r3, #12
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <TIM_OC4_SetConfig+0x98>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d109      	bne.n	8002a7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	019b      	lsls	r3, r3, #6
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	621a      	str	r2, [r3, #32]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	40012c00 	.word	0x40012c00

08002aa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a1a      	ldr	r2, [r3, #32]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a1a      	ldr	r2, [r3, #32]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8002adc:	431a      	orrs	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	621a      	str	r2, [r3, #32]
}
 8002ae2:	bf00      	nop
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e032      	b.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e03d      	b.n	8002c0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e03f      	b.n	8002ca8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d106      	bne.n	8002c42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f001 feb9 	bl	80049b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2224      	movs	r2, #36	; 0x24
 8002c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fc22 	bl	80034a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d153      	bne.n	8002d72 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_UART_Transmit_DMA+0x26>
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e04c      	b.n	8002d74 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_UART_Transmit_DMA+0x38>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e045      	b.n	8002d74 <HAL_UART_Transmit_DMA+0xc4>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	88fa      	ldrh	r2, [r7, #6]
 8002d00:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2221      	movs	r2, #33	; 0x21
 8002d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <HAL_UART_Transmit_DMA+0xcc>)
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	4a18      	ldr	r2, [pc, #96]	; (8002d80 <HAL_UART_Transmit_DMA+0xd0>)
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_UART_Transmit_DMA+0xd4>)
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002d30:	f107 0308 	add.w	r3, r7, #8
 8002d34:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	6819      	ldr	r1, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3304      	adds	r3, #4
 8002d44:	461a      	mov	r2, r3
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	f7fe fb40 	bl	80013cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d54:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695a      	ldr	r2, [r3, #20]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d6c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e000      	b.n	8002d74 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002d72:	2302      	movs	r3, #2
  }
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	080030b7 	.word	0x080030b7
 8002d80:	08003109 	.word	0x08003109
 8002d84:	080031a9 	.word	0x080031a9

08002d88 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d166      	bne.n	8002e70 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_UART_Receive_DMA+0x26>
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e05f      	b.n	8002e72 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_UART_Receive_DMA+0x38>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e058      	b.n	8002e72 <HAL_UART_Receive_DMA+0xea>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	88fa      	ldrh	r2, [r7, #6]
 8002dd2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2222      	movs	r2, #34	; 0x22
 8002dde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de6:	4a25      	ldr	r2, [pc, #148]	; (8002e7c <HAL_UART_Receive_DMA+0xf4>)
 8002de8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	4a24      	ldr	r2, [pc, #144]	; (8002e80 <HAL_UART_Receive_DMA+0xf8>)
 8002df0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df6:	4a23      	ldr	r2, [pc, #140]	; (8002e84 <HAL_UART_Receive_DMA+0xfc>)
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	2200      	movs	r2, #0
 8002e00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8002e02:	f107 0308 	add.w	r3, r7, #8
 8002e06:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3304      	adds	r3, #4
 8002e12:	4619      	mov	r1, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	f7fe fad7 	bl	80013cc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e4a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e6a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e000      	b.n	8002e72 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
  }
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	08003125 	.word	0x08003125
 8002e80:	0800318d 	.word	0x0800318d
 8002e84:	080031a9 	.word	0x080031a9

08002e88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10d      	bne.n	8002eda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_UART_IRQHandler+0x52>
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fa65 	bl	80033a2 <UART_Receive_IT>
      return;
 8002ed8:	e0cc      	b.n	8003074 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80ab 	beq.w	8003038 <HAL_UART_IRQHandler+0x1b0>
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d105      	bne.n	8002ef8 <HAL_UART_IRQHandler+0x70>
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80a0 	beq.w	8003038 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_UART_IRQHandler+0x90>
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_UART_IRQHandler+0xb0>
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f30:	f043 0202 	orr.w	r2, r3, #2
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_UART_IRQHandler+0xd0>
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	f043 0204 	orr.w	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_UART_IRQHandler+0xf0>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	f043 0208 	orr.w	r2, r3, #8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d078      	beq.n	8003072 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <HAL_UART_IRQHandler+0x112>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fa04 	bl	80033a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x13a>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d031      	beq.n	8003026 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f94f 	bl	8003266 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d023      	beq.n	800301e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d013      	beq.n	8003016 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	4a22      	ldr	r2, [pc, #136]	; (800307c <HAL_UART_IRQHandler+0x1f4>)
 8002ff4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fa46 	bl	800148c <HAL_DMA_Abort_IT>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003010:	4610      	mov	r0, r2
 8003012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003014:	e00e      	b.n	8003034 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f844 	bl	80030a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	e00a      	b.n	8003034 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f840 	bl	80030a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003024:	e006      	b.n	8003034 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f83c 	bl	80030a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003032:	e01e      	b.n	8003072 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003034:	bf00      	nop
    return;
 8003036:	e01c      	b.n	8003072 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_UART_IRQHandler+0x1cc>
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f93b 	bl	80032c8 <UART_Transmit_IT>
    return;
 8003052:	e00f      	b.n	8003074 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_UART_IRQHandler+0x1ec>
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f982 	bl	8003372 <UART_EndTransmit_IT>
    return;
 800306e:	bf00      	nop
 8003070:	e000      	b.n	8003074 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003072:	bf00      	nop
  }
}
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	080032a1 	.word	0x080032a1

08003080 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d113      	bne.n	80030fa <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f6:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030f8:	e002      	b.n	8003100 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f7ff ffc0 	bl	8003080 <HAL_UART_TxCpltCallback>
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff ffbb 	bl	8003092 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d11e      	bne.n	800317e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003154:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003174:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f001 fad0 	bl	8004724 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f001 fa9c 	bl	80046d8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b21      	cmp	r3, #33	; 0x21
 80031da:	d108      	bne.n	80031ee <UART_DMAError+0x46>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2200      	movs	r2, #0
 80031e6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80031e8:	68b8      	ldr	r0, [r7, #8]
 80031ea:	f000 f827 	bl	800323c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b22      	cmp	r3, #34	; 0x22
 800320e:	d108      	bne.n	8003222 <UART_DMAError+0x7a>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2200      	movs	r2, #0
 800321a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800321c:	68b8      	ldr	r0, [r7, #8]
 800321e:	f000 f822 	bl	8003266 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	f043 0210 	orr.w	r2, r3, #16
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800322e:	68b8      	ldr	r0, [r7, #8]
 8003230:	f7ff ff38 	bl	80030a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003252:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800327c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f7ff fef2 	bl	80030a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b21      	cmp	r3, #33	; 0x21
 80032da:	d144      	bne.n	8003366 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e4:	d11a      	bne.n	800331c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032fa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	621a      	str	r2, [r3, #32]
 800330e:	e00e      	b.n	800332e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	621a      	str	r2, [r3, #32]
 800331a:	e008      	b.n	800332e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	1c59      	adds	r1, r3, #1
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6211      	str	r1, [r2, #32]
 8003326:	781a      	ldrb	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29b      	uxth	r3, r3
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4619      	mov	r1, r3
 800333c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003350:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003360:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e000      	b.n	8003368 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
  }
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003388:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff fe74 	bl	8003080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b22      	cmp	r3, #34	; 0x22
 80033b4:	d171      	bne.n	800349a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033be:	d123      	bne.n	8003408 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28
 80033ea:	e029      	b.n	8003440 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	629a      	str	r2, [r3, #40]	; 0x28
 8003406:	e01b      	b.n	8003440 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6858      	ldr	r0, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	1c59      	adds	r1, r3, #1
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6291      	str	r1, [r2, #40]	; 0x28
 8003420:	b2c2      	uxtb	r2, r0
 8003422:	701a      	strb	r2, [r3, #0]
 8003424:	e00c      	b.n	8003440 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	1c58      	adds	r0, r3, #1
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	6288      	str	r0, [r1, #40]	; 0x28
 8003438:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29b      	uxth	r3, r3
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4619      	mov	r1, r3
 800344e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003450:	2b00      	cmp	r3, #0
 8003452:	d120      	bne.n	8003496 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0220 	bic.w	r2, r2, #32
 8003462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f001 f949 	bl	8004724 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e002      	b.n	800349c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	e000      	b.n	800349c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800349a:	2302      	movs	r3, #2
  }
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034de:	f023 030c 	bic.w	r3, r3, #12
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	430b      	orrs	r3, r1
 80034ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a52      	ldr	r2, [pc, #328]	; (8003650 <UART_SetConfig+0x1ac>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d14e      	bne.n	80035aa <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800350c:	f7fe fec4 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 8003510:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	009a      	lsls	r2, r3, #2
 800351c:	441a      	add	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	4a4a      	ldr	r2, [pc, #296]	; (8003654 <UART_SetConfig+0x1b0>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	0119      	lsls	r1, r3, #4
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009a      	lsls	r2, r3, #2
 800353c:	441a      	add	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	fbb2 f2f3 	udiv	r2, r2, r3
 8003548:	4b42      	ldr	r3, [pc, #264]	; (8003654 <UART_SetConfig+0x1b0>)
 800354a:	fba3 0302 	umull	r0, r3, r3, r2
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	2064      	movs	r0, #100	; 0x64
 8003552:	fb00 f303 	mul.w	r3, r0, r3
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	3332      	adds	r3, #50	; 0x32
 800355c:	4a3d      	ldr	r2, [pc, #244]	; (8003654 <UART_SetConfig+0x1b0>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003568:	4419      	add	r1, r3
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	009a      	lsls	r2, r3, #2
 8003574:	441a      	add	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003580:	4b34      	ldr	r3, [pc, #208]	; (8003654 <UART_SetConfig+0x1b0>)
 8003582:	fba3 0302 	umull	r0, r3, r3, r2
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2064      	movs	r0, #100	; 0x64
 800358a:	fb00 f303 	mul.w	r3, r0, r3
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	3332      	adds	r3, #50	; 0x32
 8003594:	4a2f      	ldr	r2, [pc, #188]	; (8003654 <UART_SetConfig+0x1b0>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	f003 020f 	and.w	r2, r3, #15
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	440a      	add	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80035a8:	e04d      	b.n	8003646 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80035aa:	f7fe fe61 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 80035ae:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009a      	lsls	r2, r3, #2
 80035ba:	441a      	add	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c6:	4a23      	ldr	r2, [pc, #140]	; (8003654 <UART_SetConfig+0x1b0>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	0119      	lsls	r1, r3, #4
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	009a      	lsls	r2, r3, #2
 80035da:	441a      	add	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <UART_SetConfig+0x1b0>)
 80035e8:	fba3 0302 	umull	r0, r3, r3, r2
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	2064      	movs	r0, #100	; 0x64
 80035f0:	fb00 f303 	mul.w	r3, r0, r3
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	3332      	adds	r3, #50	; 0x32
 80035fa:	4a16      	ldr	r2, [pc, #88]	; (8003654 <UART_SetConfig+0x1b0>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003606:	4419      	add	r1, r3
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	009a      	lsls	r2, r3, #2
 8003612:	441a      	add	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	fbb2 f2f3 	udiv	r2, r2, r3
 800361e:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <UART_SetConfig+0x1b0>)
 8003620:	fba3 0302 	umull	r0, r3, r3, r2
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	2064      	movs	r0, #100	; 0x64
 8003628:	fb00 f303 	mul.w	r3, r0, r3
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	3332      	adds	r3, #50	; 0x32
 8003632:	4a08      	ldr	r2, [pc, #32]	; (8003654 <UART_SetConfig+0x1b0>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	f003 020f 	and.w	r2, r3, #15
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	440a      	add	r2, r1
 8003644:	609a      	str	r2, [r3, #8]
}
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40013800 	.word	0x40013800
 8003654:	51eb851f 	.word	0x51eb851f

08003658 <decoupling>:
#include "algorithnm.h"
#include "main.h"
#include "stdio.h"
#include "string.h"

void decoupling(float forwardspeed,float rollspeed,decoulpe_TypeDef * decouple){
 8003658:	b5b0      	push	{r4, r5, r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
	decouple->Speed_L = forwardspeed*1+rollspeed*(-0.2050);
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f7fc fed7 	bl	8000418 <__aeabi_f2d>
 800366a:	4604      	mov	r4, r0
 800366c:	460d      	mov	r5, r1
 800366e:	68b8      	ldr	r0, [r7, #8]
 8003670:	f7fc fed2 	bl	8000418 <__aeabi_f2d>
 8003674:	a31a      	add	r3, pc, #104	; (adr r3, 80036e0 <decoupling+0x88>)
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	f7fc ff25 	bl	80004c8 <__aeabi_dmul>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4620      	mov	r0, r4
 8003684:	4629      	mov	r1, r5
 8003686:	f7fc fd69 	bl	800015c <__adddf3>
 800368a:	4603      	mov	r3, r0
 800368c:	460c      	mov	r4, r1
 800368e:	4618      	mov	r0, r3
 8003690:	4621      	mov	r1, r4
 8003692:	f7fd f9db 	bl	8000a4c <__aeabi_d2f>
 8003696:	4602      	mov	r2, r0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	601a      	str	r2, [r3, #0]
	decouple->Speed_R = forwardspeed*1+rollspeed*0.2050;
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f7fc febb 	bl	8000418 <__aeabi_f2d>
 80036a2:	4604      	mov	r4, r0
 80036a4:	460d      	mov	r5, r1
 80036a6:	68b8      	ldr	r0, [r7, #8]
 80036a8:	f7fc feb6 	bl	8000418 <__aeabi_f2d>
 80036ac:	a30e      	add	r3, pc, #56	; (adr r3, 80036e8 <decoupling+0x90>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f7fc ff09 	bl	80004c8 <__aeabi_dmul>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4620      	mov	r0, r4
 80036bc:	4629      	mov	r1, r5
 80036be:	f7fc fd4d 	bl	800015c <__adddf3>
 80036c2:	4603      	mov	r3, r0
 80036c4:	460c      	mov	r4, r1
 80036c6:	4618      	mov	r0, r3
 80036c8:	4621      	mov	r1, r4
 80036ca:	f7fd f9bf 	bl	8000a4c <__aeabi_d2f>
 80036ce:	4602      	mov	r2, r0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	605a      	str	r2, [r3, #4]
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bdb0      	pop	{r4, r5, r7, pc}
 80036dc:	f3af 8000 	nop.w
 80036e0:	a3d70a3d 	.word	0xa3d70a3d
 80036e4:	bfca3d70 	.word	0xbfca3d70
 80036e8:	a3d70a3d 	.word	0xa3d70a3d
 80036ec:	3fca3d70 	.word	0x3fca3d70

080036f0 <fliter>:

float fliter(float r,Filer_TypeDef *filer){
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
	static float A,B,C,u_return;
	A=(2*filer->tc-filer->ts)/(2*filer->tc+filer->ts);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	4619      	mov	r1, r3
 8003700:	4618      	mov	r0, r3
 8003702:	f7fd f9f9 	bl	8000af8 <__addsf3>
 8003706:	4603      	mov	r3, r0
 8003708:	461a      	mov	r2, r3
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f7fd f9ef 	bl	8000af4 <__aeabi_fsub>
 8003716:	4603      	mov	r3, r0
 8003718:	461c      	mov	r4, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	4619      	mov	r1, r3
 8003720:	4618      	mov	r0, r3
 8003722:	f7fd f9e9 	bl	8000af8 <__addsf3>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f7fd f9e1 	bl	8000af8 <__addsf3>
 8003736:	4603      	mov	r3, r0
 8003738:	4619      	mov	r1, r3
 800373a:	4620      	mov	r0, r4
 800373c:	f7fd fb98 	bl	8000e70 <__aeabi_fdiv>
 8003740:	4603      	mov	r3, r0
 8003742:	461a      	mov	r2, r3
 8003744:	4b3f      	ldr	r3, [pc, #252]	; (8003844 <fliter+0x154>)
 8003746:	601a      	str	r2, [r3, #0]
	B=(2*filer->to+filer->ts)/(2*filer->tc+filer->ts);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4619      	mov	r1, r3
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd f9d2 	bl	8000af8 <__addsf3>
 8003754:	4603      	mov	r3, r0
 8003756:	461a      	mov	r2, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f7fd f9ca 	bl	8000af8 <__addsf3>
 8003764:	4603      	mov	r3, r0
 8003766:	461c      	mov	r4, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4619      	mov	r1, r3
 800376e:	4618      	mov	r0, r3
 8003770:	f7fd f9c2 	bl	8000af8 <__addsf3>
 8003774:	4603      	mov	r3, r0
 8003776:	461a      	mov	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4619      	mov	r1, r3
 800377e:	4610      	mov	r0, r2
 8003780:	f7fd f9ba 	bl	8000af8 <__addsf3>
 8003784:	4603      	mov	r3, r0
 8003786:	4619      	mov	r1, r3
 8003788:	4620      	mov	r0, r4
 800378a:	f7fd fb71 	bl	8000e70 <__aeabi_fdiv>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	4b2d      	ldr	r3, [pc, #180]	; (8003848 <fliter+0x158>)
 8003794:	601a      	str	r2, [r3, #0]
	C=(filer->ts-2*filer->to)/(2*filer->tc+filer->ts);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681c      	ldr	r4, [r3, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4619      	mov	r1, r3
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fd f9a9 	bl	8000af8 <__addsf3>
 80037a6:	4603      	mov	r3, r0
 80037a8:	4619      	mov	r1, r3
 80037aa:	4620      	mov	r0, r4
 80037ac:	f7fd f9a2 	bl	8000af4 <__aeabi_fsub>
 80037b0:	4603      	mov	r3, r0
 80037b2:	461c      	mov	r4, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4619      	mov	r1, r3
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd f99c 	bl	8000af8 <__addsf3>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f7fd f994 	bl	8000af8 <__addsf3>
 80037d0:	4603      	mov	r3, r0
 80037d2:	4619      	mov	r1, r3
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7fd fb4b 	bl	8000e70 <__aeabi_fdiv>
 80037da:	4603      	mov	r3, r0
 80037dc:	461a      	mov	r2, r3
 80037de:	4b1b      	ldr	r3, [pc, #108]	; (800384c <fliter+0x15c>)
 80037e0:	601a      	str	r2, [r3, #0]
	u_return = A*filer->u_last+B*r+C*r;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	4b17      	ldr	r3, [pc, #92]	; (8003844 <fliter+0x154>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f7fd fa8b 	bl	8000d08 <__aeabi_fmul>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461c      	mov	r4, r3
 80037f6:	4b14      	ldr	r3, [pc, #80]	; (8003848 <fliter+0x158>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd fa83 	bl	8000d08 <__aeabi_fmul>
 8003802:	4603      	mov	r3, r0
 8003804:	4619      	mov	r1, r3
 8003806:	4620      	mov	r0, r4
 8003808:	f7fd f976 	bl	8000af8 <__addsf3>
 800380c:	4603      	mov	r3, r0
 800380e:	461c      	mov	r4, r3
 8003810:	4b0e      	ldr	r3, [pc, #56]	; (800384c <fliter+0x15c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fd fa76 	bl	8000d08 <__aeabi_fmul>
 800381c:	4603      	mov	r3, r0
 800381e:	4619      	mov	r1, r3
 8003820:	4620      	mov	r0, r4
 8003822:	f7fd f969 	bl	8000af8 <__addsf3>
 8003826:	4603      	mov	r3, r0
 8003828:	461a      	mov	r2, r3
 800382a:	4b09      	ldr	r3, [pc, #36]	; (8003850 <fliter+0x160>)
 800382c:	601a      	str	r2, [r3, #0]
	filer->u_last = u_return;
 800382e:	4b08      	ldr	r3, [pc, #32]	; (8003850 <fliter+0x160>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	60da      	str	r2, [r3, #12]
	return u_return;
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <fliter+0x160>)
 8003838:	681b      	ldr	r3, [r3, #0]
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bd90      	pop	{r4, r7, pc}
 8003842:	bf00      	nop
 8003844:	2000006c 	.word	0x2000006c
 8003848:	20000070 	.word	0x20000070
 800384c:	20000074 	.word	0x20000074
 8003850:	20000078 	.word	0x20000078

08003854 <PID_Inc>:

int PID_Inc(float SetValue, float ActualValue, PID_IncTypeDef *PID){
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
	PID->Ek = SetValue - ActualValue;
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7fd f946 	bl	8000af4 <__aeabi_fsub>
 8003868:	4603      	mov	r3, r0
 800386a:	461a      	mov	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	60da      	str	r2, [r3, #12]
//	float Inc = (PID->Kp*(PID->Ek-PID->Ek1))+(PID->Ki*PID->Ek)+(PID->Kd*(PID->Ek+PID->Ek2-(PID->Ek1*2)));
	float Inc = (PID->Kp * PID->Ek) - (PID->Ki * PID->Ek1) + (PID->Kd * PID->Ek2);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4619      	mov	r1, r3
 800387a:	4610      	mov	r0, r2
 800387c:	f7fd fa44 	bl	8000d08 <__aeabi_fmul>
 8003880:	4603      	mov	r3, r0
 8003882:	461c      	mov	r4, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f7fd fa3a 	bl	8000d08 <__aeabi_fmul>
 8003894:	4603      	mov	r3, r0
 8003896:	4619      	mov	r1, r3
 8003898:	4620      	mov	r0, r4
 800389a:	f7fd f92b 	bl	8000af4 <__aeabi_fsub>
 800389e:	4603      	mov	r3, r0
 80038a0:	461c      	mov	r4, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	4619      	mov	r1, r3
 80038ac:	4610      	mov	r0, r2
 80038ae:	f7fd fa2b 	bl	8000d08 <__aeabi_fmul>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4619      	mov	r1, r3
 80038b6:	4620      	mov	r0, r4
 80038b8:	f7fd f91e 	bl	8000af8 <__addsf3>
 80038bc:	4603      	mov	r3, r0
 80038be:	617b      	str	r3, [r7, #20]
	PID->Ek2 = PID->Ek1;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	615a      	str	r2, [r3, #20]
	PID->Ek1 = PID->Ek;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	611a      	str	r2, [r3, #16]
	PID->PWMvalue += (int)Inc;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699c      	ldr	r4, [r3, #24]
 80038d4:	6978      	ldr	r0, [r7, #20]
 80038d6:	f7fd fb67 	bl	8000fa8 <__aeabi_f2iz>
 80038da:	4603      	mov	r3, r0
 80038dc:	18e2      	adds	r2, r4, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	619a      	str	r2, [r3, #24]
	return PID->PWMvalue;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd90      	pop	{r4, r7, pc}

080038ee <saturation>:

int saturation(int r,int uplimit,int downlimit){
 80038ee:	b480      	push	{r7}
 80038f0:	b087      	sub	sp, #28
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
	int result;
	if(r > uplimit){
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	429a      	cmp	r2, r3
 8003900:	dd02      	ble.n	8003908 <saturation+0x1a>
		result = uplimit;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e008      	b.n	800391a <saturation+0x2c>
	}else{
		if(r < downlimit){
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	429a      	cmp	r2, r3
 800390e:	da02      	bge.n	8003916 <saturation+0x28>
			result = downlimit;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	e001      	b.n	800391a <saturation+0x2c>
		}else{
			result = r;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	617b      	str	r3, [r7, #20]
		}
	}
	return result;
 800391a:	697b      	ldr	r3, [r7, #20]
}
 800391c:	4618      	mov	r0, r3
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr
	...

08003928 <PID_R_motor>:


int PID_R_motor(float r,float speed){
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
	static Transfer1_3_Parameters transfer_data = {{0.04541},{1,17.74,292.9}};
//	static Final_Parameters Parameters_data = {5,15,1.5,0.005};
	static Final_Parameters Parameters_data = {5,15,0.8,0.005};
	float kpd = transfer_data.den[0]*Parameters_data.wo/(transfer_data.num[0]*Parameters_data.lam);
 8003932:	4b3a      	ldr	r3, [pc, #232]	; (8003a1c <PID_R_motor+0xf4>)
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <PID_R_motor+0xf8>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f7fd f9e3 	bl	8000d08 <__aeabi_fmul>
 8003942:	4603      	mov	r3, r0
 8003944:	461c      	mov	r4, r3
 8003946:	4b35      	ldr	r3, [pc, #212]	; (8003a1c <PID_R_motor+0xf4>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b35      	ldr	r3, [pc, #212]	; (8003a20 <PID_R_motor+0xf8>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7fd f9d9 	bl	8000d08 <__aeabi_fmul>
 8003956:	4603      	mov	r3, r0
 8003958:	4619      	mov	r1, r3
 800395a:	4620      	mov	r0, r4
 800395c:	f7fd fa88 	bl	8000e70 <__aeabi_fdiv>
 8003960:	4603      	mov	r3, r0
 8003962:	60fb      	str	r3, [r7, #12]
	static Filer_TypeDef Filter_data;
	static PID_IncTypeDef PID_data;
	Filter_data.ts = Parameters_data.ts;Filter_data.tc =1/Parameters_data.wc;
 8003964:	4b2e      	ldr	r3, [pc, #184]	; (8003a20 <PID_R_motor+0xf8>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4a2e      	ldr	r2, [pc, #184]	; (8003a24 <PID_R_motor+0xfc>)
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b2c      	ldr	r3, [pc, #176]	; (8003a20 <PID_R_motor+0xf8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4619      	mov	r1, r3
 8003972:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003976:	f7fd fa7b 	bl	8000e70 <__aeabi_fdiv>
 800397a:	4603      	mov	r3, r0
 800397c:	461a      	mov	r2, r3
 800397e:	4b29      	ldr	r3, [pc, #164]	; (8003a24 <PID_R_motor+0xfc>)
 8003980:	609a      	str	r2, [r3, #8]
	Filter_data.to = 1/Parameters_data.wo;
 8003982:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <PID_R_motor+0xf8>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4619      	mov	r1, r3
 8003988:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800398c:	f7fd fa70 	bl	8000e70 <__aeabi_fdiv>
 8003990:	4603      	mov	r3, r0
 8003992:	461a      	mov	r2, r3
 8003994:	4b23      	ldr	r3, [pc, #140]	; (8003a24 <PID_R_motor+0xfc>)
 8003996:	605a      	str	r2, [r3, #4]
	PID_data.Kp = kpd*(1+Parameters_data.wc*Parameters_data.lam);
 8003998:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <PID_R_motor+0xf8>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <PID_R_motor+0xf8>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4619      	mov	r1, r3
 80039a2:	4610      	mov	r0, r2
 80039a4:	f7fd f9b0 	bl	8000d08 <__aeabi_fmul>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fd f8a2 	bl	8000af8 <__addsf3>
 80039b4:	4603      	mov	r3, r0
 80039b6:	68f9      	ldr	r1, [r7, #12]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fd f9a5 	bl	8000d08 <__aeabi_fmul>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <PID_R_motor+0x100>)
 80039c4:	601a      	str	r2, [r3, #0]
	PID_data.Ki = kpd*Parameters_data.wc;
 80039c6:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <PID_R_motor+0xf8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68f9      	ldr	r1, [r7, #12]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd f99b 	bl	8000d08 <__aeabi_fmul>
 80039d2:	4603      	mov	r3, r0
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <PID_R_motor+0x100>)
 80039d8:	605a      	str	r2, [r3, #4]
	PID_data.Kd = kpd*Parameters_data.lam;
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <PID_R_motor+0xf8>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd f991 	bl	8000d08 <__aeabi_fmul>
 80039e6:	4603      	mov	r3, r0
 80039e8:	461a      	mov	r2, r3
 80039ea:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <PID_R_motor+0x100>)
 80039ec:	609a      	str	r2, [r3, #8]

	return saturation(PID_Inc(fliter(r,&Filter_data),speed,&PID_data),10000,-10000);
 80039ee:	490d      	ldr	r1, [pc, #52]	; (8003a24 <PID_R_motor+0xfc>)
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff fe7d 	bl	80036f0 <fliter>
 80039f6:	4603      	mov	r3, r0
 80039f8:	4a0b      	ldr	r2, [pc, #44]	; (8003a28 <PID_R_motor+0x100>)
 80039fa:	6839      	ldr	r1, [r7, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff29 	bl	8003854 <PID_Inc>
 8003a02:	4603      	mov	r3, r0
 8003a04:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <PID_R_motor+0x104>)
 8003a06:	f242 7110 	movw	r1, #10000	; 0x2710
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ff6f 	bl	80038ee <saturation>
 8003a10:	4603      	mov	r3, r0
//	int b = PID_Inc(a,speed,&PID_data);
//	int c = saturation(b,10000,-10000);
//	sprintf(data,"d:%d,%d,%0.3f,",b,c,a);
//	HAL_UART_Transmit(&huart1, data, strlen(data), 0x03);
//	return c;
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd90      	pop	{r4, r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000008 	.word	0x20000008
 8003a20:	20000018 	.word	0x20000018
 8003a24:	2000007c 	.word	0x2000007c
 8003a28:	2000008c 	.word	0x2000008c
 8003a2c:	ffffd8f0 	.word	0xffffd8f0

08003a30 <PID_L_motor>:

//static uint8_t data[20];
//extern UART_HandleTypeDef huart1;
int PID_L_motor(float r,float speed){
 8003a30:	b590      	push	{r4, r7, lr}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
	static Transfer1_3_Parameters transfer_data = {{0.08475},{1,32.93,502.1}};
//	static Final_Parameters Parameters_data = {5,15,1.5,0.005};
	static Final_Parameters Parameters_data = {5,15,0.8,0.005};
	float kpd = transfer_data.den[0]*Parameters_data.wo/(transfer_data.num[0]*Parameters_data.lam);
 8003a3a:	4b3a      	ldr	r3, [pc, #232]	; (8003b24 <PID_L_motor+0xf4>)
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <PID_L_motor+0xf8>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f7fd f95f 	bl	8000d08 <__aeabi_fmul>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	461c      	mov	r4, r3
 8003a4e:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <PID_L_motor+0xf4>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <PID_L_motor+0xf8>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	4619      	mov	r1, r3
 8003a58:	4610      	mov	r0, r2
 8003a5a:	f7fd f955 	bl	8000d08 <__aeabi_fmul>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4619      	mov	r1, r3
 8003a62:	4620      	mov	r0, r4
 8003a64:	f7fd fa04 	bl	8000e70 <__aeabi_fdiv>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	60fb      	str	r3, [r7, #12]
	static Filer_TypeDef Filter_data;
	static PID_IncTypeDef PID_data;
	Filter_data.ts = Parameters_data.ts;Filter_data.tc =1/Parameters_data.wc;
 8003a6c:	4b2e      	ldr	r3, [pc, #184]	; (8003b28 <PID_L_motor+0xf8>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a2e      	ldr	r2, [pc, #184]	; (8003b2c <PID_L_motor+0xfc>)
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4b2c      	ldr	r3, [pc, #176]	; (8003b28 <PID_L_motor+0xf8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003a7e:	f7fd f9f7 	bl	8000e70 <__aeabi_fdiv>
 8003a82:	4603      	mov	r3, r0
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b29      	ldr	r3, [pc, #164]	; (8003b2c <PID_L_motor+0xfc>)
 8003a88:	609a      	str	r2, [r3, #8]
	Filter_data.to = 1/Parameters_data.wo;
 8003a8a:	4b27      	ldr	r3, [pc, #156]	; (8003b28 <PID_L_motor+0xf8>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003a94:	f7fd f9ec 	bl	8000e70 <__aeabi_fdiv>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <PID_L_motor+0xfc>)
 8003a9e:	605a      	str	r2, [r3, #4]
	PID_data.Kp = kpd*(1+Parameters_data.wc*Parameters_data.lam);
 8003aa0:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <PID_L_motor+0xf8>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4b20      	ldr	r3, [pc, #128]	; (8003b28 <PID_L_motor+0xf8>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f7fd f92c 	bl	8000d08 <__aeabi_fmul>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd f81e 	bl	8000af8 <__addsf3>
 8003abc:	4603      	mov	r3, r0
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fd f921 	bl	8000d08 <__aeabi_fmul>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <PID_L_motor+0x100>)
 8003acc:	601a      	str	r2, [r3, #0]
	PID_data.Ki = kpd*Parameters_data.wc;
 8003ace:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <PID_L_motor+0xf8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68f9      	ldr	r1, [r7, #12]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd f917 	bl	8000d08 <__aeabi_fmul>
 8003ada:	4603      	mov	r3, r0
 8003adc:	461a      	mov	r2, r3
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <PID_L_motor+0x100>)
 8003ae0:	605a      	str	r2, [r3, #4]
	PID_data.Kd = kpd*Parameters_data.lam;
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <PID_L_motor+0xf8>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	68f9      	ldr	r1, [r7, #12]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fd f90d 	bl	8000d08 <__aeabi_fmul>
 8003aee:	4603      	mov	r3, r0
 8003af0:	461a      	mov	r2, r3
 8003af2:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <PID_L_motor+0x100>)
 8003af4:	609a      	str	r2, [r3, #8]

	return saturation(PID_Inc(fliter(r,&Filter_data),speed,&PID_data),10000,-10000);
 8003af6:	490d      	ldr	r1, [pc, #52]	; (8003b2c <PID_L_motor+0xfc>)
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fdf9 	bl	80036f0 <fliter>
 8003afe:	4603      	mov	r3, r0
 8003b00:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <PID_L_motor+0x100>)
 8003b02:	6839      	ldr	r1, [r7, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fea5 	bl	8003854 <PID_Inc>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4a09      	ldr	r2, [pc, #36]	; (8003b34 <PID_L_motor+0x104>)
 8003b0e:	f242 7110 	movw	r1, #10000	; 0x2710
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff feeb 	bl	80038ee <saturation>
 8003b18:	4603      	mov	r3, r0
//	int b = PID_Inc(a,speed,&PID_data);
//	int c = saturation(b,10000,-10000);
//	sprintf(data,"d:%d,%d,%0.3f,",b,c,a);
//	HAL_UART_Transmit(&huart1, data, strlen(data), 0x03);
//	return c;
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd90      	pop	{r4, r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000028 	.word	0x20000028
 8003b28:	20000038 	.word	0x20000038
 8003b2c:	200000a8 	.word	0x200000a8
 8003b30:	200000b8 	.word	0x200000b8
 8003b34:	ffffd8f0 	.word	0xffffd8f0

08003b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b3e:	f7fd fa59 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b42:	f000 f83f 	bl	8003bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b46:	f000 fa55 	bl	8003ff4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b4a:	f000 fa2d 	bl	8003fa8 <MX_DMA_Init>
  MX_TIM1_Init();
 8003b4e:	f000 f87f 	bl	8003c50 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003b52:	f000 f8ff 	bl	8003d54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003b56:	f000 f955 	bl	8003e04 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003b5a:	f000 f9a7 	bl	8003eac <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003b5e:	f000 f9f9 	bl	8003f54 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  motor_init();
 8003b62:	f000 faaf 	bl	80040c4 <motor_init>
  my_uart_init();
 8003b66:	f000 fd6b 	bl	8004640 <my_uart_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	data[0]=0xed;data[10]=0xde;data[5]=0xaa;
 8003b6a:	23ed      	movs	r3, #237	; 0xed
 8003b6c:	713b      	strb	r3, [r7, #4]
 8003b6e:	23de      	movs	r3, #222	; 0xde
 8003b70:	73bb      	strb	r3, [r7, #14]
 8003b72:	23aa      	movs	r3, #170	; 0xaa
 8003b74:	727b      	strb	r3, [r7, #9]
	ftuc.F32=x_position;
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <main+0x80>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	603b      	str	r3, [r7, #0]
	data[1]=ftuc.U8.low;data[2]=ftuc.U8.mlow;data[3]=ftuc.U8.mhigh;data[4]=ftuc.U8.high;
 8003b7c:	783b      	ldrb	r3, [r7, #0]
 8003b7e:	717b      	strb	r3, [r7, #5]
 8003b80:	787b      	ldrb	r3, [r7, #1]
 8003b82:	71bb      	strb	r3, [r7, #6]
 8003b84:	78bb      	ldrb	r3, [r7, #2]
 8003b86:	71fb      	strb	r3, [r7, #7]
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	723b      	strb	r3, [r7, #8]
	ftuc.F32=y_position;
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <main+0x84>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	603b      	str	r3, [r7, #0]
	data[6]=ftuc.U8.low;data[7]=ftuc.U8.mlow;data[8]=ftuc.U8.mhigh;data[9]=ftuc.U8.high;
 8003b92:	783b      	ldrb	r3, [r7, #0]
 8003b94:	72bb      	strb	r3, [r7, #10]
 8003b96:	787b      	ldrb	r3, [r7, #1]
 8003b98:	72fb      	strb	r3, [r7, #11]
 8003b9a:	78bb      	ldrb	r3, [r7, #2]
 8003b9c:	733b      	strb	r3, [r7, #12]
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit_DMA(&huart1, data, 11);
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	220b      	movs	r2, #11
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4805      	ldr	r0, [pc, #20]	; (8003bc0 <main+0x88>)
 8003baa:	f7ff f881 	bl	8002cb0 <HAL_UART_Transmit_DMA>
	HAL_Delay(15);
 8003bae:	200f      	movs	r0, #15
 8003bb0:	f7fd fa82 	bl	80010b8 <HAL_Delay>
	data[0]=0xed;data[10]=0xde;data[5]=0xaa;
 8003bb4:	e7d9      	b.n	8003b6a <main+0x32>
 8003bb6:	bf00      	nop
 8003bb8:	200002ec 	.word	0x200002ec
 8003bbc:	200002f4 	.word	0x200002f4
 8003bc0:	2000022c 	.word	0x2000022c

08003bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b090      	sub	sp, #64	; 0x40
 8003bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bca:	f107 0318 	add.w	r3, r7, #24
 8003bce:	2228      	movs	r2, #40	; 0x28
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f001 f872 	bl	8004cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bd8:	1d3b      	adds	r3, r7, #4
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	605a      	str	r2, [r3, #4]
 8003be0:	609a      	str	r2, [r3, #8]
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003be6:	2301      	movs	r3, #1
 8003be8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c02:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c08:	f107 0318 	add.w	r3, r7, #24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fd ff59 	bl	8001ac4 <HAL_RCC_OscConfig>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003c18:	f000 fa4e 	bl	80040b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c1c:	230f      	movs	r3, #15
 8003c1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c20:	2302      	movs	r3, #2
 8003c22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c32:	1d3b      	adds	r3, r7, #4
 8003c34:	2102      	movs	r1, #2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe f9c4 	bl	8001fc4 <HAL_RCC_ClockConfig>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003c42:	f000 fa39 	bl	80040b8 <Error_Handler>
  }
}
 8003c46:	bf00      	nop
 8003c48:	3740      	adds	r7, #64	; 0x40
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b092      	sub	sp, #72	; 0x48
 8003c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	611a      	str	r2, [r3, #16]
 8003c70:	615a      	str	r2, [r3, #20]
 8003c72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	2220      	movs	r2, #32
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 f81e 	bl	8004cbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c80:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <MX_TIM1_Init+0xfc>)
 8003c82:	4a33      	ldr	r2, [pc, #204]	; (8003d50 <MX_TIM1_Init+0x100>)
 8003c84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003c86:	4b31      	ldr	r3, [pc, #196]	; (8003d4c <MX_TIM1_Init+0xfc>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c8c:	4b2f      	ldr	r3, [pc, #188]	; (8003d4c <MX_TIM1_Init+0xfc>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10001;
 8003c92:	4b2e      	ldr	r3, [pc, #184]	; (8003d4c <MX_TIM1_Init+0xfc>)
 8003c94:	f242 7211 	movw	r2, #10001	; 0x2711
 8003c98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c9a:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <MX_TIM1_Init+0xfc>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ca0:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <MX_TIM1_Init+0xfc>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ca6:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <MX_TIM1_Init+0xfc>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003cac:	4827      	ldr	r0, [pc, #156]	; (8003d4c <MX_TIM1_Init+0xfc>)
 8003cae:	f7fe fb25 	bl	80022fc <HAL_TIM_PWM_Init>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003cb8:	f000 f9fe 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003cc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4820      	ldr	r0, [pc, #128]	; (8003d4c <MX_TIM1_Init+0xfc>)
 8003ccc:	f7fe ff0e 	bl	8002aec <HAL_TIMEx_MasterConfigSynchronization>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003cd6:	f000 f9ef 	bl	80040b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cda:	2360      	movs	r3, #96	; 0x60
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cf6:	220c      	movs	r2, #12
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4814      	ldr	r0, [pc, #80]	; (8003d4c <MX_TIM1_Init+0xfc>)
 8003cfc:	f7fe fc22 	bl	8002544 <HAL_TIM_PWM_ConfigChannel>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8003d06:	f000 f9d7 	bl	80040b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d28:	1d3b      	adds	r3, r7, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4807      	ldr	r0, [pc, #28]	; (8003d4c <MX_TIM1_Init+0xfc>)
 8003d2e:	f7fe ff21 	bl	8002b74 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8003d38:	f000 f9be 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003d3c:	4803      	ldr	r0, [pc, #12]	; (8003d4c <MX_TIM1_Init+0xfc>)
 8003d3e:	f000 fde7 	bl	8004910 <HAL_TIM_MspPostInit>

}
 8003d42:	bf00      	nop
 8003d44:	3748      	adds	r7, #72	; 0x48
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	2000026c 	.word	0x2000026c
 8003d50:	40012c00 	.word	0x40012c00

08003d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d5a:	f107 0320 	add.w	r3, r7, #32
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	60da      	str	r2, [r3, #12]
 8003d70:	611a      	str	r2, [r3, #16]
 8003d72:	615a      	str	r2, [r3, #20]
 8003d74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d76:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <MX_TIM2_Init+0xac>)
 8003d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003d7e:	4b20      	ldr	r3, [pc, #128]	; (8003e00 <MX_TIM2_Init+0xac>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d84:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <MX_TIM2_Init+0xac>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10001;
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <MX_TIM2_Init+0xac>)
 8003d8c:	f242 7211 	movw	r2, #10001	; 0x2711
 8003d90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d92:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <MX_TIM2_Init+0xac>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d98:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <MX_TIM2_Init+0xac>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003d9e:	4818      	ldr	r0, [pc, #96]	; (8003e00 <MX_TIM2_Init+0xac>)
 8003da0:	f7fe faac 	bl	80022fc <HAL_TIM_PWM_Init>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003daa:	f000 f985 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dae:	2300      	movs	r3, #0
 8003db0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003db2:	2300      	movs	r3, #0
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003db6:	f107 0320 	add.w	r3, r7, #32
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4810      	ldr	r0, [pc, #64]	; (8003e00 <MX_TIM2_Init+0xac>)
 8003dbe:	f7fe fe95 	bl	8002aec <HAL_TIMEx_MasterConfigSynchronization>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003dc8:	f000 f976 	bl	80040b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dcc:	2360      	movs	r3, #96	; 0x60
 8003dce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	220c      	movs	r2, #12
 8003de0:	4619      	mov	r1, r3
 8003de2:	4807      	ldr	r0, [pc, #28]	; (8003e00 <MX_TIM2_Init+0xac>)
 8003de4:	f7fe fbae 	bl	8002544 <HAL_TIM_PWM_ConfigChannel>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003dee:	f000 f963 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003df2:	4803      	ldr	r0, [pc, #12]	; (8003e00 <MX_TIM2_Init+0xac>)
 8003df4:	f000 fd8c 	bl	8004910 <HAL_TIM_MspPostInit>

}
 8003df8:	bf00      	nop
 8003dfa:	3728      	adds	r7, #40	; 0x28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	200002ac 	.word	0x200002ac

08003e04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	; 0x30
 8003e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e0a:	f107 030c 	add.w	r3, r7, #12
 8003e0e:	2224      	movs	r2, #36	; 0x24
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 ff52 	bl	8004cbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e18:	1d3b      	adds	r3, r7, #4
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e20:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <MX_TIM3_Init+0xa0>)
 8003e22:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <MX_TIM3_Init+0xa4>)
 8003e24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e26:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <MX_TIM3_Init+0xa0>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <MX_TIM3_Init+0xa0>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e32:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <MX_TIM3_Init+0xa0>)
 8003e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <MX_TIM3_Init+0xa0>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <MX_TIM3_Init+0xa0>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003e46:	2303      	movs	r3, #3
 8003e48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8003e56:	2305      	movs	r3, #5
 8003e58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e62:	2300      	movs	r3, #0
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8003e66:	2305      	movs	r3, #5
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003e6a:	f107 030c 	add.w	r3, r7, #12
 8003e6e:	4619      	mov	r1, r3
 8003e70:	480c      	ldr	r0, [pc, #48]	; (8003ea4 <MX_TIM3_Init+0xa0>)
 8003e72:	f7fe faa1 	bl	80023b8 <HAL_TIM_Encoder_Init>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003e7c:	f000 f91c 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e80:	2300      	movs	r3, #0
 8003e82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e88:	1d3b      	adds	r3, r7, #4
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4805      	ldr	r0, [pc, #20]	; (8003ea4 <MX_TIM3_Init+0xa0>)
 8003e8e:	f7fe fe2d 	bl	8002aec <HAL_TIMEx_MasterConfigSynchronization>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003e98:	f000 f90e 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003e9c:	bf00      	nop
 8003e9e:	3730      	adds	r7, #48	; 0x30
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000164 	.word	0x20000164
 8003ea8:	40000400 	.word	0x40000400

08003eac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08c      	sub	sp, #48	; 0x30
 8003eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003eb2:	f107 030c 	add.w	r3, r7, #12
 8003eb6:	2224      	movs	r2, #36	; 0x24
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fefe 	bl	8004cbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ec8:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <MX_TIM4_Init+0xa0>)
 8003eca:	4a21      	ldr	r2, [pc, #132]	; (8003f50 <MX_TIM4_Init+0xa4>)
 8003ecc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003ece:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <MX_TIM4_Init+0xa0>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <MX_TIM4_Init+0xa0>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003eda:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <MX_TIM4_Init+0xa0>)
 8003edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ee0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ee2:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <MX_TIM4_Init+0xa0>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ee8:	4b18      	ldr	r3, [pc, #96]	; (8003f4c <MX_TIM4_Init+0xa0>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8003efe:	2305      	movs	r3, #5
 8003f00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f02:	2300      	movs	r3, #0
 8003f04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f06:	2301      	movs	r3, #1
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8003f0e:	2305      	movs	r3, #5
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	4619      	mov	r1, r3
 8003f18:	480c      	ldr	r0, [pc, #48]	; (8003f4c <MX_TIM4_Init+0xa0>)
 8003f1a:	f7fe fa4d 	bl	80023b8 <HAL_TIM_Encoder_Init>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003f24:	f000 f8c8 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f30:	1d3b      	adds	r3, r7, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	4805      	ldr	r0, [pc, #20]	; (8003f4c <MX_TIM4_Init+0xa0>)
 8003f36:	f7fe fdd9 	bl	8002aec <HAL_TIMEx_MasterConfigSynchronization>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003f40:	f000 f8ba 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003f44:	bf00      	nop
 8003f46:	3730      	adds	r7, #48	; 0x30
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000124 	.word	0x20000124
 8003f50:	40000800 	.word	0x40000800

08003f54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f58:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f5a:	4a12      	ldr	r2, [pc, #72]	; (8003fa4 <MX_USART1_UART_Init+0x50>)
 8003f5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f66:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f7a:	220c      	movs	r2, #12
 8003f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f7e:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f8a:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <MX_USART1_UART_Init+0x4c>)
 8003f8c:	f7fe fe43 	bl	8002c16 <HAL_UART_Init>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003f96:	f000 f88f 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	2000022c 	.word	0x2000022c
 8003fa4:	40013800 	.word	0x40013800

08003fa8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <MX_DMA_Init+0x48>)
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	4a0f      	ldr	r2, [pc, #60]	; (8003ff0 <MX_DMA_Init+0x48>)
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	6153      	str	r3, [r2, #20]
 8003fba:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <MX_DMA_Init+0x48>)
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	607b      	str	r3, [r7, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2103      	movs	r1, #3
 8003fca:	200e      	movs	r0, #14
 8003fcc:	f7fd f96d 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003fd0:	200e      	movs	r0, #14
 8003fd2:	f7fd f986 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2103      	movs	r1, #3
 8003fda:	200f      	movs	r0, #15
 8003fdc:	f7fd f965 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003fe0:	200f      	movs	r0, #15
 8003fe2:	f7fd f97e 	bl	80012e2 <HAL_NVIC_EnableIRQ>

}
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40021000 	.word	0x40021000

08003ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ffa:	f107 0310 	add.w	r3, r7, #16
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	605a      	str	r2, [r3, #4]
 8004004:	609a      	str	r2, [r3, #8]
 8004006:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004008:	4b28      	ldr	r3, [pc, #160]	; (80040ac <MX_GPIO_Init+0xb8>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	4a27      	ldr	r2, [pc, #156]	; (80040ac <MX_GPIO_Init+0xb8>)
 800400e:	f043 0320 	orr.w	r3, r3, #32
 8004012:	6193      	str	r3, [r2, #24]
 8004014:	4b25      	ldr	r3, [pc, #148]	; (80040ac <MX_GPIO_Init+0xb8>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004020:	4b22      	ldr	r3, [pc, #136]	; (80040ac <MX_GPIO_Init+0xb8>)
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	4a21      	ldr	r2, [pc, #132]	; (80040ac <MX_GPIO_Init+0xb8>)
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	6193      	str	r3, [r2, #24]
 800402c:	4b1f      	ldr	r3, [pc, #124]	; (80040ac <MX_GPIO_Init+0xb8>)
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004038:	4b1c      	ldr	r3, [pc, #112]	; (80040ac <MX_GPIO_Init+0xb8>)
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <MX_GPIO_Init+0xb8>)
 800403e:	f043 0308 	orr.w	r3, r3, #8
 8004042:	6193      	str	r3, [r2, #24]
 8004044:	4b19      	ldr	r3, [pc, #100]	; (80040ac <MX_GPIO_Init+0xb8>)
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	607b      	str	r3, [r7, #4]
 800404e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DirOfRight_Pin|DirOfLeft_Pin, GPIO_PIN_RESET);
 8004050:	2200      	movs	r2, #0
 8004052:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004056:	4816      	ldr	r0, [pc, #88]	; (80040b0 <MX_GPIO_Init+0xbc>)
 8004058:	f7fd fd1c 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(brake_GPIO_Port, brake_Pin, GPIO_PIN_RESET);
 800405c:	2200      	movs	r2, #0
 800405e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004062:	4814      	ldr	r0, [pc, #80]	; (80040b4 <MX_GPIO_Init+0xc0>)
 8004064:	f7fd fd16 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DirOfRight_Pin DirOfLeft_Pin */
  GPIO_InitStruct.Pin = DirOfRight_Pin|DirOfLeft_Pin;
 8004068:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800406c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800406e:	2301      	movs	r3, #1
 8004070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004076:	2301      	movs	r3, #1
 8004078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800407a:	f107 0310 	add.w	r3, r7, #16
 800407e:	4619      	mov	r1, r3
 8004080:	480b      	ldr	r0, [pc, #44]	; (80040b0 <MX_GPIO_Init+0xbc>)
 8004082:	f7fd fbad 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : brake_Pin */
  GPIO_InitStruct.Pin = brake_Pin;
 8004086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800408a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800408c:	2301      	movs	r3, #1
 800408e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004090:	2301      	movs	r3, #1
 8004092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004094:	2302      	movs	r3, #2
 8004096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(brake_GPIO_Port, &GPIO_InitStruct);
 8004098:	f107 0310 	add.w	r3, r7, #16
 800409c:	4619      	mov	r1, r3
 800409e:	4805      	ldr	r0, [pc, #20]	; (80040b4 <MX_GPIO_Init+0xc0>)
 80040a0:	f7fd fb9e 	bl	80017e0 <HAL_GPIO_Init>

}
 80040a4:	bf00      	nop
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40010c00 	.word	0x40010c00
 80040b4:	40010800 	.word	0x40010800

080040b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <motor_init>:
static int RightValueOPulseNum;
static float speed_R,speed_L;
static float position_L,position_R;
float x_position,y_position,theta;

void motor_init(){
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80040c8:	213c      	movs	r1, #60	; 0x3c
 80040ca:	4814      	ldr	r0, [pc, #80]	; (800411c <motor_init+0x58>)
 80040cc:	f7fe fa02 	bl	80024d4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80040d0:	213c      	movs	r1, #60	; 0x3c
 80040d2:	4813      	ldr	r0, [pc, #76]	; (8004120 <motor_init+0x5c>)
 80040d4:	f7fe f9fe 	bl	80024d4 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim3,CENTRAL_POINT);
 80040d8:	4b10      	ldr	r3, [pc, #64]	; (800411c <motor_init+0x58>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,CENTRAL_POINT);
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <motor_init+0x5c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 80040ea:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4); //PWM
 80040ec:	210c      	movs	r1, #12
 80040ee:	480d      	ldr	r0, [pc, #52]	; (8004124 <motor_init+0x60>)
 80040f0:	f7fe f930 	bl	8002354 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4); //PWM
 80040f4:	210c      	movs	r1, #12
 80040f6:	480c      	ldr	r0, [pc, #48]	; (8004128 <motor_init+0x64>)
 80040f8:	f7fe f92c 	bl	8002354 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <motor_init+0x60>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2200      	movs	r2, #0
 8004102:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,0);
 8004104:	4b08      	ldr	r3, [pc, #32]	; (8004128 <motor_init+0x64>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2200      	movs	r2, #0
 800410a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800410c:	2200      	movs	r2, #0
 800410e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004112:	4806      	ldr	r0, [pc, #24]	; (800412c <motor_init+0x68>)
 8004114:	f7fd fcbe 	bl	8001a94 <HAL_GPIO_WritePin>
}
 8004118:	bf00      	nop
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20000164 	.word	0x20000164
 8004120:	20000124 	.word	0x20000124
 8004124:	2000026c 	.word	0x2000026c
 8004128:	200002ac 	.word	0x200002ac
 800412c:	40010800 	.word	0x40010800

08004130 <set_motor_PWM>:

void set_motor_PWM(enum RightOrLeft side,int value){
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	6039      	str	r1, [r7, #0]
 800413a:	71fb      	strb	r3, [r7, #7]
	if(side == left){
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d119      	bne.n	8004176 <set_motor_PWM+0x46>
		if (value >= 0) {
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	db0a      	blt.n	800415e <set_motor_PWM+0x2e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8004148:	2201      	movs	r2, #1
 800414a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800414e:	4818      	ldr	r0, [pc, #96]	; (80041b0 <set_motor_PWM+0x80>)
 8004150:	f7fd fca0 	bl	8001a94 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,value);
 8004154:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <set_motor_PWM+0x84>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	641a      	str	r2, [r3, #64]	; 0x40
		}else{//backward
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,-value);
		}
	}
}
 800415c:	e024      	b.n	80041a8 <set_motor_PWM+0x78>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800415e:	2200      	movs	r2, #0
 8004160:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004164:	4812      	ldr	r0, [pc, #72]	; (80041b0 <set_motor_PWM+0x80>)
 8004166:	f7fd fc95 	bl	8001a94 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,-value);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	425a      	negs	r2, r3
 800416e:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <set_motor_PWM+0x84>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004174:	e018      	b.n	80041a8 <set_motor_PWM+0x78>
		if (value >= 0) {
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	db0a      	blt.n	8004192 <set_motor_PWM+0x62>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800417c:	2201      	movs	r2, #1
 800417e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004182:	480b      	ldr	r0, [pc, #44]	; (80041b0 <set_motor_PWM+0x80>)
 8004184:	f7fd fc86 	bl	8001a94 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,value);
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <set_motor_PWM+0x88>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004190:	e00a      	b.n	80041a8 <set_motor_PWM+0x78>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8004192:	2200      	movs	r2, #0
 8004194:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004198:	4805      	ldr	r0, [pc, #20]	; (80041b0 <set_motor_PWM+0x80>)
 800419a:	f7fd fc7b 	bl	8001a94 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,-value);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	425a      	negs	r2, r3
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <set_motor_PWM+0x88>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80041a8:	bf00      	nop
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40010c00 	.word	0x40010c00
 80041b4:	2000026c 	.word	0x2000026c
 80041b8:	200002ac 	.word	0x200002ac
 80041bc:	00000000 	.word	0x00000000

080041c0 <get_motor_speed>:

void get_motor_speed(){
 80041c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
//	DirOfLeft = !(!((htim3.Instance->CR1) & (0x10)));
//	DirOfRight = !((htim4.Instance->CR1) & (0x10));
	LeftValueOfPulseNum = (uint32_t)(__HAL_TIM_GET_COUNTER(&htim3));
 80041c8:	4bb3      	ldr	r3, [pc, #716]	; (8004498 <get_motor_speed+0x2d8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	461a      	mov	r2, r3
 80041d0:	4bb2      	ldr	r3, [pc, #712]	; (800449c <get_motor_speed+0x2dc>)
 80041d2:	601a      	str	r2, [r3, #0]
	RightValueOPulseNum = (uint32_t)(__HAL_TIM_GET_COUNTER(&htim4));
 80041d4:	4bb2      	ldr	r3, [pc, #712]	; (80044a0 <get_motor_speed+0x2e0>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	461a      	mov	r2, r3
 80041dc:	4bb1      	ldr	r3, [pc, #708]	; (80044a4 <get_motor_speed+0x2e4>)
 80041de:	601a      	str	r2, [r3, #0]
//	if(DirOfRight != forward){
//		RightValueOPulseNum = -(RightValueOPulseNum-CENTRAL_POINT );
//	}else{//正转
//		RightValueOPulseNum = CENTRAL_POINT - RightValueOPulseNum;
//	}
	RightValueOPulseNum = RightValueOPulseNum - CENTRAL_POINT ;
 80041e0:	4bb0      	ldr	r3, [pc, #704]	; (80044a4 <get_motor_speed+0x2e4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80041e8:	3b7d      	subs	r3, #125	; 0x7d
 80041ea:	4aae      	ldr	r2, [pc, #696]	; (80044a4 <get_motor_speed+0x2e4>)
 80041ec:	6013      	str	r3, [r2, #0]
	LeftValueOfPulseNum = CENTRAL_POINT-LeftValueOfPulseNum;
 80041ee:	4bab      	ldr	r3, [pc, #684]	; (800449c <get_motor_speed+0x2dc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80041f6:	337d      	adds	r3, #125	; 0x7d
 80041f8:	4aa8      	ldr	r2, [pc, #672]	; (800449c <get_motor_speed+0x2dc>)
 80041fa:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim3,CENTRAL_POINT);
 80041fc:	4ba6      	ldr	r3, [pc, #664]	; (8004498 <get_motor_speed+0x2d8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 8004204:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,CENTRAL_POINT);
 8004206:	4ba6      	ldr	r3, [pc, #664]	; (80044a0 <get_motor_speed+0x2e0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 800420e:	625a      	str	r2, [r3, #36]	; 0x24
	position_R = ((float)RightValueOPulseNum)/2528.0*0.6283;
 8004210:	4ba4      	ldr	r3, [pc, #656]	; (80044a4 <get_motor_speed+0x2e4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f7fc fd23 	bl	8000c60 <__aeabi_i2f>
 800421a:	4603      	mov	r3, r0
 800421c:	4618      	mov	r0, r3
 800421e:	f7fc f8fb 	bl	8000418 <__aeabi_f2d>
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	4ba0      	ldr	r3, [pc, #640]	; (80044a8 <get_motor_speed+0x2e8>)
 8004228:	f7fc fa78 	bl	800071c <__aeabi_ddiv>
 800422c:	4603      	mov	r3, r0
 800422e:	460c      	mov	r4, r1
 8004230:	4618      	mov	r0, r3
 8004232:	4621      	mov	r1, r4
 8004234:	a390      	add	r3, pc, #576	; (adr r3, 8004478 <get_motor_speed+0x2b8>)
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	f7fc f945 	bl	80004c8 <__aeabi_dmul>
 800423e:	4603      	mov	r3, r0
 8004240:	460c      	mov	r4, r1
 8004242:	4618      	mov	r0, r3
 8004244:	4621      	mov	r1, r4
 8004246:	f7fc fc01 	bl	8000a4c <__aeabi_d2f>
 800424a:	4602      	mov	r2, r0
 800424c:	4b97      	ldr	r3, [pc, #604]	; (80044ac <get_motor_speed+0x2ec>)
 800424e:	601a      	str	r2, [r3, #0]
	position_L = ((float)LeftValueOfPulseNum)/1685.0*0.6283;
 8004250:	4b92      	ldr	r3, [pc, #584]	; (800449c <get_motor_speed+0x2dc>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7fc fd03 	bl	8000c60 <__aeabi_i2f>
 800425a:	4603      	mov	r3, r0
 800425c:	4618      	mov	r0, r3
 800425e:	f7fc f8db 	bl	8000418 <__aeabi_f2d>
 8004262:	a387      	add	r3, pc, #540	; (adr r3, 8004480 <get_motor_speed+0x2c0>)
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	f7fc fa58 	bl	800071c <__aeabi_ddiv>
 800426c:	4603      	mov	r3, r0
 800426e:	460c      	mov	r4, r1
 8004270:	4618      	mov	r0, r3
 8004272:	4621      	mov	r1, r4
 8004274:	a380      	add	r3, pc, #512	; (adr r3, 8004478 <get_motor_speed+0x2b8>)
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	f7fc f925 	bl	80004c8 <__aeabi_dmul>
 800427e:	4603      	mov	r3, r0
 8004280:	460c      	mov	r4, r1
 8004282:	4618      	mov	r0, r3
 8004284:	4621      	mov	r1, r4
 8004286:	f7fc fbe1 	bl	8000a4c <__aeabi_d2f>
 800428a:	4602      	mov	r2, r0
 800428c:	4b88      	ldr	r3, [pc, #544]	; (80044b0 <get_motor_speed+0x2f0>)
 800428e:	601a      	str	r2, [r3, #0]
//	speed_R= ((float)RightValueOPulseNum)*200.0/2528.0*0.6283;
//	speed_L= ((float)LeftValueOfPulseNum)*200.0/1685.0*0.6283;
	speed_R = position_R*200;
 8004290:	4b86      	ldr	r3, [pc, #536]	; (80044ac <get_motor_speed+0x2ec>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4987      	ldr	r1, [pc, #540]	; (80044b4 <get_motor_speed+0x2f4>)
 8004296:	4618      	mov	r0, r3
 8004298:	f7fc fd36 	bl	8000d08 <__aeabi_fmul>
 800429c:	4603      	mov	r3, r0
 800429e:	461a      	mov	r2, r3
 80042a0:	4b85      	ldr	r3, [pc, #532]	; (80044b8 <get_motor_speed+0x2f8>)
 80042a2:	601a      	str	r2, [r3, #0]
	speed_L = position_L*200;
 80042a4:	4b82      	ldr	r3, [pc, #520]	; (80044b0 <get_motor_speed+0x2f0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4982      	ldr	r1, [pc, #520]	; (80044b4 <get_motor_speed+0x2f4>)
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fc fd2c 	bl	8000d08 <__aeabi_fmul>
 80042b0:	4603      	mov	r3, r0
 80042b2:	461a      	mov	r2, r3
 80042b4:	4b81      	ldr	r3, [pc, #516]	; (80044bc <get_motor_speed+0x2fc>)
 80042b6:	601a      	str	r2, [r3, #0]
	theta = theta+(-2.439024*position_L+2.439024*position_R);
 80042b8:	4b81      	ldr	r3, [pc, #516]	; (80044c0 <get_motor_speed+0x300>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fc f8ab 	bl	8000418 <__aeabi_f2d>
 80042c2:	4604      	mov	r4, r0
 80042c4:	460d      	mov	r5, r1
 80042c6:	4b7a      	ldr	r3, [pc, #488]	; (80044b0 <get_motor_speed+0x2f0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fc f8a4 	bl	8000418 <__aeabi_f2d>
 80042d0:	a36d      	add	r3, pc, #436	; (adr r3, 8004488 <get_motor_speed+0x2c8>)
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f7fc f8f7 	bl	80004c8 <__aeabi_dmul>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4690      	mov	r8, r2
 80042e0:	4699      	mov	r9, r3
 80042e2:	4b72      	ldr	r3, [pc, #456]	; (80044ac <get_motor_speed+0x2ec>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fc f896 	bl	8000418 <__aeabi_f2d>
 80042ec:	a368      	add	r3, pc, #416	; (adr r3, 8004490 <get_motor_speed+0x2d0>)
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	f7fc f8e9 	bl	80004c8 <__aeabi_dmul>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4640      	mov	r0, r8
 80042fc:	4649      	mov	r1, r9
 80042fe:	f7fb ff2d 	bl	800015c <__adddf3>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4620      	mov	r0, r4
 8004308:	4629      	mov	r1, r5
 800430a:	f7fb ff27 	bl	800015c <__adddf3>
 800430e:	4603      	mov	r3, r0
 8004310:	460c      	mov	r4, r1
 8004312:	4618      	mov	r0, r3
 8004314:	4621      	mov	r1, r4
 8004316:	f7fc fb99 	bl	8000a4c <__aeabi_d2f>
 800431a:	4602      	mov	r2, r0
 800431c:	4b68      	ldr	r3, [pc, #416]	; (80044c0 <get_motor_speed+0x300>)
 800431e:	601a      	str	r2, [r3, #0]
	float x = sin(theta);
 8004320:	4b67      	ldr	r3, [pc, #412]	; (80044c0 <get_motor_speed+0x300>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7fc f877 	bl	8000418 <__aeabi_f2d>
 800432a:	4603      	mov	r3, r0
 800432c:	460c      	mov	r4, r1
 800432e:	4618      	mov	r0, r3
 8004330:	4621      	mov	r1, r4
 8004332:	f000 fd01 	bl	8004d38 <sin>
 8004336:	4603      	mov	r3, r0
 8004338:	460c      	mov	r4, r1
 800433a:	4618      	mov	r0, r3
 800433c:	4621      	mov	r1, r4
 800433e:	f7fc fb85 	bl	8000a4c <__aeabi_d2f>
 8004342:	4603      	mov	r3, r0
 8004344:	607b      	str	r3, [r7, #4]
	float y = cos(theta);
 8004346:	4b5e      	ldr	r3, [pc, #376]	; (80044c0 <get_motor_speed+0x300>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fc f864 	bl	8000418 <__aeabi_f2d>
 8004350:	4603      	mov	r3, r0
 8004352:	460c      	mov	r4, r1
 8004354:	4618      	mov	r0, r3
 8004356:	4621      	mov	r1, r4
 8004358:	f000 fcb8 	bl	8004ccc <cos>
 800435c:	4603      	mov	r3, r0
 800435e:	460c      	mov	r4, r1
 8004360:	4618      	mov	r0, r3
 8004362:	4621      	mov	r1, r4
 8004364:	f7fc fb72 	bl	8000a4c <__aeabi_d2f>
 8004368:	4603      	mov	r3, r0
 800436a:	603b      	str	r3, [r7, #0]
	x_position =x_position + x*(0.5*position_R+0.5*position_L);
 800436c:	4b55      	ldr	r3, [pc, #340]	; (80044c4 <get_motor_speed+0x304>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7fc f851 	bl	8000418 <__aeabi_f2d>
 8004376:	4604      	mov	r4, r0
 8004378:	460d      	mov	r5, r1
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fc f84c 	bl	8000418 <__aeabi_f2d>
 8004380:	4680      	mov	r8, r0
 8004382:	4689      	mov	r9, r1
 8004384:	4b49      	ldr	r3, [pc, #292]	; (80044ac <get_motor_speed+0x2ec>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f7fc f845 	bl	8000418 <__aeabi_f2d>
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	4b4d      	ldr	r3, [pc, #308]	; (80044c8 <get_motor_speed+0x308>)
 8004394:	f7fc f898 	bl	80004c8 <__aeabi_dmul>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4692      	mov	sl, r2
 800439e:	469b      	mov	fp, r3
 80043a0:	4b43      	ldr	r3, [pc, #268]	; (80044b0 <get_motor_speed+0x2f0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fc f837 	bl	8000418 <__aeabi_f2d>
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	4b46      	ldr	r3, [pc, #280]	; (80044c8 <get_motor_speed+0x308>)
 80043b0:	f7fc f88a 	bl	80004c8 <__aeabi_dmul>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4650      	mov	r0, sl
 80043ba:	4659      	mov	r1, fp
 80043bc:	f7fb fece 	bl	800015c <__adddf3>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4640      	mov	r0, r8
 80043c6:	4649      	mov	r1, r9
 80043c8:	f7fc f87e 	bl	80004c8 <__aeabi_dmul>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4620      	mov	r0, r4
 80043d2:	4629      	mov	r1, r5
 80043d4:	f7fb fec2 	bl	800015c <__adddf3>
 80043d8:	4603      	mov	r3, r0
 80043da:	460c      	mov	r4, r1
 80043dc:	4618      	mov	r0, r3
 80043de:	4621      	mov	r1, r4
 80043e0:	f7fc fb34 	bl	8000a4c <__aeabi_d2f>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b37      	ldr	r3, [pc, #220]	; (80044c4 <get_motor_speed+0x304>)
 80043e8:	601a      	str	r2, [r3, #0]
	y_position =y_position + y*(0.5*position_R+0.5*position_L);
 80043ea:	4b38      	ldr	r3, [pc, #224]	; (80044cc <get_motor_speed+0x30c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fc f812 	bl	8000418 <__aeabi_f2d>
 80043f4:	4604      	mov	r4, r0
 80043f6:	460d      	mov	r5, r1
 80043f8:	6838      	ldr	r0, [r7, #0]
 80043fa:	f7fc f80d 	bl	8000418 <__aeabi_f2d>
 80043fe:	4680      	mov	r8, r0
 8004400:	4689      	mov	r9, r1
 8004402:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <get_motor_speed+0x2ec>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fc f806 	bl	8000418 <__aeabi_f2d>
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	4b2d      	ldr	r3, [pc, #180]	; (80044c8 <get_motor_speed+0x308>)
 8004412:	f7fc f859 	bl	80004c8 <__aeabi_dmul>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4692      	mov	sl, r2
 800441c:	469b      	mov	fp, r3
 800441e:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <get_motor_speed+0x2f0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fb fff8 	bl	8000418 <__aeabi_f2d>
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	4b26      	ldr	r3, [pc, #152]	; (80044c8 <get_motor_speed+0x308>)
 800442e:	f7fc f84b 	bl	80004c8 <__aeabi_dmul>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4650      	mov	r0, sl
 8004438:	4659      	mov	r1, fp
 800443a:	f7fb fe8f 	bl	800015c <__adddf3>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4640      	mov	r0, r8
 8004444:	4649      	mov	r1, r9
 8004446:	f7fc f83f 	bl	80004c8 <__aeabi_dmul>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4620      	mov	r0, r4
 8004450:	4629      	mov	r1, r5
 8004452:	f7fb fe83 	bl	800015c <__adddf3>
 8004456:	4603      	mov	r3, r0
 8004458:	460c      	mov	r4, r1
 800445a:	4618      	mov	r0, r3
 800445c:	4621      	mov	r1, r4
 800445e:	f7fc faf5 	bl	8000a4c <__aeabi_d2f>
 8004462:	4602      	mov	r2, r0
 8004464:	4b19      	ldr	r3, [pc, #100]	; (80044cc <get_motor_speed+0x30c>)
 8004466:	601a      	str	r2, [r3, #0]
}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004472:	bf00      	nop
 8004474:	f3af 8000 	nop.w
 8004478:	9a027525 	.word	0x9a027525
 800447c:	3fe41b08 	.word	0x3fe41b08
 8004480:	00000000 	.word	0x00000000
 8004484:	409a5400 	.word	0x409a5400
 8004488:	03d145d8 	.word	0x03d145d8
 800448c:	c003831f 	.word	0xc003831f
 8004490:	03d145d8 	.word	0x03d145d8
 8004494:	4003831f 	.word	0x4003831f
 8004498:	20000164 	.word	0x20000164
 800449c:	200000d4 	.word	0x200000d4
 80044a0:	20000124 	.word	0x20000124
 80044a4:	200000d8 	.word	0x200000d8
 80044a8:	40a3c000 	.word	0x40a3c000
 80044ac:	200000e8 	.word	0x200000e8
 80044b0:	200000e4 	.word	0x200000e4
 80044b4:	43480000 	.word	0x43480000
 80044b8:	200000dc 	.word	0x200000dc
 80044bc:	200000e0 	.word	0x200000e0
 80044c0:	200002f0 	.word	0x200002f0
 80044c4:	200002ec 	.word	0x200002ec
 80044c8:	3fe00000 	.word	0x3fe00000
 80044cc:	200002f4 	.word	0x200002f4

080044d0 <my_one_step>:

//static uint8_t data[30];
//uint32_t counter;
//uint32_t PWM=0;
void my_one_step(){
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
	static uint32_t wakeup_counter = 0;
	int left_PWMvalue,right_PWMvalue;
//	int PWMvalue;
//	static uint32_t i = 0;
	get_motor_speed();
 80044d6:	f7ff fe73 	bl	80041c0 <get_motor_speed>
//	PWMvalue = PID_R_motor(ForwardSpeed,speed_R);
//	PWMvalue = PID_L_motor(ForwardSpeed,speed_L);
//	if(i<2000){i++;}else{PWMvalue+=3000;}
	static decoulpe_TypeDef decouple_speed;
	decoupling(ForwardSpeed, RollSpeed, &decouple_speed);
 80044da:	4b53      	ldr	r3, [pc, #332]	; (8004628 <my_one_step+0x158>)
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	4b53      	ldr	r3, [pc, #332]	; (800462c <my_one_step+0x15c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a53      	ldr	r2, [pc, #332]	; (8004630 <my_one_step+0x160>)
 80044e4:	4619      	mov	r1, r3
 80044e6:	f7ff f8b7 	bl	8003658 <decoupling>
	left_PWMvalue = PID_L_motor(decouple_speed.Speed_L,speed_L);
 80044ea:	4b51      	ldr	r3, [pc, #324]	; (8004630 <my_one_step+0x160>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	4b51      	ldr	r3, [pc, #324]	; (8004634 <my_one_step+0x164>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f7ff fa9b 	bl	8003a30 <PID_L_motor>
 80044fa:	6078      	str	r0, [r7, #4]
	right_PWMvalue = PID_R_motor(decouple_speed.Speed_R,speed_R);
 80044fc:	4b4c      	ldr	r3, [pc, #304]	; (8004630 <my_one_step+0x160>)
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	4b4d      	ldr	r3, [pc, #308]	; (8004638 <my_one_step+0x168>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4619      	mov	r1, r3
 8004506:	4610      	mov	r0, r2
 8004508:	f7ff fa0e 	bl	8003928 <PID_R_motor>
 800450c:	6038      	str	r0, [r7, #0]
	set_motor_PWM(left,left_PWMvalue);
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	2001      	movs	r0, #1
 8004512:	f7ff fe0d 	bl	8004130 <set_motor_PWM>
	set_motor_PWM(right,right_PWMvalue);
 8004516:	6839      	ldr	r1, [r7, #0]
 8004518:	2000      	movs	r0, #0
 800451a:	f7ff fe09 	bl	8004130 <set_motor_PWM>
	if((ForwardSpeed >= -0.03)&&(ForwardSpeed<=0.03)&&(RollSpeed >=-0.03)&&(RollSpeed<=0.03)){
 800451e:	4b42      	ldr	r3, [pc, #264]	; (8004628 <my_one_step+0x158>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fb ff78 	bl	8000418 <__aeabi_f2d>
 8004528:	a33b      	add	r3, pc, #236	; (adr r3, 8004618 <my_one_step+0x148>)
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f7fc fa51 	bl	80009d4 <__aeabi_dcmpge>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d063      	beq.n	8004600 <my_one_step+0x130>
 8004538:	4b3b      	ldr	r3, [pc, #236]	; (8004628 <my_one_step+0x158>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f7fb ff6b 	bl	8000418 <__aeabi_f2d>
 8004542:	a337      	add	r3, pc, #220	; (adr r3, 8004620 <my_one_step+0x150>)
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f7fc fa3a 	bl	80009c0 <__aeabi_dcmple>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d056      	beq.n	8004600 <my_one_step+0x130>
 8004552:	4b36      	ldr	r3, [pc, #216]	; (800462c <my_one_step+0x15c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f7fb ff5e 	bl	8000418 <__aeabi_f2d>
 800455c:	a32e      	add	r3, pc, #184	; (adr r3, 8004618 <my_one_step+0x148>)
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	f7fc fa37 	bl	80009d4 <__aeabi_dcmpge>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d049      	beq.n	8004600 <my_one_step+0x130>
 800456c:	4b2f      	ldr	r3, [pc, #188]	; (800462c <my_one_step+0x15c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f7fb ff51 	bl	8000418 <__aeabi_f2d>
 8004576:	a32a      	add	r3, pc, #168	; (adr r3, 8004620 <my_one_step+0x150>)
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	f7fc fa20 	bl	80009c0 <__aeabi_dcmple>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d03c      	beq.n	8004600 <my_one_step+0x130>
		if(((speed_R>=-0.03)&&(speed_R<=0.03))||((speed_L>=-0.03)&&(speed_L<=0.03))){
 8004586:	4b2c      	ldr	r3, [pc, #176]	; (8004638 <my_one_step+0x168>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fb ff44 	bl	8000418 <__aeabi_f2d>
 8004590:	a321      	add	r3, pc, #132	; (adr r3, 8004618 <my_one_step+0x148>)
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	f7fc fa1d 	bl	80009d4 <__aeabi_dcmpge>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00c      	beq.n	80045ba <my_one_step+0xea>
 80045a0:	4b25      	ldr	r3, [pc, #148]	; (8004638 <my_one_step+0x168>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fb ff37 	bl	8000418 <__aeabi_f2d>
 80045aa:	a31d      	add	r3, pc, #116	; (adr r3, 8004620 <my_one_step+0x150>)
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	f7fc fa06 	bl	80009c0 <__aeabi_dcmple>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d11b      	bne.n	80045f2 <my_one_step+0x122>
 80045ba:	4b1e      	ldr	r3, [pc, #120]	; (8004634 <my_one_step+0x164>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fb ff2a 	bl	8000418 <__aeabi_f2d>
 80045c4:	a314      	add	r3, pc, #80	; (adr r3, 8004618 <my_one_step+0x148>)
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f7fc fa03 	bl	80009d4 <__aeabi_dcmpge>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d100      	bne.n	80045d6 <my_one_step+0x106>
 80045d4:	e01a      	b.n	800460c <my_one_step+0x13c>
 80045d6:	4b17      	ldr	r3, [pc, #92]	; (8004634 <my_one_step+0x164>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fb ff1c 	bl	8000418 <__aeabi_f2d>
 80045e0:	a30f      	add	r3, pc, #60	; (adr r3, 8004620 <my_one_step+0x150>)
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f7fc f9eb 	bl	80009c0 <__aeabi_dcmple>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d100      	bne.n	80045f2 <my_one_step+0x122>
 80045f0:	e00c      	b.n	800460c <my_one_step+0x13c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80045f2:	2201      	movs	r2, #1
 80045f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045f8:	4810      	ldr	r0, [pc, #64]	; (800463c <my_one_step+0x16c>)
 80045fa:	f7fd fa4b 	bl	8001a94 <HAL_GPIO_WritePin>
		if(((speed_R>=-0.03)&&(speed_R<=0.03))||((speed_L>=-0.03)&&(speed_L<=0.03))){
 80045fe:	e005      	b.n	800460c <my_one_step+0x13c>
		}
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8004600:	2200      	movs	r2, #0
 8004602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004606:	480d      	ldr	r0, [pc, #52]	; (800463c <my_one_step+0x16c>)
 8004608:	f7fd fa44 	bl	8001a94 <HAL_GPIO_WritePin>
//	}
//	sprintf(data,"%2.4f\n",speed_L);
//	HAL_UART_Transmit(&huart1, data, strlen(data), 0x05);


}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	f3af 8000 	nop.w
 8004618:	eb851eb8 	.word	0xeb851eb8
 800461c:	bf9eb851 	.word	0xbf9eb851
 8004620:	eb851eb8 	.word	0xeb851eb8
 8004624:	3f9eb851 	.word	0x3f9eb851
 8004628:	20000114 	.word	0x20000114
 800462c:	20000048 	.word	0x20000048
 8004630:	200000ec 	.word	0x200000ec
 8004634:	200000e0 	.word	0x200000e0
 8004638:	200000dc 	.word	0x200000dc
 800463c:	40010800 	.word	0x40010800

08004640 <my_uart_init>:

static uint8_t rec_data_FIFO[20];
static uint8_t rec_data[10];
float ForwardSpeed = 0,RollSpeed = 0.5;
static FloatToUnsignedChar FTUC;
void my_uart_init(){
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, rec_data_FIFO, 20);
 8004644:	2214      	movs	r2, #20
 8004646:	4903      	ldr	r1, [pc, #12]	; (8004654 <my_uart_init+0x14>)
 8004648:	4803      	ldr	r0, [pc, #12]	; (8004658 <my_uart_init+0x18>)
 800464a:	f7fe fb9d 	bl	8002d88 <HAL_UART_Receive_DMA>
}
 800464e:	bf00      	nop
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	200000f4 	.word	0x200000f4
 8004658:	2000022c 	.word	0x2000022c

0800465c <transfer_data_old>:

void transfer_data_old(){
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
	if((rec_data[0]==0xff)&&(rec_data[9]==0xff)){
 8004660:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <transfer_data_old+0x6c>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2bff      	cmp	r3, #255	; 0xff
 8004666:	d12b      	bne.n	80046c0 <transfer_data_old+0x64>
 8004668:	4b17      	ldr	r3, [pc, #92]	; (80046c8 <transfer_data_old+0x6c>)
 800466a:	7a5b      	ldrb	r3, [r3, #9]
 800466c:	2bff      	cmp	r3, #255	; 0xff
 800466e:	d127      	bne.n	80046c0 <transfer_data_old+0x64>
		FTUC.U8.low = rec_data[1];
 8004670:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <transfer_data_old+0x6c>)
 8004672:	785a      	ldrb	r2, [r3, #1]
 8004674:	4b15      	ldr	r3, [pc, #84]	; (80046cc <transfer_data_old+0x70>)
 8004676:	701a      	strb	r2, [r3, #0]
		FTUC.U8.mlow = rec_data[2];
 8004678:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <transfer_data_old+0x6c>)
 800467a:	789a      	ldrb	r2, [r3, #2]
 800467c:	4b13      	ldr	r3, [pc, #76]	; (80046cc <transfer_data_old+0x70>)
 800467e:	705a      	strb	r2, [r3, #1]
		FTUC.U8.mhigh = rec_data[3];
 8004680:	4b11      	ldr	r3, [pc, #68]	; (80046c8 <transfer_data_old+0x6c>)
 8004682:	78da      	ldrb	r2, [r3, #3]
 8004684:	4b11      	ldr	r3, [pc, #68]	; (80046cc <transfer_data_old+0x70>)
 8004686:	709a      	strb	r2, [r3, #2]
		FTUC.U8.high = rec_data[4];
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <transfer_data_old+0x6c>)
 800468a:	791a      	ldrb	r2, [r3, #4]
 800468c:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <transfer_data_old+0x70>)
 800468e:	70da      	strb	r2, [r3, #3]
		ForwardSpeed = FTUC.F32;
 8004690:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <transfer_data_old+0x70>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a0e      	ldr	r2, [pc, #56]	; (80046d0 <transfer_data_old+0x74>)
 8004696:	6013      	str	r3, [r2, #0]
		FTUC.U8.low = rec_data[5];
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <transfer_data_old+0x6c>)
 800469a:	795a      	ldrb	r2, [r3, #5]
 800469c:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <transfer_data_old+0x70>)
 800469e:	701a      	strb	r2, [r3, #0]
		FTUC.U8.mlow = rec_data[6];
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <transfer_data_old+0x6c>)
 80046a2:	799a      	ldrb	r2, [r3, #6]
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <transfer_data_old+0x70>)
 80046a6:	705a      	strb	r2, [r3, #1]
		FTUC.U8.mhigh = rec_data[7];
 80046a8:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <transfer_data_old+0x6c>)
 80046aa:	79da      	ldrb	r2, [r3, #7]
 80046ac:	4b07      	ldr	r3, [pc, #28]	; (80046cc <transfer_data_old+0x70>)
 80046ae:	709a      	strb	r2, [r3, #2]
		FTUC.U8.high = rec_data[8];
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <transfer_data_old+0x6c>)
 80046b2:	7a1a      	ldrb	r2, [r3, #8]
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <transfer_data_old+0x70>)
 80046b6:	70da      	strb	r2, [r3, #3]
		RollSpeed = FTUC.F32;
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <transfer_data_old+0x70>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a05      	ldr	r2, [pc, #20]	; (80046d4 <transfer_data_old+0x78>)
 80046be:	6013      	str	r3, [r2, #0]
	}
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr
 80046c8:	20000108 	.word	0x20000108
 80046cc:	20000118 	.word	0x20000118
 80046d0:	20000114 	.word	0x20000114
 80046d4:	20000048 	.word	0x20000048

080046d8 <HAL_UART_RxHalfCpltCallback>:
				}
			}
	}
}

void HAL_UART_RxHalfCpltCallback  ( UART_HandleTypeDef *  huart ){
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance){
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <HAL_UART_RxHalfCpltCallback+0x40>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d110      	bne.n	800470e <HAL_UART_RxHalfCpltCallback+0x36>
		for(uint8_t i =0;i<10;i++){
 80046ec:	2300      	movs	r3, #0
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	e00a      	b.n	8004708 <HAL_UART_RxHalfCpltCallback+0x30>
			rec_data[i]=rec_data_FIFO[i];
 80046f2:	7bfa      	ldrb	r2, [r7, #15]
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	4909      	ldr	r1, [pc, #36]	; (800471c <HAL_UART_RxHalfCpltCallback+0x44>)
 80046f8:	5c89      	ldrb	r1, [r1, r2]
 80046fa:	4a09      	ldr	r2, [pc, #36]	; (8004720 <HAL_UART_RxHalfCpltCallback+0x48>)
 80046fc:	54d1      	strb	r1, [r2, r3]
			transfer_data_old();
 80046fe:	f7ff ffad 	bl	800465c <transfer_data_old>
		for(uint8_t i =0;i<10;i++){
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	3301      	adds	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	2b09      	cmp	r3, #9
 800470c:	d9f1      	bls.n	80046f2 <HAL_UART_RxHalfCpltCallback+0x1a>
		}
	}
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	2000022c 	.word	0x2000022c
 800471c:	200000f4 	.word	0x200000f4
 8004720:	20000108 	.word	0x20000108

08004724 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback  ( UART_HandleTypeDef *  huart ){
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance){
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b0d      	ldr	r3, [pc, #52]	; (8004768 <HAL_UART_RxCpltCallback+0x44>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d112      	bne.n	800475e <HAL_UART_RxCpltCallback+0x3a>
		for(uint8_t i =0;i<10;i++){
 8004738:	2300      	movs	r3, #0
 800473a:	73fb      	strb	r3, [r7, #15]
 800473c:	e00c      	b.n	8004758 <HAL_UART_RxCpltCallback+0x34>
			rec_data[i]=rec_data_FIFO[i+10];
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	f103 020a 	add.w	r2, r3, #10
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	4909      	ldr	r1, [pc, #36]	; (800476c <HAL_UART_RxCpltCallback+0x48>)
 8004748:	5c89      	ldrb	r1, [r1, r2]
 800474a:	4a09      	ldr	r2, [pc, #36]	; (8004770 <HAL_UART_RxCpltCallback+0x4c>)
 800474c:	54d1      	strb	r1, [r2, r3]
			transfer_data_old();
 800474e:	f7ff ff85 	bl	800465c <transfer_data_old>
		for(uint8_t i =0;i<10;i++){
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	3301      	adds	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	2b09      	cmp	r3, #9
 800475c:	d9ef      	bls.n	800473e <HAL_UART_RxCpltCallback+0x1a>
		}
	}
}
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	2000022c 	.word	0x2000022c
 800476c:	200000f4 	.word	0x200000f4
 8004770:	20000108 	.word	0x20000108

08004774 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800477a:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <HAL_MspInit+0x5c>)
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	4a14      	ldr	r2, [pc, #80]	; (80047d0 <HAL_MspInit+0x5c>)
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	6193      	str	r3, [r2, #24]
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <HAL_MspInit+0x5c>)
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004792:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <HAL_MspInit+0x5c>)
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <HAL_MspInit+0x5c>)
 8004798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479c:	61d3      	str	r3, [r2, #28]
 800479e:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <HAL_MspInit+0x5c>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	607b      	str	r3, [r7, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <HAL_MspInit+0x60>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	4a04      	ldr	r2, [pc, #16]	; (80047d4 <HAL_MspInit+0x60>)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40010000 	.word	0x40010000

080047d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a12      	ldr	r2, [pc, #72]	; (8004830 <HAL_TIM_PWM_MspInit+0x58>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10c      	bne.n	8004804 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <HAL_TIM_PWM_MspInit+0x5c>)
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	4a11      	ldr	r2, [pc, #68]	; (8004834 <HAL_TIM_PWM_MspInit+0x5c>)
 80047f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047f4:	6193      	str	r3, [r2, #24]
 80047f6:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <HAL_TIM_PWM_MspInit+0x5c>)
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004802:	e010      	b.n	8004826 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480c:	d10b      	bne.n	8004826 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800480e:	4b09      	ldr	r3, [pc, #36]	; (8004834 <HAL_TIM_PWM_MspInit+0x5c>)
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <HAL_TIM_PWM_MspInit+0x5c>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	61d3      	str	r3, [r2, #28]
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_TIM_PWM_MspInit+0x5c>)
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	60bb      	str	r3, [r7, #8]
 8004824:	68bb      	ldr	r3, [r7, #8]
}
 8004826:	bf00      	nop
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40021000 	.word	0x40021000

08004838 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	; 0x28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004840:	f107 0318 	add.w	r3, r7, #24
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a2a      	ldr	r2, [pc, #168]	; (80048fc <HAL_TIM_Encoder_MspInit+0xc4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d124      	bne.n	80048a2 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004858:	4b29      	ldr	r3, [pc, #164]	; (8004900 <HAL_TIM_Encoder_MspInit+0xc8>)
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	4a28      	ldr	r2, [pc, #160]	; (8004900 <HAL_TIM_Encoder_MspInit+0xc8>)
 800485e:	f043 0302 	orr.w	r3, r3, #2
 8004862:	61d3      	str	r3, [r2, #28]
 8004864:	4b26      	ldr	r3, [pc, #152]	; (8004900 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004870:	4b23      	ldr	r3, [pc, #140]	; (8004900 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	4a22      	ldr	r2, [pc, #136]	; (8004900 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004876:	f043 0304 	orr.w	r3, r3, #4
 800487a:	6193      	str	r3, [r2, #24]
 800487c:	4b20      	ldr	r3, [pc, #128]	; (8004900 <HAL_TIM_Encoder_MspInit+0xc8>)
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = A_Left_Pin|B_Left_Pin;
 8004888:	23c0      	movs	r3, #192	; 0xc0
 800488a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004890:	2301      	movs	r3, #1
 8004892:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004894:	f107 0318 	add.w	r3, r7, #24
 8004898:	4619      	mov	r1, r3
 800489a:	481a      	ldr	r0, [pc, #104]	; (8004904 <HAL_TIM_Encoder_MspInit+0xcc>)
 800489c:	f7fc ffa0 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80048a0:	e028      	b.n	80048f4 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a18      	ldr	r2, [pc, #96]	; (8004908 <HAL_TIM_Encoder_MspInit+0xd0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d123      	bne.n	80048f4 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80048ac:	4b14      	ldr	r3, [pc, #80]	; (8004900 <HAL_TIM_Encoder_MspInit+0xc8>)
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	4a13      	ldr	r2, [pc, #76]	; (8004900 <HAL_TIM_Encoder_MspInit+0xc8>)
 80048b2:	f043 0304 	orr.w	r3, r3, #4
 80048b6:	61d3      	str	r3, [r2, #28]
 80048b8:	4b11      	ldr	r3, [pc, #68]	; (8004900 <HAL_TIM_Encoder_MspInit+0xc8>)
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c4:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <HAL_TIM_Encoder_MspInit+0xc8>)
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	4a0d      	ldr	r2, [pc, #52]	; (8004900 <HAL_TIM_Encoder_MspInit+0xc8>)
 80048ca:	f043 0308 	orr.w	r3, r3, #8
 80048ce:	6193      	str	r3, [r2, #24]
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_TIM_Encoder_MspInit+0xc8>)
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_Right_Pin|B_Right_Pin;
 80048dc:	23c0      	movs	r3, #192	; 0xc0
 80048de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048e4:	2301      	movs	r3, #1
 80048e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048e8:	f107 0318 	add.w	r3, r7, #24
 80048ec:	4619      	mov	r1, r3
 80048ee:	4807      	ldr	r0, [pc, #28]	; (800490c <HAL_TIM_Encoder_MspInit+0xd4>)
 80048f0:	f7fc ff76 	bl	80017e0 <HAL_GPIO_Init>
}
 80048f4:	bf00      	nop
 80048f6:	3728      	adds	r7, #40	; 0x28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40000400 	.word	0x40000400
 8004900:	40021000 	.word	0x40021000
 8004904:	40010800 	.word	0x40010800
 8004908:	40000800 	.word	0x40000800
 800490c:	40010c00 	.word	0x40010c00

08004910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004918:	f107 0310 	add.w	r3, r7, #16
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1f      	ldr	r2, [pc, #124]	; (80049a8 <HAL_TIM_MspPostInit+0x98>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d119      	bne.n	8004964 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004930:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <HAL_TIM_MspPostInit+0x9c>)
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <HAL_TIM_MspPostInit+0x9c>)
 8004936:	f043 0304 	orr.w	r3, r3, #4
 800493a:	6193      	str	r3, [r2, #24]
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <HAL_TIM_MspPostInit+0x9c>)
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWMOfLeft_Pin;
 8004948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800494c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800494e:	2302      	movs	r3, #2
 8004950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004952:	2302      	movs	r3, #2
 8004954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOfLeft_GPIO_Port, &GPIO_InitStruct);
 8004956:	f107 0310 	add.w	r3, r7, #16
 800495a:	4619      	mov	r1, r3
 800495c:	4814      	ldr	r0, [pc, #80]	; (80049b0 <HAL_TIM_MspPostInit+0xa0>)
 800495e:	f7fc ff3f 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004962:	e01c      	b.n	800499e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496c:	d117      	bne.n	800499e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800496e:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <HAL_TIM_MspPostInit+0x9c>)
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <HAL_TIM_MspPostInit+0x9c>)
 8004974:	f043 0304 	orr.w	r3, r3, #4
 8004978:	6193      	str	r3, [r2, #24]
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <HAL_TIM_MspPostInit+0x9c>)
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMOfRight_Pin;
 8004986:	2308      	movs	r3, #8
 8004988:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498a:	2302      	movs	r3, #2
 800498c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498e:	2302      	movs	r3, #2
 8004990:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOfRight_GPIO_Port, &GPIO_InitStruct);
 8004992:	f107 0310 	add.w	r3, r7, #16
 8004996:	4619      	mov	r1, r3
 8004998:	4805      	ldr	r0, [pc, #20]	; (80049b0 <HAL_TIM_MspPostInit+0xa0>)
 800499a:	f7fc ff21 	bl	80017e0 <HAL_GPIO_Init>
}
 800499e:	bf00      	nop
 80049a0:	3720      	adds	r7, #32
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40010800 	.word	0x40010800

080049b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049bc:	f107 0310 	add.w	r3, r7, #16
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a48      	ldr	r2, [pc, #288]	; (8004af0 <HAL_UART_MspInit+0x13c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	f040 8088 	bne.w	8004ae6 <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049d6:	4b47      	ldr	r3, [pc, #284]	; (8004af4 <HAL_UART_MspInit+0x140>)
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	4a46      	ldr	r2, [pc, #280]	; (8004af4 <HAL_UART_MspInit+0x140>)
 80049dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049e0:	6193      	str	r3, [r2, #24]
 80049e2:	4b44      	ldr	r3, [pc, #272]	; (8004af4 <HAL_UART_MspInit+0x140>)
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ee:	4b41      	ldr	r3, [pc, #260]	; (8004af4 <HAL_UART_MspInit+0x140>)
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	4a40      	ldr	r2, [pc, #256]	; (8004af4 <HAL_UART_MspInit+0x140>)
 80049f4:	f043 0304 	orr.w	r3, r3, #4
 80049f8:	6193      	str	r3, [r2, #24]
 80049fa:	4b3e      	ldr	r3, [pc, #248]	; (8004af4 <HAL_UART_MspInit+0x140>)
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	60bb      	str	r3, [r7, #8]
 8004a04:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a10:	2303      	movs	r3, #3
 8004a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a14:	f107 0310 	add.w	r3, r7, #16
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4837      	ldr	r0, [pc, #220]	; (8004af8 <HAL_UART_MspInit+0x144>)
 8004a1c:	f7fc fee0 	bl	80017e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a2e:	f107 0310 	add.w	r3, r7, #16
 8004a32:	4619      	mov	r1, r3
 8004a34:	4830      	ldr	r0, [pc, #192]	; (8004af8 <HAL_UART_MspInit+0x144>)
 8004a36:	f7fc fed3 	bl	80017e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004a3a:	4b30      	ldr	r3, [pc, #192]	; (8004afc <HAL_UART_MspInit+0x148>)
 8004a3c:	4a30      	ldr	r2, [pc, #192]	; (8004b00 <HAL_UART_MspInit+0x14c>)
 8004a3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a40:	4b2e      	ldr	r3, [pc, #184]	; (8004afc <HAL_UART_MspInit+0x148>)
 8004a42:	2210      	movs	r2, #16
 8004a44:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a46:	4b2d      	ldr	r3, [pc, #180]	; (8004afc <HAL_UART_MspInit+0x148>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a4c:	4b2b      	ldr	r3, [pc, #172]	; (8004afc <HAL_UART_MspInit+0x148>)
 8004a4e:	2280      	movs	r2, #128	; 0x80
 8004a50:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a52:	4b2a      	ldr	r3, [pc, #168]	; (8004afc <HAL_UART_MspInit+0x148>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a58:	4b28      	ldr	r3, [pc, #160]	; (8004afc <HAL_UART_MspInit+0x148>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004a5e:	4b27      	ldr	r3, [pc, #156]	; (8004afc <HAL_UART_MspInit+0x148>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004a64:	4b25      	ldr	r3, [pc, #148]	; (8004afc <HAL_UART_MspInit+0x148>)
 8004a66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004a6c:	4823      	ldr	r0, [pc, #140]	; (8004afc <HAL_UART_MspInit+0x148>)
 8004a6e:	f7fc fc53 	bl	8001318 <HAL_DMA_Init>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8004a78:	f7ff fb1e 	bl	80040b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a1f      	ldr	r2, [pc, #124]	; (8004afc <HAL_UART_MspInit+0x148>)
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
 8004a82:	4a1e      	ldr	r2, [pc, #120]	; (8004afc <HAL_UART_MspInit+0x148>)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004a88:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <HAL_UART_MspInit+0x150>)
 8004a8a:	4a1f      	ldr	r2, [pc, #124]	; (8004b08 <HAL_UART_MspInit+0x154>)
 8004a8c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a8e:	4b1d      	ldr	r3, [pc, #116]	; (8004b04 <HAL_UART_MspInit+0x150>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a94:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <HAL_UART_MspInit+0x150>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a9a:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <HAL_UART_MspInit+0x150>)
 8004a9c:	2280      	movs	r2, #128	; 0x80
 8004a9e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004aa0:	4b18      	ldr	r3, [pc, #96]	; (8004b04 <HAL_UART_MspInit+0x150>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004aa6:	4b17      	ldr	r3, [pc, #92]	; (8004b04 <HAL_UART_MspInit+0x150>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004aac:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <HAL_UART_MspInit+0x150>)
 8004aae:	2220      	movs	r2, #32
 8004ab0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004ab2:	4b14      	ldr	r3, [pc, #80]	; (8004b04 <HAL_UART_MspInit+0x150>)
 8004ab4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ab8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004aba:	4812      	ldr	r0, [pc, #72]	; (8004b04 <HAL_UART_MspInit+0x150>)
 8004abc:	f7fc fc2c 	bl	8001318 <HAL_DMA_Init>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8004ac6:	f7ff faf7 	bl	80040b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a0d      	ldr	r2, [pc, #52]	; (8004b04 <HAL_UART_MspInit+0x150>)
 8004ace:	635a      	str	r2, [r3, #52]	; 0x34
 8004ad0:	4a0c      	ldr	r2, [pc, #48]	; (8004b04 <HAL_UART_MspInit+0x150>)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2100      	movs	r1, #0
 8004ada:	2025      	movs	r0, #37	; 0x25
 8004adc:	f7fc fbe5 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ae0:	2025      	movs	r0, #37	; 0x25
 8004ae2:	f7fc fbfe 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004ae6:	bf00      	nop
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40013800 	.word	0x40013800
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40010800 	.word	0x40010800
 8004afc:	200001a4 	.word	0x200001a4
 8004b00:	40020044 	.word	0x40020044
 8004b04:	200001e8 	.word	0x200001e8
 8004b08:	40020058 	.word	0x40020058

08004b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr

08004b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b1c:	e7fe      	b.n	8004b1c <HardFault_Handler+0x4>

08004b1e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b22:	e7fe      	b.n	8004b22 <MemManage_Handler+0x4>

08004b24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b28:	e7fe      	b.n	8004b28 <BusFault_Handler+0x4>

08004b2a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b2e:	e7fe      	b.n	8004b2e <UsageFault_Handler+0x4>

08004b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b34:	bf00      	nop
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b40:	bf00      	nop
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b4c:	bf00      	nop
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr

08004b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint8_t flag =0;
	if(flag >=5 ){
 8004b58:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <SysTick_Handler+0x2c>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d905      	bls.n	8004b6c <SysTick_Handler+0x18>
		my_one_step();
 8004b60:	f7ff fcb6 	bl	80044d0 <my_one_step>
		flag =0;
 8004b64:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <SysTick_Handler+0x2c>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	e005      	b.n	8004b78 <SysTick_Handler+0x24>
	}else{
		flag++;
 8004b6c:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <SysTick_Handler+0x2c>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	3301      	adds	r3, #1
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	4b02      	ldr	r3, [pc, #8]	; (8004b80 <SysTick_Handler+0x2c>)
 8004b76:	701a      	strb	r2, [r3, #0]
	}
//	my_one_step();
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b78:	f7fc fa82 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b7c:	bf00      	nop
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	2000011c 	.word	0x2000011c

08004b84 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004b88:	4802      	ldr	r0, [pc, #8]	; (8004b94 <DMA1_Channel4_IRQHandler+0x10>)
 8004b8a:	f7fc fcf5 	bl	8001578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004b8e:	bf00      	nop
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	200001a4 	.word	0x200001a4

08004b98 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004b9c:	4802      	ldr	r0, [pc, #8]	; (8004ba8 <DMA1_Channel5_IRQHandler+0x10>)
 8004b9e:	f7fc fceb 	bl	8001578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004ba2:	bf00      	nop
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	200001e8 	.word	0x200001e8

08004bac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004bb0:	4802      	ldr	r0, [pc, #8]	; (8004bbc <USART1_IRQHandler+0x10>)
 8004bb2:	f7fe f969 	bl	8002e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004bb6:	bf00      	nop
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	2000022c 	.word	0x2000022c

08004bc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004bc4:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <SystemInit+0x5c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a14      	ldr	r2, [pc, #80]	; (8004c1c <SystemInit+0x5c>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004bd0:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <SystemInit+0x5c>)
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	4911      	ldr	r1, [pc, #68]	; (8004c1c <SystemInit+0x5c>)
 8004bd6:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <SystemInit+0x60>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004bdc:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <SystemInit+0x5c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a0e      	ldr	r2, [pc, #56]	; (8004c1c <SystemInit+0x5c>)
 8004be2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <SystemInit+0x5c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <SystemInit+0x5c>)
 8004bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bf6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004bf8:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <SystemInit+0x5c>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4a07      	ldr	r2, [pc, #28]	; (8004c1c <SystemInit+0x5c>)
 8004bfe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004c02:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <SystemInit+0x5c>)
 8004c06:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004c0a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004c0c:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <SystemInit+0x64>)
 8004c0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c12:	609a      	str	r2, [r3, #8]
#endif 
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	f8ff0000 	.word	0xf8ff0000
 8004c24:	e000ed00 	.word	0xe000ed00

08004c28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004c28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004c2a:	e003      	b.n	8004c34 <LoopCopyDataInit>

08004c2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004c2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004c30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004c32:	3104      	adds	r1, #4

08004c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004c34:	480a      	ldr	r0, [pc, #40]	; (8004c60 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004c38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004c3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004c3c:	d3f6      	bcc.n	8004c2c <CopyDataInit>
  ldr r2, =_sbss
 8004c3e:	4a0a      	ldr	r2, [pc, #40]	; (8004c68 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004c40:	e002      	b.n	8004c48 <LoopFillZerobss>

08004c42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004c42:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004c44:	f842 3b04 	str.w	r3, [r2], #4

08004c48 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004c48:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004c4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004c4c:	d3f9      	bcc.n	8004c42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004c4e:	f7ff ffb7 	bl	8004bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c52:	f000 f80f 	bl	8004c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c56:	f7fe ff6f 	bl	8003b38 <main>
  bx lr
 8004c5a:	4770      	bx	lr
  ldr r3, =_sidata
 8004c5c:	08005f38 	.word	0x08005f38
  ldr r0, =_sdata
 8004c60:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004c64:	20000050 	.word	0x20000050
  ldr r2, =_sbss
 8004c68:	20000050 	.word	0x20000050
  ldr r3, = _ebss
 8004c6c:	200002f8 	.word	0x200002f8

08004c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c70:	e7fe      	b.n	8004c70 <ADC1_2_IRQHandler>
	...

08004c74 <__libc_init_array>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	2500      	movs	r5, #0
 8004c78:	4e0c      	ldr	r6, [pc, #48]	; (8004cac <__libc_init_array+0x38>)
 8004c7a:	4c0d      	ldr	r4, [pc, #52]	; (8004cb0 <__libc_init_array+0x3c>)
 8004c7c:	1ba4      	subs	r4, r4, r6
 8004c7e:	10a4      	asrs	r4, r4, #2
 8004c80:	42a5      	cmp	r5, r4
 8004c82:	d109      	bne.n	8004c98 <__libc_init_array+0x24>
 8004c84:	f001 f844 	bl	8005d10 <_init>
 8004c88:	2500      	movs	r5, #0
 8004c8a:	4e0a      	ldr	r6, [pc, #40]	; (8004cb4 <__libc_init_array+0x40>)
 8004c8c:	4c0a      	ldr	r4, [pc, #40]	; (8004cb8 <__libc_init_array+0x44>)
 8004c8e:	1ba4      	subs	r4, r4, r6
 8004c90:	10a4      	asrs	r4, r4, #2
 8004c92:	42a5      	cmp	r5, r4
 8004c94:	d105      	bne.n	8004ca2 <__libc_init_array+0x2e>
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c9c:	4798      	blx	r3
 8004c9e:	3501      	adds	r5, #1
 8004ca0:	e7ee      	b.n	8004c80 <__libc_init_array+0xc>
 8004ca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ca6:	4798      	blx	r3
 8004ca8:	3501      	adds	r5, #1
 8004caa:	e7f2      	b.n	8004c92 <__libc_init_array+0x1e>
 8004cac:	08005f30 	.word	0x08005f30
 8004cb0:	08005f30 	.word	0x08005f30
 8004cb4:	08005f30 	.word	0x08005f30
 8004cb8:	08005f34 	.word	0x08005f34

08004cbc <memset>:
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4402      	add	r2, r0
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d100      	bne.n	8004cc6 <memset+0xa>
 8004cc4:	4770      	bx	lr
 8004cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cca:	e7f9      	b.n	8004cc0 <memset+0x4>

08004ccc <cos>:
 8004ccc:	b530      	push	{r4, r5, lr}
 8004cce:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <cos+0x64>)
 8004cd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	dc04      	bgt.n	8004ce4 <cos+0x18>
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f000 fa57 	bl	8005190 <__kernel_cos>
 8004ce2:	e006      	b.n	8004cf2 <cos+0x26>
 8004ce4:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <cos+0x68>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	dd05      	ble.n	8004cf6 <cos+0x2a>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	f7fb fa33 	bl	8000158 <__aeabi_dsub>
 8004cf2:	b007      	add	sp, #28
 8004cf4:	bd30      	pop	{r4, r5, pc}
 8004cf6:	aa02      	add	r2, sp, #8
 8004cf8:	f000 f85a 	bl	8004db0 <__ieee754_rem_pio2>
 8004cfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d00:	f000 0403 	and.w	r4, r0, #3
 8004d04:	2c01      	cmp	r4, #1
 8004d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d0a:	d008      	beq.n	8004d1e <cos+0x52>
 8004d0c:	2c02      	cmp	r4, #2
 8004d0e:	d00c      	beq.n	8004d2a <cos+0x5e>
 8004d10:	2c00      	cmp	r4, #0
 8004d12:	d0e4      	beq.n	8004cde <cos+0x12>
 8004d14:	2401      	movs	r4, #1
 8004d16:	9400      	str	r4, [sp, #0]
 8004d18:	f000 fe42 	bl	80059a0 <__kernel_sin>
 8004d1c:	e7e9      	b.n	8004cf2 <cos+0x26>
 8004d1e:	9400      	str	r4, [sp, #0]
 8004d20:	f000 fe3e 	bl	80059a0 <__kernel_sin>
 8004d24:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004d28:	e7e3      	b.n	8004cf2 <cos+0x26>
 8004d2a:	f000 fa31 	bl	8005190 <__kernel_cos>
 8004d2e:	e7f9      	b.n	8004d24 <cos+0x58>
 8004d30:	3fe921fb 	.word	0x3fe921fb
 8004d34:	7fefffff 	.word	0x7fefffff

08004d38 <sin>:
 8004d38:	b530      	push	{r4, r5, lr}
 8004d3a:	4a1a      	ldr	r2, [pc, #104]	; (8004da4 <sin+0x6c>)
 8004d3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004d40:	4293      	cmp	r3, r2
 8004d42:	b087      	sub	sp, #28
 8004d44:	dc06      	bgt.n	8004d54 <sin+0x1c>
 8004d46:	2300      	movs	r3, #0
 8004d48:	2200      	movs	r2, #0
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f000 fe27 	bl	80059a0 <__kernel_sin>
 8004d52:	e006      	b.n	8004d62 <sin+0x2a>
 8004d54:	4a14      	ldr	r2, [pc, #80]	; (8004da8 <sin+0x70>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	dd05      	ble.n	8004d66 <sin+0x2e>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	f7fb f9fb 	bl	8000158 <__aeabi_dsub>
 8004d62:	b007      	add	sp, #28
 8004d64:	bd30      	pop	{r4, r5, pc}
 8004d66:	aa02      	add	r2, sp, #8
 8004d68:	f000 f822 	bl	8004db0 <__ieee754_rem_pio2>
 8004d6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d70:	f000 0403 	and.w	r4, r0, #3
 8004d74:	2c01      	cmp	r4, #1
 8004d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d7a:	d005      	beq.n	8004d88 <sin+0x50>
 8004d7c:	2c02      	cmp	r4, #2
 8004d7e:	d006      	beq.n	8004d8e <sin+0x56>
 8004d80:	b964      	cbnz	r4, 8004d9c <sin+0x64>
 8004d82:	2401      	movs	r4, #1
 8004d84:	9400      	str	r4, [sp, #0]
 8004d86:	e7e2      	b.n	8004d4e <sin+0x16>
 8004d88:	f000 fa02 	bl	8005190 <__kernel_cos>
 8004d8c:	e7e9      	b.n	8004d62 <sin+0x2a>
 8004d8e:	2401      	movs	r4, #1
 8004d90:	9400      	str	r4, [sp, #0]
 8004d92:	f000 fe05 	bl	80059a0 <__kernel_sin>
 8004d96:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004d9a:	e7e2      	b.n	8004d62 <sin+0x2a>
 8004d9c:	f000 f9f8 	bl	8005190 <__kernel_cos>
 8004da0:	e7f9      	b.n	8004d96 <sin+0x5e>
 8004da2:	bf00      	nop
 8004da4:	3fe921fb 	.word	0x3fe921fb
 8004da8:	7fefffff 	.word	0x7fefffff
 8004dac:	00000000 	.word	0x00000000

08004db0 <__ieee754_rem_pio2>:
 8004db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db4:	4614      	mov	r4, r2
 8004db6:	4ac2      	ldr	r2, [pc, #776]	; (80050c0 <__ieee754_rem_pio2+0x310>)
 8004db8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004dbc:	4592      	cmp	sl, r2
 8004dbe:	b08d      	sub	sp, #52	; 0x34
 8004dc0:	468b      	mov	fp, r1
 8004dc2:	dc07      	bgt.n	8004dd4 <__ieee754_rem_pio2+0x24>
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e9c4 0100 	strd	r0, r1, [r4]
 8004dcc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004dd0:	2500      	movs	r5, #0
 8004dd2:	e023      	b.n	8004e1c <__ieee754_rem_pio2+0x6c>
 8004dd4:	4abb      	ldr	r2, [pc, #748]	; (80050c4 <__ieee754_rem_pio2+0x314>)
 8004dd6:	4592      	cmp	sl, r2
 8004dd8:	dc71      	bgt.n	8004ebe <__ieee754_rem_pio2+0x10e>
 8004dda:	a3ab      	add	r3, pc, #684	; (adr r3, 8005088 <__ieee754_rem_pio2+0x2d8>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	2900      	cmp	r1, #0
 8004de2:	4db9      	ldr	r5, [pc, #740]	; (80050c8 <__ieee754_rem_pio2+0x318>)
 8004de4:	dd36      	ble.n	8004e54 <__ieee754_rem_pio2+0xa4>
 8004de6:	f7fb f9b7 	bl	8000158 <__aeabi_dsub>
 8004dea:	45aa      	cmp	sl, r5
 8004dec:	4606      	mov	r6, r0
 8004dee:	460f      	mov	r7, r1
 8004df0:	d018      	beq.n	8004e24 <__ieee754_rem_pio2+0x74>
 8004df2:	a3a7      	add	r3, pc, #668	; (adr r3, 8005090 <__ieee754_rem_pio2+0x2e0>)
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f7fb f9ae 	bl	8000158 <__aeabi_dsub>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4630      	mov	r0, r6
 8004e02:	e9c4 2300 	strd	r2, r3, [r4]
 8004e06:	4639      	mov	r1, r7
 8004e08:	f7fb f9a6 	bl	8000158 <__aeabi_dsub>
 8004e0c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005090 <__ieee754_rem_pio2+0x2e0>)
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	f7fb f9a1 	bl	8000158 <__aeabi_dsub>
 8004e16:	2501      	movs	r5, #1
 8004e18:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	b00d      	add	sp, #52	; 0x34
 8004e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e24:	a39c      	add	r3, pc, #624	; (adr r3, 8005098 <__ieee754_rem_pio2+0x2e8>)
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	f7fb f995 	bl	8000158 <__aeabi_dsub>
 8004e2e:	a39c      	add	r3, pc, #624	; (adr r3, 80050a0 <__ieee754_rem_pio2+0x2f0>)
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	4606      	mov	r6, r0
 8004e36:	460f      	mov	r7, r1
 8004e38:	f7fb f98e 	bl	8000158 <__aeabi_dsub>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4630      	mov	r0, r6
 8004e42:	e9c4 2300 	strd	r2, r3, [r4]
 8004e46:	4639      	mov	r1, r7
 8004e48:	f7fb f986 	bl	8000158 <__aeabi_dsub>
 8004e4c:	a394      	add	r3, pc, #592	; (adr r3, 80050a0 <__ieee754_rem_pio2+0x2f0>)
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	e7de      	b.n	8004e12 <__ieee754_rem_pio2+0x62>
 8004e54:	f7fb f982 	bl	800015c <__adddf3>
 8004e58:	45aa      	cmp	sl, r5
 8004e5a:	4606      	mov	r6, r0
 8004e5c:	460f      	mov	r7, r1
 8004e5e:	d016      	beq.n	8004e8e <__ieee754_rem_pio2+0xde>
 8004e60:	a38b      	add	r3, pc, #556	; (adr r3, 8005090 <__ieee754_rem_pio2+0x2e0>)
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f7fb f979 	bl	800015c <__adddf3>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4630      	mov	r0, r6
 8004e70:	e9c4 2300 	strd	r2, r3, [r4]
 8004e74:	4639      	mov	r1, r7
 8004e76:	f7fb f96f 	bl	8000158 <__aeabi_dsub>
 8004e7a:	a385      	add	r3, pc, #532	; (adr r3, 8005090 <__ieee754_rem_pio2+0x2e0>)
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	f7fb f96c 	bl	800015c <__adddf3>
 8004e84:	f04f 35ff 	mov.w	r5, #4294967295
 8004e88:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e8c:	e7c6      	b.n	8004e1c <__ieee754_rem_pio2+0x6c>
 8004e8e:	a382      	add	r3, pc, #520	; (adr r3, 8005098 <__ieee754_rem_pio2+0x2e8>)
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	f7fb f962 	bl	800015c <__adddf3>
 8004e98:	a381      	add	r3, pc, #516	; (adr r3, 80050a0 <__ieee754_rem_pio2+0x2f0>)
 8004e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9e:	4606      	mov	r6, r0
 8004ea0:	460f      	mov	r7, r1
 8004ea2:	f7fb f95b 	bl	800015c <__adddf3>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4630      	mov	r0, r6
 8004eac:	e9c4 2300 	strd	r2, r3, [r4]
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	f7fb f951 	bl	8000158 <__aeabi_dsub>
 8004eb6:	a37a      	add	r3, pc, #488	; (adr r3, 80050a0 <__ieee754_rem_pio2+0x2f0>)
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	e7e0      	b.n	8004e80 <__ieee754_rem_pio2+0xd0>
 8004ebe:	4a83      	ldr	r2, [pc, #524]	; (80050cc <__ieee754_rem_pio2+0x31c>)
 8004ec0:	4592      	cmp	sl, r2
 8004ec2:	f300 80d2 	bgt.w	800506a <__ieee754_rem_pio2+0x2ba>
 8004ec6:	f000 fe21 	bl	8005b0c <fabs>
 8004eca:	a377      	add	r3, pc, #476	; (adr r3, 80050a8 <__ieee754_rem_pio2+0x2f8>)
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	4606      	mov	r6, r0
 8004ed2:	460f      	mov	r7, r1
 8004ed4:	f7fb faf8 	bl	80004c8 <__aeabi_dmul>
 8004ed8:	2200      	movs	r2, #0
 8004eda:	4b7d      	ldr	r3, [pc, #500]	; (80050d0 <__ieee754_rem_pio2+0x320>)
 8004edc:	f7fb f93e 	bl	800015c <__adddf3>
 8004ee0:	f7fb fd8c 	bl	80009fc <__aeabi_d2iz>
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	f7fb fa85 	bl	80003f4 <__aeabi_i2d>
 8004eea:	a367      	add	r3, pc, #412	; (adr r3, 8005088 <__ieee754_rem_pio2+0x2d8>)
 8004eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ef4:	f7fb fae8 	bl	80004c8 <__aeabi_dmul>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4630      	mov	r0, r6
 8004efe:	4639      	mov	r1, r7
 8004f00:	f7fb f92a 	bl	8000158 <__aeabi_dsub>
 8004f04:	a362      	add	r3, pc, #392	; (adr r3, 8005090 <__ieee754_rem_pio2+0x2e0>)
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	460f      	mov	r7, r1
 8004f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f12:	f7fb fad9 	bl	80004c8 <__aeabi_dmul>
 8004f16:	2d1f      	cmp	r5, #31
 8004f18:	4680      	mov	r8, r0
 8004f1a:	4689      	mov	r9, r1
 8004f1c:	dc0e      	bgt.n	8004f3c <__ieee754_rem_pio2+0x18c>
 8004f1e:	4b6d      	ldr	r3, [pc, #436]	; (80050d4 <__ieee754_rem_pio2+0x324>)
 8004f20:	1e6a      	subs	r2, r5, #1
 8004f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f26:	4553      	cmp	r3, sl
 8004f28:	d008      	beq.n	8004f3c <__ieee754_rem_pio2+0x18c>
 8004f2a:	4642      	mov	r2, r8
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	4630      	mov	r0, r6
 8004f30:	4639      	mov	r1, r7
 8004f32:	f7fb f911 	bl	8000158 <__aeabi_dsub>
 8004f36:	e9c4 0100 	strd	r0, r1, [r4]
 8004f3a:	e011      	b.n	8004f60 <__ieee754_rem_pio2+0x1b0>
 8004f3c:	464b      	mov	r3, r9
 8004f3e:	4642      	mov	r2, r8
 8004f40:	4630      	mov	r0, r6
 8004f42:	4639      	mov	r1, r7
 8004f44:	f7fb f908 	bl	8000158 <__aeabi_dsub>
 8004f48:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8004f4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f50:	ebaa 0303 	sub.w	r3, sl, r3
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	dc1f      	bgt.n	8004f98 <__ieee754_rem_pio2+0x1e8>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	e9c4 2300 	strd	r2, r3, [r4]
 8004f60:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8004f64:	4630      	mov	r0, r6
 8004f66:	4653      	mov	r3, sl
 8004f68:	4639      	mov	r1, r7
 8004f6a:	f7fb f8f5 	bl	8000158 <__aeabi_dsub>
 8004f6e:	4642      	mov	r2, r8
 8004f70:	464b      	mov	r3, r9
 8004f72:	f7fb f8f1 	bl	8000158 <__aeabi_dsub>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	f1bb 0f00 	cmp.w	fp, #0
 8004f7e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004f82:	f6bf af4b 	bge.w	8004e1c <__ieee754_rem_pio2+0x6c>
 8004f86:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004f8a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8004f8e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004f92:	60e1      	str	r1, [r4, #12]
 8004f94:	426d      	negs	r5, r5
 8004f96:	e741      	b.n	8004e1c <__ieee754_rem_pio2+0x6c>
 8004f98:	a33f      	add	r3, pc, #252	; (adr r3, 8005098 <__ieee754_rem_pio2+0x2e8>)
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fa2:	f7fb fa91 	bl	80004c8 <__aeabi_dmul>
 8004fa6:	4680      	mov	r8, r0
 8004fa8:	4689      	mov	r9, r1
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4630      	mov	r0, r6
 8004fb0:	4639      	mov	r1, r7
 8004fb2:	f7fb f8d1 	bl	8000158 <__aeabi_dsub>
 8004fb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	f7fb f8c9 	bl	8000158 <__aeabi_dsub>
 8004fc6:	4642      	mov	r2, r8
 8004fc8:	464b      	mov	r3, r9
 8004fca:	f7fb f8c5 	bl	8000158 <__aeabi_dsub>
 8004fce:	a334      	add	r3, pc, #208	; (adr r3, 80050a0 <__ieee754_rem_pio2+0x2f0>)
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	460f      	mov	r7, r1
 8004fd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fdc:	f7fb fa74 	bl	80004c8 <__aeabi_dmul>
 8004fe0:	4632      	mov	r2, r6
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	f7fb f8b8 	bl	8000158 <__aeabi_dsub>
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4602      	mov	r2, r0
 8004fec:	4680      	mov	r8, r0
 8004fee:	4689      	mov	r9, r1
 8004ff0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ff4:	f7fb f8b0 	bl	8000158 <__aeabi_dsub>
 8004ff8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ffc:	ebaa 0a03 	sub.w	sl, sl, r3
 8005000:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8005004:	dc06      	bgt.n	8005014 <__ieee754_rem_pio2+0x264>
 8005006:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	e9c4 2300 	strd	r2, r3, [r4]
 8005012:	e7a5      	b.n	8004f60 <__ieee754_rem_pio2+0x1b0>
 8005014:	a326      	add	r3, pc, #152	; (adr r3, 80050b0 <__ieee754_rem_pio2+0x300>)
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800501e:	f7fb fa53 	bl	80004c8 <__aeabi_dmul>
 8005022:	4680      	mov	r8, r0
 8005024:	4689      	mov	r9, r1
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800502e:	f7fb f893 	bl	8000158 <__aeabi_dsub>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4606      	mov	r6, r0
 8005038:	460f      	mov	r7, r1
 800503a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800503e:	f7fb f88b 	bl	8000158 <__aeabi_dsub>
 8005042:	4642      	mov	r2, r8
 8005044:	464b      	mov	r3, r9
 8005046:	f7fb f887 	bl	8000158 <__aeabi_dsub>
 800504a:	a31b      	add	r3, pc, #108	; (adr r3, 80050b8 <__ieee754_rem_pio2+0x308>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	4680      	mov	r8, r0
 8005052:	4689      	mov	r9, r1
 8005054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005058:	f7fb fa36 	bl	80004c8 <__aeabi_dmul>
 800505c:	4642      	mov	r2, r8
 800505e:	464b      	mov	r3, r9
 8005060:	f7fb f87a 	bl	8000158 <__aeabi_dsub>
 8005064:	4680      	mov	r8, r0
 8005066:	4689      	mov	r9, r1
 8005068:	e75f      	b.n	8004f2a <__ieee754_rem_pio2+0x17a>
 800506a:	4a1b      	ldr	r2, [pc, #108]	; (80050d8 <__ieee754_rem_pio2+0x328>)
 800506c:	4592      	cmp	sl, r2
 800506e:	dd35      	ble.n	80050dc <__ieee754_rem_pio2+0x32c>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	f7fb f870 	bl	8000158 <__aeabi_dsub>
 8005078:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800507c:	e9c4 0100 	strd	r0, r1, [r4]
 8005080:	e6a6      	b.n	8004dd0 <__ieee754_rem_pio2+0x20>
 8005082:	bf00      	nop
 8005084:	f3af 8000 	nop.w
 8005088:	54400000 	.word	0x54400000
 800508c:	3ff921fb 	.word	0x3ff921fb
 8005090:	1a626331 	.word	0x1a626331
 8005094:	3dd0b461 	.word	0x3dd0b461
 8005098:	1a600000 	.word	0x1a600000
 800509c:	3dd0b461 	.word	0x3dd0b461
 80050a0:	2e037073 	.word	0x2e037073
 80050a4:	3ba3198a 	.word	0x3ba3198a
 80050a8:	6dc9c883 	.word	0x6dc9c883
 80050ac:	3fe45f30 	.word	0x3fe45f30
 80050b0:	2e000000 	.word	0x2e000000
 80050b4:	3ba3198a 	.word	0x3ba3198a
 80050b8:	252049c1 	.word	0x252049c1
 80050bc:	397b839a 	.word	0x397b839a
 80050c0:	3fe921fb 	.word	0x3fe921fb
 80050c4:	4002d97b 	.word	0x4002d97b
 80050c8:	3ff921fb 	.word	0x3ff921fb
 80050cc:	413921fb 	.word	0x413921fb
 80050d0:	3fe00000 	.word	0x3fe00000
 80050d4:	08005d54 	.word	0x08005d54
 80050d8:	7fefffff 	.word	0x7fefffff
 80050dc:	ea4f 552a 	mov.w	r5, sl, asr #20
 80050e0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80050e4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80050e8:	460f      	mov	r7, r1
 80050ea:	4606      	mov	r6, r0
 80050ec:	f7fb fc86 	bl	80009fc <__aeabi_d2iz>
 80050f0:	f7fb f980 	bl	80003f4 <__aeabi_i2d>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4630      	mov	r0, r6
 80050fa:	4639      	mov	r1, r7
 80050fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005100:	f7fb f82a 	bl	8000158 <__aeabi_dsub>
 8005104:	2200      	movs	r2, #0
 8005106:	4b20      	ldr	r3, [pc, #128]	; (8005188 <__ieee754_rem_pio2+0x3d8>)
 8005108:	f7fb f9de 	bl	80004c8 <__aeabi_dmul>
 800510c:	460f      	mov	r7, r1
 800510e:	4606      	mov	r6, r0
 8005110:	f7fb fc74 	bl	80009fc <__aeabi_d2iz>
 8005114:	f7fb f96e 	bl	80003f4 <__aeabi_i2d>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4630      	mov	r0, r6
 800511e:	4639      	mov	r1, r7
 8005120:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005124:	f7fb f818 	bl	8000158 <__aeabi_dsub>
 8005128:	2200      	movs	r2, #0
 800512a:	4b17      	ldr	r3, [pc, #92]	; (8005188 <__ieee754_rem_pio2+0x3d8>)
 800512c:	f7fb f9cc 	bl	80004c8 <__aeabi_dmul>
 8005130:	f04f 0803 	mov.w	r8, #3
 8005134:	2600      	movs	r6, #0
 8005136:	2700      	movs	r7, #0
 8005138:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800513c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005140:	4632      	mov	r2, r6
 8005142:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005146:	463b      	mov	r3, r7
 8005148:	f108 3aff 	add.w	sl, r8, #4294967295
 800514c:	f7fb fc24 	bl	8000998 <__aeabi_dcmpeq>
 8005150:	b9b8      	cbnz	r0, 8005182 <__ieee754_rem_pio2+0x3d2>
 8005152:	4b0e      	ldr	r3, [pc, #56]	; (800518c <__ieee754_rem_pio2+0x3dc>)
 8005154:	462a      	mov	r2, r5
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	2302      	movs	r3, #2
 800515a:	4621      	mov	r1, r4
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	a806      	add	r0, sp, #24
 8005160:	4643      	mov	r3, r8
 8005162:	f000 f8d3 	bl	800530c <__kernel_rem_pio2>
 8005166:	f1bb 0f00 	cmp.w	fp, #0
 800516a:	4605      	mov	r5, r0
 800516c:	f6bf ae56 	bge.w	8004e1c <__ieee754_rem_pio2+0x6c>
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005176:	6063      	str	r3, [r4, #4]
 8005178:	68e3      	ldr	r3, [r4, #12]
 800517a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800517e:	60e3      	str	r3, [r4, #12]
 8005180:	e708      	b.n	8004f94 <__ieee754_rem_pio2+0x1e4>
 8005182:	46d0      	mov	r8, sl
 8005184:	e7dc      	b.n	8005140 <__ieee754_rem_pio2+0x390>
 8005186:	bf00      	nop
 8005188:	41700000 	.word	0x41700000
 800518c:	08005dd4 	.word	0x08005dd4

08005190 <__kernel_cos>:
 8005190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005194:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005198:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800519c:	4680      	mov	r8, r0
 800519e:	460f      	mov	r7, r1
 80051a0:	e9cd 2300 	strd	r2, r3, [sp]
 80051a4:	da04      	bge.n	80051b0 <__kernel_cos+0x20>
 80051a6:	f7fb fc29 	bl	80009fc <__aeabi_d2iz>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	f000 8086 	beq.w	80052bc <__kernel_cos+0x12c>
 80051b0:	4642      	mov	r2, r8
 80051b2:	463b      	mov	r3, r7
 80051b4:	4640      	mov	r0, r8
 80051b6:	4639      	mov	r1, r7
 80051b8:	f7fb f986 	bl	80004c8 <__aeabi_dmul>
 80051bc:	2200      	movs	r2, #0
 80051be:	4b4e      	ldr	r3, [pc, #312]	; (80052f8 <__kernel_cos+0x168>)
 80051c0:	4604      	mov	r4, r0
 80051c2:	460d      	mov	r5, r1
 80051c4:	f7fb f980 	bl	80004c8 <__aeabi_dmul>
 80051c8:	a33f      	add	r3, pc, #252	; (adr r3, 80052c8 <__kernel_cos+0x138>)
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	4682      	mov	sl, r0
 80051d0:	468b      	mov	fp, r1
 80051d2:	4620      	mov	r0, r4
 80051d4:	4629      	mov	r1, r5
 80051d6:	f7fb f977 	bl	80004c8 <__aeabi_dmul>
 80051da:	a33d      	add	r3, pc, #244	; (adr r3, 80052d0 <__kernel_cos+0x140>)
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f7fa ffbc 	bl	800015c <__adddf3>
 80051e4:	4622      	mov	r2, r4
 80051e6:	462b      	mov	r3, r5
 80051e8:	f7fb f96e 	bl	80004c8 <__aeabi_dmul>
 80051ec:	a33a      	add	r3, pc, #232	; (adr r3, 80052d8 <__kernel_cos+0x148>)
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	f7fa ffb1 	bl	8000158 <__aeabi_dsub>
 80051f6:	4622      	mov	r2, r4
 80051f8:	462b      	mov	r3, r5
 80051fa:	f7fb f965 	bl	80004c8 <__aeabi_dmul>
 80051fe:	a338      	add	r3, pc, #224	; (adr r3, 80052e0 <__kernel_cos+0x150>)
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	f7fa ffaa 	bl	800015c <__adddf3>
 8005208:	4622      	mov	r2, r4
 800520a:	462b      	mov	r3, r5
 800520c:	f7fb f95c 	bl	80004c8 <__aeabi_dmul>
 8005210:	a335      	add	r3, pc, #212	; (adr r3, 80052e8 <__kernel_cos+0x158>)
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	f7fa ff9f 	bl	8000158 <__aeabi_dsub>
 800521a:	4622      	mov	r2, r4
 800521c:	462b      	mov	r3, r5
 800521e:	f7fb f953 	bl	80004c8 <__aeabi_dmul>
 8005222:	a333      	add	r3, pc, #204	; (adr r3, 80052f0 <__kernel_cos+0x160>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fa ff98 	bl	800015c <__adddf3>
 800522c:	4622      	mov	r2, r4
 800522e:	462b      	mov	r3, r5
 8005230:	f7fb f94a 	bl	80004c8 <__aeabi_dmul>
 8005234:	4622      	mov	r2, r4
 8005236:	462b      	mov	r3, r5
 8005238:	f7fb f946 	bl	80004c8 <__aeabi_dmul>
 800523c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005240:	4604      	mov	r4, r0
 8005242:	460d      	mov	r5, r1
 8005244:	4640      	mov	r0, r8
 8005246:	4639      	mov	r1, r7
 8005248:	f7fb f93e 	bl	80004c8 <__aeabi_dmul>
 800524c:	460b      	mov	r3, r1
 800524e:	4602      	mov	r2, r0
 8005250:	4629      	mov	r1, r5
 8005252:	4620      	mov	r0, r4
 8005254:	f7fa ff80 	bl	8000158 <__aeabi_dsub>
 8005258:	4b28      	ldr	r3, [pc, #160]	; (80052fc <__kernel_cos+0x16c>)
 800525a:	4680      	mov	r8, r0
 800525c:	429e      	cmp	r6, r3
 800525e:	4689      	mov	r9, r1
 8005260:	dc0e      	bgt.n	8005280 <__kernel_cos+0xf0>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4650      	mov	r0, sl
 8005268:	4659      	mov	r1, fp
 800526a:	f7fa ff75 	bl	8000158 <__aeabi_dsub>
 800526e:	4602      	mov	r2, r0
 8005270:	2000      	movs	r0, #0
 8005272:	460b      	mov	r3, r1
 8005274:	4922      	ldr	r1, [pc, #136]	; (8005300 <__kernel_cos+0x170>)
 8005276:	f7fa ff6f 	bl	8000158 <__aeabi_dsub>
 800527a:	b003      	add	sp, #12
 800527c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005280:	2400      	movs	r4, #0
 8005282:	4b20      	ldr	r3, [pc, #128]	; (8005304 <__kernel_cos+0x174>)
 8005284:	4622      	mov	r2, r4
 8005286:	429e      	cmp	r6, r3
 8005288:	bfcc      	ite	gt
 800528a:	4d1f      	ldrgt	r5, [pc, #124]	; (8005308 <__kernel_cos+0x178>)
 800528c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005290:	462b      	mov	r3, r5
 8005292:	2000      	movs	r0, #0
 8005294:	491a      	ldr	r1, [pc, #104]	; (8005300 <__kernel_cos+0x170>)
 8005296:	f7fa ff5f 	bl	8000158 <__aeabi_dsub>
 800529a:	4622      	mov	r2, r4
 800529c:	4606      	mov	r6, r0
 800529e:	460f      	mov	r7, r1
 80052a0:	462b      	mov	r3, r5
 80052a2:	4650      	mov	r0, sl
 80052a4:	4659      	mov	r1, fp
 80052a6:	f7fa ff57 	bl	8000158 <__aeabi_dsub>
 80052aa:	4642      	mov	r2, r8
 80052ac:	464b      	mov	r3, r9
 80052ae:	f7fa ff53 	bl	8000158 <__aeabi_dsub>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4630      	mov	r0, r6
 80052b8:	4639      	mov	r1, r7
 80052ba:	e7dc      	b.n	8005276 <__kernel_cos+0xe6>
 80052bc:	2000      	movs	r0, #0
 80052be:	4910      	ldr	r1, [pc, #64]	; (8005300 <__kernel_cos+0x170>)
 80052c0:	e7db      	b.n	800527a <__kernel_cos+0xea>
 80052c2:	bf00      	nop
 80052c4:	f3af 8000 	nop.w
 80052c8:	be8838d4 	.word	0xbe8838d4
 80052cc:	bda8fae9 	.word	0xbda8fae9
 80052d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80052d4:	3e21ee9e 	.word	0x3e21ee9e
 80052d8:	809c52ad 	.word	0x809c52ad
 80052dc:	3e927e4f 	.word	0x3e927e4f
 80052e0:	19cb1590 	.word	0x19cb1590
 80052e4:	3efa01a0 	.word	0x3efa01a0
 80052e8:	16c15177 	.word	0x16c15177
 80052ec:	3f56c16c 	.word	0x3f56c16c
 80052f0:	5555554c 	.word	0x5555554c
 80052f4:	3fa55555 	.word	0x3fa55555
 80052f8:	3fe00000 	.word	0x3fe00000
 80052fc:	3fd33332 	.word	0x3fd33332
 8005300:	3ff00000 	.word	0x3ff00000
 8005304:	3fe90000 	.word	0x3fe90000
 8005308:	3fd20000 	.word	0x3fd20000

0800530c <__kernel_rem_pio2>:
 800530c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005310:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005314:	9307      	str	r3, [sp, #28]
 8005316:	9104      	str	r1, [sp, #16]
 8005318:	4bbf      	ldr	r3, [pc, #764]	; (8005618 <__kernel_rem_pio2+0x30c>)
 800531a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800531c:	1ed4      	subs	r4, r2, #3
 800531e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005322:	2500      	movs	r5, #0
 8005324:	9302      	str	r3, [sp, #8]
 8005326:	9b07      	ldr	r3, [sp, #28]
 8005328:	9008      	str	r0, [sp, #32]
 800532a:	3b01      	subs	r3, #1
 800532c:	9306      	str	r3, [sp, #24]
 800532e:	2318      	movs	r3, #24
 8005330:	fb94 f4f3 	sdiv	r4, r4, r3
 8005334:	f06f 0317 	mvn.w	r3, #23
 8005338:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800533c:	fb04 3303 	mla	r3, r4, r3, r3
 8005340:	eb03 0a02 	add.w	sl, r3, r2
 8005344:	9a06      	ldr	r2, [sp, #24]
 8005346:	9b02      	ldr	r3, [sp, #8]
 8005348:	1aa7      	subs	r7, r4, r2
 800534a:	eb03 0802 	add.w	r8, r3, r2
 800534e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005350:	2200      	movs	r2, #0
 8005352:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005356:	2300      	movs	r3, #0
 8005358:	ae1e      	add	r6, sp, #120	; 0x78
 800535a:	4545      	cmp	r5, r8
 800535c:	dd14      	ble.n	8005388 <__kernel_rem_pio2+0x7c>
 800535e:	2600      	movs	r6, #0
 8005360:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8005364:	9b02      	ldr	r3, [sp, #8]
 8005366:	429e      	cmp	r6, r3
 8005368:	dc39      	bgt.n	80053de <__kernel_rem_pio2+0xd2>
 800536a:	9b08      	ldr	r3, [sp, #32]
 800536c:	f04f 0800 	mov.w	r8, #0
 8005370:	3b08      	subs	r3, #8
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	9b07      	ldr	r3, [sp, #28]
 8005376:	f04f 0900 	mov.w	r9, #0
 800537a:	199d      	adds	r5, r3, r6
 800537c:	ab20      	add	r3, sp, #128	; 0x80
 800537e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005382:	9305      	str	r3, [sp, #20]
 8005384:	2700      	movs	r7, #0
 8005386:	e023      	b.n	80053d0 <__kernel_rem_pio2+0xc4>
 8005388:	42ef      	cmn	r7, r5
 800538a:	d40b      	bmi.n	80053a4 <__kernel_rem_pio2+0x98>
 800538c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005390:	e9cd 2300 	strd	r2, r3, [sp]
 8005394:	f7fb f82e 	bl	80003f4 <__aeabi_i2d>
 8005398:	e9dd 2300 	ldrd	r2, r3, [sp]
 800539c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80053a0:	3501      	adds	r5, #1
 80053a2:	e7da      	b.n	800535a <__kernel_rem_pio2+0x4e>
 80053a4:	4610      	mov	r0, r2
 80053a6:	4619      	mov	r1, r3
 80053a8:	e7f8      	b.n	800539c <__kernel_rem_pio2+0x90>
 80053aa:	9905      	ldr	r1, [sp, #20]
 80053ac:	9d00      	ldr	r5, [sp, #0]
 80053ae:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80053b2:	9105      	str	r1, [sp, #20]
 80053b4:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80053b8:	9500      	str	r5, [sp, #0]
 80053ba:	f7fb f885 	bl	80004c8 <__aeabi_dmul>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4640      	mov	r0, r8
 80053c4:	4649      	mov	r1, r9
 80053c6:	f7fa fec9 	bl	800015c <__adddf3>
 80053ca:	4680      	mov	r8, r0
 80053cc:	4689      	mov	r9, r1
 80053ce:	3701      	adds	r7, #1
 80053d0:	9b06      	ldr	r3, [sp, #24]
 80053d2:	429f      	cmp	r7, r3
 80053d4:	dde9      	ble.n	80053aa <__kernel_rem_pio2+0x9e>
 80053d6:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 80053da:	3601      	adds	r6, #1
 80053dc:	e7c2      	b.n	8005364 <__kernel_rem_pio2+0x58>
 80053de:	9b02      	ldr	r3, [sp, #8]
 80053e0:	aa0c      	add	r2, sp, #48	; 0x30
 80053e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80053e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80053e8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80053ea:	9f02      	ldr	r7, [sp, #8]
 80053ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80053f0:	930a      	str	r3, [sp, #40]	; 0x28
 80053f2:	2600      	movs	r6, #0
 80053f4:	ab98      	add	r3, sp, #608	; 0x260
 80053f6:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 80053fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005402:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005406:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800540a:	ab98      	add	r3, sp, #608	; 0x260
 800540c:	445b      	add	r3, fp
 800540e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 8005412:	1bbb      	subs	r3, r7, r6
 8005414:	2b00      	cmp	r3, #0
 8005416:	dc71      	bgt.n	80054fc <__kernel_rem_pio2+0x1f0>
 8005418:	4652      	mov	r2, sl
 800541a:	4640      	mov	r0, r8
 800541c:	4649      	mov	r1, r9
 800541e:	f000 fbff 	bl	8005c20 <scalbn>
 8005422:	2200      	movs	r2, #0
 8005424:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005428:	4604      	mov	r4, r0
 800542a:	460d      	mov	r5, r1
 800542c:	f7fb f84c 	bl	80004c8 <__aeabi_dmul>
 8005430:	f000 fb72 	bl	8005b18 <floor>
 8005434:	2200      	movs	r2, #0
 8005436:	4b79      	ldr	r3, [pc, #484]	; (800561c <__kernel_rem_pio2+0x310>)
 8005438:	f7fb f846 	bl	80004c8 <__aeabi_dmul>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4620      	mov	r0, r4
 8005442:	4629      	mov	r1, r5
 8005444:	f7fa fe88 	bl	8000158 <__aeabi_dsub>
 8005448:	460d      	mov	r5, r1
 800544a:	4604      	mov	r4, r0
 800544c:	f7fb fad6 	bl	80009fc <__aeabi_d2iz>
 8005450:	9005      	str	r0, [sp, #20]
 8005452:	f7fa ffcf 	bl	80003f4 <__aeabi_i2d>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4620      	mov	r0, r4
 800545c:	4629      	mov	r1, r5
 800545e:	f7fa fe7b 	bl	8000158 <__aeabi_dsub>
 8005462:	f1ba 0f00 	cmp.w	sl, #0
 8005466:	4680      	mov	r8, r0
 8005468:	4689      	mov	r9, r1
 800546a:	dd6c      	ble.n	8005546 <__kernel_rem_pio2+0x23a>
 800546c:	1e7a      	subs	r2, r7, #1
 800546e:	ab0c      	add	r3, sp, #48	; 0x30
 8005470:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005474:	f1ca 0118 	rsb	r1, sl, #24
 8005478:	9c05      	ldr	r4, [sp, #20]
 800547a:	fa40 f301 	asr.w	r3, r0, r1
 800547e:	441c      	add	r4, r3
 8005480:	408b      	lsls	r3, r1
 8005482:	1ac0      	subs	r0, r0, r3
 8005484:	ab0c      	add	r3, sp, #48	; 0x30
 8005486:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800548a:	f1ca 0317 	rsb	r3, sl, #23
 800548e:	9405      	str	r4, [sp, #20]
 8005490:	fa40 f303 	asr.w	r3, r0, r3
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	9b00      	ldr	r3, [sp, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	dd62      	ble.n	8005562 <__kernel_rem_pio2+0x256>
 800549c:	2200      	movs	r2, #0
 800549e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80054a2:	4614      	mov	r4, r2
 80054a4:	9b05      	ldr	r3, [sp, #20]
 80054a6:	3301      	adds	r3, #1
 80054a8:	9305      	str	r3, [sp, #20]
 80054aa:	4297      	cmp	r7, r2
 80054ac:	f300 809f 	bgt.w	80055ee <__kernel_rem_pio2+0x2e2>
 80054b0:	f1ba 0f00 	cmp.w	sl, #0
 80054b4:	dd07      	ble.n	80054c6 <__kernel_rem_pio2+0x1ba>
 80054b6:	f1ba 0f01 	cmp.w	sl, #1
 80054ba:	f000 80bb 	beq.w	8005634 <__kernel_rem_pio2+0x328>
 80054be:	f1ba 0f02 	cmp.w	sl, #2
 80054c2:	f000 80c1 	beq.w	8005648 <__kernel_rem_pio2+0x33c>
 80054c6:	9b00      	ldr	r3, [sp, #0]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d14a      	bne.n	8005562 <__kernel_rem_pio2+0x256>
 80054cc:	4642      	mov	r2, r8
 80054ce:	464b      	mov	r3, r9
 80054d0:	2000      	movs	r0, #0
 80054d2:	4953      	ldr	r1, [pc, #332]	; (8005620 <__kernel_rem_pio2+0x314>)
 80054d4:	f7fa fe40 	bl	8000158 <__aeabi_dsub>
 80054d8:	4680      	mov	r8, r0
 80054da:	4689      	mov	r9, r1
 80054dc:	2c00      	cmp	r4, #0
 80054de:	d040      	beq.n	8005562 <__kernel_rem_pio2+0x256>
 80054e0:	4652      	mov	r2, sl
 80054e2:	2000      	movs	r0, #0
 80054e4:	494e      	ldr	r1, [pc, #312]	; (8005620 <__kernel_rem_pio2+0x314>)
 80054e6:	f000 fb9b 	bl	8005c20 <scalbn>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4640      	mov	r0, r8
 80054f0:	4649      	mov	r1, r9
 80054f2:	f7fa fe31 	bl	8000158 <__aeabi_dsub>
 80054f6:	4680      	mov	r8, r0
 80054f8:	4689      	mov	r9, r1
 80054fa:	e032      	b.n	8005562 <__kernel_rem_pio2+0x256>
 80054fc:	2200      	movs	r2, #0
 80054fe:	4b49      	ldr	r3, [pc, #292]	; (8005624 <__kernel_rem_pio2+0x318>)
 8005500:	4640      	mov	r0, r8
 8005502:	4649      	mov	r1, r9
 8005504:	f7fa ffe0 	bl	80004c8 <__aeabi_dmul>
 8005508:	f7fb fa78 	bl	80009fc <__aeabi_d2iz>
 800550c:	f7fa ff72 	bl	80003f4 <__aeabi_i2d>
 8005510:	2200      	movs	r2, #0
 8005512:	4b45      	ldr	r3, [pc, #276]	; (8005628 <__kernel_rem_pio2+0x31c>)
 8005514:	e9cd 0100 	strd	r0, r1, [sp]
 8005518:	f7fa ffd6 	bl	80004c8 <__aeabi_dmul>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4640      	mov	r0, r8
 8005522:	4649      	mov	r1, r9
 8005524:	f7fa fe18 	bl	8000158 <__aeabi_dsub>
 8005528:	f7fb fa68 	bl	80009fc <__aeabi_d2iz>
 800552c:	ab0c      	add	r3, sp, #48	; 0x30
 800552e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8005532:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005536:	e9dd 0100 	ldrd	r0, r1, [sp]
 800553a:	f7fa fe0f 	bl	800015c <__adddf3>
 800553e:	3601      	adds	r6, #1
 8005540:	4680      	mov	r8, r0
 8005542:	4689      	mov	r9, r1
 8005544:	e765      	b.n	8005412 <__kernel_rem_pio2+0x106>
 8005546:	d105      	bne.n	8005554 <__kernel_rem_pio2+0x248>
 8005548:	1e7b      	subs	r3, r7, #1
 800554a:	aa0c      	add	r2, sp, #48	; 0x30
 800554c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005550:	15c3      	asrs	r3, r0, #23
 8005552:	e79f      	b.n	8005494 <__kernel_rem_pio2+0x188>
 8005554:	2200      	movs	r2, #0
 8005556:	4b35      	ldr	r3, [pc, #212]	; (800562c <__kernel_rem_pio2+0x320>)
 8005558:	f7fb fa3c 	bl	80009d4 <__aeabi_dcmpge>
 800555c:	2800      	cmp	r0, #0
 800555e:	d143      	bne.n	80055e8 <__kernel_rem_pio2+0x2dc>
 8005560:	9000      	str	r0, [sp, #0]
 8005562:	2200      	movs	r2, #0
 8005564:	2300      	movs	r3, #0
 8005566:	4640      	mov	r0, r8
 8005568:	4649      	mov	r1, r9
 800556a:	f7fb fa15 	bl	8000998 <__aeabi_dcmpeq>
 800556e:	2800      	cmp	r0, #0
 8005570:	f000 80c3 	beq.w	80056fa <__kernel_rem_pio2+0x3ee>
 8005574:	1e7c      	subs	r4, r7, #1
 8005576:	4623      	mov	r3, r4
 8005578:	2200      	movs	r2, #0
 800557a:	9902      	ldr	r1, [sp, #8]
 800557c:	428b      	cmp	r3, r1
 800557e:	da6a      	bge.n	8005656 <__kernel_rem_pio2+0x34a>
 8005580:	2a00      	cmp	r2, #0
 8005582:	f000 8084 	beq.w	800568e <__kernel_rem_pio2+0x382>
 8005586:	ab0c      	add	r3, sp, #48	; 0x30
 8005588:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800558c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80b0 	beq.w	80056f6 <__kernel_rem_pio2+0x3ea>
 8005596:	4652      	mov	r2, sl
 8005598:	2000      	movs	r0, #0
 800559a:	4921      	ldr	r1, [pc, #132]	; (8005620 <__kernel_rem_pio2+0x314>)
 800559c:	f000 fb40 	bl	8005c20 <scalbn>
 80055a0:	4625      	mov	r5, r4
 80055a2:	4606      	mov	r6, r0
 80055a4:	460f      	mov	r7, r1
 80055a6:	f04f 0a00 	mov.w	sl, #0
 80055aa:	00e3      	lsls	r3, r4, #3
 80055ac:	aa98      	add	r2, sp, #608	; 0x260
 80055ae:	eb02 0803 	add.w	r8, r2, r3
 80055b2:	f8df b070 	ldr.w	fp, [pc, #112]	; 8005624 <__kernel_rem_pio2+0x318>
 80055b6:	9306      	str	r3, [sp, #24]
 80055b8:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 80055bc:	2d00      	cmp	r5, #0
 80055be:	f280 80d2 	bge.w	8005766 <__kernel_rem_pio2+0x45a>
 80055c2:	2500      	movs	r5, #0
 80055c4:	9a06      	ldr	r2, [sp, #24]
 80055c6:	ab98      	add	r3, sp, #608	; 0x260
 80055c8:	189e      	adds	r6, r3, r2
 80055ca:	3ea8      	subs	r6, #168	; 0xa8
 80055cc:	1b63      	subs	r3, r4, r5
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f2c0 80f9 	blt.w	80057c6 <__kernel_rem_pio2+0x4ba>
 80055d4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8005630 <__kernel_rem_pio2+0x324>
 80055d8:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 80055dc:	f04f 0a00 	mov.w	sl, #0
 80055e0:	f04f 0b00 	mov.w	fp, #0
 80055e4:	2700      	movs	r7, #0
 80055e6:	e0e2      	b.n	80057ae <__kernel_rem_pio2+0x4a2>
 80055e8:	2302      	movs	r3, #2
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	e756      	b.n	800549c <__kernel_rem_pio2+0x190>
 80055ee:	ab0c      	add	r3, sp, #48	; 0x30
 80055f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f4:	b94c      	cbnz	r4, 800560a <__kernel_rem_pio2+0x2fe>
 80055f6:	b12b      	cbz	r3, 8005604 <__kernel_rem_pio2+0x2f8>
 80055f8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80055fc:	a80c      	add	r0, sp, #48	; 0x30
 80055fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005602:	2301      	movs	r3, #1
 8005604:	3201      	adds	r2, #1
 8005606:	461c      	mov	r4, r3
 8005608:	e74f      	b.n	80054aa <__kernel_rem_pio2+0x19e>
 800560a:	1acb      	subs	r3, r1, r3
 800560c:	a80c      	add	r0, sp, #48	; 0x30
 800560e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005612:	4623      	mov	r3, r4
 8005614:	e7f6      	b.n	8005604 <__kernel_rem_pio2+0x2f8>
 8005616:	bf00      	nop
 8005618:	08005f20 	.word	0x08005f20
 800561c:	40200000 	.word	0x40200000
 8005620:	3ff00000 	.word	0x3ff00000
 8005624:	3e700000 	.word	0x3e700000
 8005628:	41700000 	.word	0x41700000
 800562c:	3fe00000 	.word	0x3fe00000
 8005630:	08005ed8 	.word	0x08005ed8
 8005634:	1e7a      	subs	r2, r7, #1
 8005636:	ab0c      	add	r3, sp, #48	; 0x30
 8005638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005640:	a90c      	add	r1, sp, #48	; 0x30
 8005642:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005646:	e73e      	b.n	80054c6 <__kernel_rem_pio2+0x1ba>
 8005648:	1e7a      	subs	r2, r7, #1
 800564a:	ab0c      	add	r3, sp, #48	; 0x30
 800564c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005650:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005654:	e7f4      	b.n	8005640 <__kernel_rem_pio2+0x334>
 8005656:	a90c      	add	r1, sp, #48	; 0x30
 8005658:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800565c:	3b01      	subs	r3, #1
 800565e:	430a      	orrs	r2, r1
 8005660:	e78b      	b.n	800557a <__kernel_rem_pio2+0x26e>
 8005662:	3401      	adds	r4, #1
 8005664:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005668:	2a00      	cmp	r2, #0
 800566a:	d0fa      	beq.n	8005662 <__kernel_rem_pio2+0x356>
 800566c:	ab98      	add	r3, sp, #608	; 0x260
 800566e:	449b      	add	fp, r3
 8005670:	9b07      	ldr	r3, [sp, #28]
 8005672:	1c7e      	adds	r6, r7, #1
 8005674:	19dd      	adds	r5, r3, r7
 8005676:	ab98      	add	r3, sp, #608	; 0x260
 8005678:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800567c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8005680:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8005684:	443c      	add	r4, r7
 8005686:	42b4      	cmp	r4, r6
 8005688:	da04      	bge.n	8005694 <__kernel_rem_pio2+0x388>
 800568a:	4627      	mov	r7, r4
 800568c:	e6b1      	b.n	80053f2 <__kernel_rem_pio2+0xe6>
 800568e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005690:	2401      	movs	r4, #1
 8005692:	e7e7      	b.n	8005664 <__kernel_rem_pio2+0x358>
 8005694:	f105 0308 	add.w	r3, r5, #8
 8005698:	9309      	str	r3, [sp, #36]	; 0x24
 800569a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800569c:	2700      	movs	r7, #0
 800569e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80056a2:	f7fa fea7 	bl	80003f4 <__aeabi_i2d>
 80056a6:	f04f 0800 	mov.w	r8, #0
 80056aa:	f04f 0900 	mov.w	r9, #0
 80056ae:	9b08      	ldr	r3, [sp, #32]
 80056b0:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80056b4:	3b08      	subs	r3, #8
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	f105 0310 	add.w	r3, r5, #16
 80056bc:	9305      	str	r3, [sp, #20]
 80056be:	9b06      	ldr	r3, [sp, #24]
 80056c0:	429f      	cmp	r7, r3
 80056c2:	dd04      	ble.n	80056ce <__kernel_rem_pio2+0x3c2>
 80056c4:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 80056c8:	3601      	adds	r6, #1
 80056ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80056cc:	e7db      	b.n	8005686 <__kernel_rem_pio2+0x37a>
 80056ce:	9905      	ldr	r1, [sp, #20]
 80056d0:	9d00      	ldr	r5, [sp, #0]
 80056d2:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80056d6:	9105      	str	r1, [sp, #20]
 80056d8:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80056dc:	9500      	str	r5, [sp, #0]
 80056de:	f7fa fef3 	bl	80004c8 <__aeabi_dmul>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4640      	mov	r0, r8
 80056e8:	4649      	mov	r1, r9
 80056ea:	f7fa fd37 	bl	800015c <__adddf3>
 80056ee:	3701      	adds	r7, #1
 80056f0:	4680      	mov	r8, r0
 80056f2:	4689      	mov	r9, r1
 80056f4:	e7e3      	b.n	80056be <__kernel_rem_pio2+0x3b2>
 80056f6:	3c01      	subs	r4, #1
 80056f8:	e745      	b.n	8005586 <__kernel_rem_pio2+0x27a>
 80056fa:	f1ca 0200 	rsb	r2, sl, #0
 80056fe:	4640      	mov	r0, r8
 8005700:	4649      	mov	r1, r9
 8005702:	f000 fa8d 	bl	8005c20 <scalbn>
 8005706:	2200      	movs	r2, #0
 8005708:	4ba3      	ldr	r3, [pc, #652]	; (8005998 <__kernel_rem_pio2+0x68c>)
 800570a:	4604      	mov	r4, r0
 800570c:	460d      	mov	r5, r1
 800570e:	f7fb f961 	bl	80009d4 <__aeabi_dcmpge>
 8005712:	b1f8      	cbz	r0, 8005754 <__kernel_rem_pio2+0x448>
 8005714:	2200      	movs	r2, #0
 8005716:	4ba1      	ldr	r3, [pc, #644]	; (800599c <__kernel_rem_pio2+0x690>)
 8005718:	4620      	mov	r0, r4
 800571a:	4629      	mov	r1, r5
 800571c:	f7fa fed4 	bl	80004c8 <__aeabi_dmul>
 8005720:	f7fb f96c 	bl	80009fc <__aeabi_d2iz>
 8005724:	4606      	mov	r6, r0
 8005726:	f7fa fe65 	bl	80003f4 <__aeabi_i2d>
 800572a:	2200      	movs	r2, #0
 800572c:	4b9a      	ldr	r3, [pc, #616]	; (8005998 <__kernel_rem_pio2+0x68c>)
 800572e:	f7fa fecb 	bl	80004c8 <__aeabi_dmul>
 8005732:	460b      	mov	r3, r1
 8005734:	4602      	mov	r2, r0
 8005736:	4629      	mov	r1, r5
 8005738:	4620      	mov	r0, r4
 800573a:	f7fa fd0d 	bl	8000158 <__aeabi_dsub>
 800573e:	f7fb f95d 	bl	80009fc <__aeabi_d2iz>
 8005742:	1c7c      	adds	r4, r7, #1
 8005744:	ab0c      	add	r3, sp, #48	; 0x30
 8005746:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800574a:	f10a 0a18 	add.w	sl, sl, #24
 800574e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8005752:	e720      	b.n	8005596 <__kernel_rem_pio2+0x28a>
 8005754:	4620      	mov	r0, r4
 8005756:	4629      	mov	r1, r5
 8005758:	f7fb f950 	bl	80009fc <__aeabi_d2iz>
 800575c:	ab0c      	add	r3, sp, #48	; 0x30
 800575e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005762:	463c      	mov	r4, r7
 8005764:	e717      	b.n	8005596 <__kernel_rem_pio2+0x28a>
 8005766:	ab0c      	add	r3, sp, #48	; 0x30
 8005768:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800576c:	f7fa fe42 	bl	80003f4 <__aeabi_i2d>
 8005770:	4632      	mov	r2, r6
 8005772:	463b      	mov	r3, r7
 8005774:	f7fa fea8 	bl	80004c8 <__aeabi_dmul>
 8005778:	4652      	mov	r2, sl
 800577a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800577e:	465b      	mov	r3, fp
 8005780:	4630      	mov	r0, r6
 8005782:	4639      	mov	r1, r7
 8005784:	f7fa fea0 	bl	80004c8 <__aeabi_dmul>
 8005788:	3d01      	subs	r5, #1
 800578a:	4606      	mov	r6, r0
 800578c:	460f      	mov	r7, r1
 800578e:	e715      	b.n	80055bc <__kernel_rem_pio2+0x2b0>
 8005790:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8005794:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005798:	f7fa fe96 	bl	80004c8 <__aeabi_dmul>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4650      	mov	r0, sl
 80057a2:	4659      	mov	r1, fp
 80057a4:	f7fa fcda 	bl	800015c <__adddf3>
 80057a8:	4682      	mov	sl, r0
 80057aa:	468b      	mov	fp, r1
 80057ac:	3701      	adds	r7, #1
 80057ae:	9b02      	ldr	r3, [sp, #8]
 80057b0:	429f      	cmp	r7, r3
 80057b2:	dc01      	bgt.n	80057b8 <__kernel_rem_pio2+0x4ac>
 80057b4:	42bd      	cmp	r5, r7
 80057b6:	daeb      	bge.n	8005790 <__kernel_rem_pio2+0x484>
 80057b8:	ab48      	add	r3, sp, #288	; 0x120
 80057ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80057be:	e9c3 ab00 	strd	sl, fp, [r3]
 80057c2:	3501      	adds	r5, #1
 80057c4:	e702      	b.n	80055cc <__kernel_rem_pio2+0x2c0>
 80057c6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d86c      	bhi.n	80058a6 <__kernel_rem_pio2+0x59a>
 80057cc:	e8df f003 	tbb	[pc, r3]
 80057d0:	022f2f59 	.word	0x022f2f59
 80057d4:	9a06      	ldr	r2, [sp, #24]
 80057d6:	ab48      	add	r3, sp, #288	; 0x120
 80057d8:	189d      	adds	r5, r3, r2
 80057da:	46aa      	mov	sl, r5
 80057dc:	46a3      	mov	fp, r4
 80057de:	f1bb 0f00 	cmp.w	fp, #0
 80057e2:	f300 8087 	bgt.w	80058f4 <__kernel_rem_pio2+0x5e8>
 80057e6:	46a2      	mov	sl, r4
 80057e8:	f1ba 0f01 	cmp.w	sl, #1
 80057ec:	f300 809f 	bgt.w	800592e <__kernel_rem_pio2+0x622>
 80057f0:	2700      	movs	r7, #0
 80057f2:	463e      	mov	r6, r7
 80057f4:	9d06      	ldr	r5, [sp, #24]
 80057f6:	ab48      	add	r3, sp, #288	; 0x120
 80057f8:	3508      	adds	r5, #8
 80057fa:	441d      	add	r5, r3
 80057fc:	2c01      	cmp	r4, #1
 80057fe:	f300 80b3 	bgt.w	8005968 <__kernel_rem_pio2+0x65c>
 8005802:	9b00      	ldr	r3, [sp, #0]
 8005804:	9d48      	ldr	r5, [sp, #288]	; 0x120
 8005806:	9849      	ldr	r0, [sp, #292]	; 0x124
 8005808:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800580a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800580c:	2b00      	cmp	r3, #0
 800580e:	f040 80b5 	bne.w	800597c <__kernel_rem_pio2+0x670>
 8005812:	4603      	mov	r3, r0
 8005814:	462a      	mov	r2, r5
 8005816:	9804      	ldr	r0, [sp, #16]
 8005818:	e9c0 2300 	strd	r2, r3, [r0]
 800581c:	4622      	mov	r2, r4
 800581e:	460b      	mov	r3, r1
 8005820:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005824:	463a      	mov	r2, r7
 8005826:	4633      	mov	r3, r6
 8005828:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800582c:	e03b      	b.n	80058a6 <__kernel_rem_pio2+0x59a>
 800582e:	f04f 0c00 	mov.w	ip, #0
 8005832:	4626      	mov	r6, r4
 8005834:	4667      	mov	r7, ip
 8005836:	9d06      	ldr	r5, [sp, #24]
 8005838:	ab48      	add	r3, sp, #288	; 0x120
 800583a:	3508      	adds	r5, #8
 800583c:	441d      	add	r5, r3
 800583e:	2e00      	cmp	r6, #0
 8005840:	da42      	bge.n	80058c8 <__kernel_rem_pio2+0x5bc>
 8005842:	9b00      	ldr	r3, [sp, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d049      	beq.n	80058dc <__kernel_rem_pio2+0x5d0>
 8005848:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800584c:	4662      	mov	r2, ip
 800584e:	460b      	mov	r3, r1
 8005850:	9904      	ldr	r1, [sp, #16]
 8005852:	2601      	movs	r6, #1
 8005854:	e9c1 2300 	strd	r2, r3, [r1]
 8005858:	a948      	add	r1, sp, #288	; 0x120
 800585a:	463b      	mov	r3, r7
 800585c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005860:	f7fa fc7a 	bl	8000158 <__aeabi_dsub>
 8005864:	4684      	mov	ip, r0
 8005866:	460f      	mov	r7, r1
 8005868:	ad48      	add	r5, sp, #288	; 0x120
 800586a:	42b4      	cmp	r4, r6
 800586c:	da38      	bge.n	80058e0 <__kernel_rem_pio2+0x5d4>
 800586e:	9b00      	ldr	r3, [sp, #0]
 8005870:	b10b      	cbz	r3, 8005876 <__kernel_rem_pio2+0x56a>
 8005872:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005876:	4662      	mov	r2, ip
 8005878:	463b      	mov	r3, r7
 800587a:	9904      	ldr	r1, [sp, #16]
 800587c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005880:	e011      	b.n	80058a6 <__kernel_rem_pio2+0x59a>
 8005882:	2700      	movs	r7, #0
 8005884:	463d      	mov	r5, r7
 8005886:	9b06      	ldr	r3, [sp, #24]
 8005888:	aa98      	add	r2, sp, #608	; 0x260
 800588a:	4413      	add	r3, r2
 800588c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8005890:	2c00      	cmp	r4, #0
 8005892:	da0f      	bge.n	80058b4 <__kernel_rem_pio2+0x5a8>
 8005894:	9b00      	ldr	r3, [sp, #0]
 8005896:	b10b      	cbz	r3, 800589c <__kernel_rem_pio2+0x590>
 8005898:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800589c:	463a      	mov	r2, r7
 800589e:	462b      	mov	r3, r5
 80058a0:	9904      	ldr	r1, [sp, #16]
 80058a2:	e9c1 2300 	strd	r2, r3, [r1]
 80058a6:	9b05      	ldr	r3, [sp, #20]
 80058a8:	f003 0007 	and.w	r0, r3, #7
 80058ac:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80058b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b4:	4638      	mov	r0, r7
 80058b6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80058ba:	4629      	mov	r1, r5
 80058bc:	f7fa fc4e 	bl	800015c <__adddf3>
 80058c0:	3c01      	subs	r4, #1
 80058c2:	4607      	mov	r7, r0
 80058c4:	460d      	mov	r5, r1
 80058c6:	e7e3      	b.n	8005890 <__kernel_rem_pio2+0x584>
 80058c8:	4660      	mov	r0, ip
 80058ca:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80058ce:	4639      	mov	r1, r7
 80058d0:	f7fa fc44 	bl	800015c <__adddf3>
 80058d4:	3e01      	subs	r6, #1
 80058d6:	4684      	mov	ip, r0
 80058d8:	460f      	mov	r7, r1
 80058da:	e7b0      	b.n	800583e <__kernel_rem_pio2+0x532>
 80058dc:	4639      	mov	r1, r7
 80058de:	e7b5      	b.n	800584c <__kernel_rem_pio2+0x540>
 80058e0:	4660      	mov	r0, ip
 80058e2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80058e6:	4639      	mov	r1, r7
 80058e8:	f7fa fc38 	bl	800015c <__adddf3>
 80058ec:	3601      	adds	r6, #1
 80058ee:	4684      	mov	ip, r0
 80058f0:	460f      	mov	r7, r1
 80058f2:	e7ba      	b.n	800586a <__kernel_rem_pio2+0x55e>
 80058f4:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 80058f8:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80058fc:	4640      	mov	r0, r8
 80058fe:	4649      	mov	r1, r9
 8005900:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005904:	f7fa fc2a 	bl	800015c <__adddf3>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4606      	mov	r6, r0
 800590e:	460f      	mov	r7, r1
 8005910:	4640      	mov	r0, r8
 8005912:	4649      	mov	r1, r9
 8005914:	f7fa fc20 	bl	8000158 <__aeabi_dsub>
 8005918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800591c:	f7fa fc1e 	bl	800015c <__adddf3>
 8005920:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005924:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005928:	e9ca 6700 	strd	r6, r7, [sl]
 800592c:	e757      	b.n	80057de <__kernel_rem_pio2+0x4d2>
 800592e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 8005932:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8005936:	4630      	mov	r0, r6
 8005938:	4639      	mov	r1, r7
 800593a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800593e:	f7fa fc0d 	bl	800015c <__adddf3>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4680      	mov	r8, r0
 8005948:	4689      	mov	r9, r1
 800594a:	4630      	mov	r0, r6
 800594c:	4639      	mov	r1, r7
 800594e:	f7fa fc03 	bl	8000158 <__aeabi_dsub>
 8005952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005956:	f7fa fc01 	bl	800015c <__adddf3>
 800595a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800595e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005962:	e9c5 8900 	strd	r8, r9, [r5]
 8005966:	e73f      	b.n	80057e8 <__kernel_rem_pio2+0x4dc>
 8005968:	4638      	mov	r0, r7
 800596a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800596e:	4631      	mov	r1, r6
 8005970:	f7fa fbf4 	bl	800015c <__adddf3>
 8005974:	3c01      	subs	r4, #1
 8005976:	4607      	mov	r7, r0
 8005978:	460e      	mov	r6, r1
 800597a:	e73f      	b.n	80057fc <__kernel_rem_pio2+0x4f0>
 800597c:	9b04      	ldr	r3, [sp, #16]
 800597e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005982:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005986:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800598a:	601d      	str	r5, [r3, #0]
 800598c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8005990:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005994:	615e      	str	r6, [r3, #20]
 8005996:	e786      	b.n	80058a6 <__kernel_rem_pio2+0x59a>
 8005998:	41700000 	.word	0x41700000
 800599c:	3e700000 	.word	0x3e700000

080059a0 <__kernel_sin>:
 80059a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a4:	b086      	sub	sp, #24
 80059a6:	e9cd 2300 	strd	r2, r3, [sp]
 80059aa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80059ae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80059b2:	4682      	mov	sl, r0
 80059b4:	460c      	mov	r4, r1
 80059b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80059b8:	da03      	bge.n	80059c2 <__kernel_sin+0x22>
 80059ba:	f7fb f81f 	bl	80009fc <__aeabi_d2iz>
 80059be:	2800      	cmp	r0, #0
 80059c0:	d050      	beq.n	8005a64 <__kernel_sin+0xc4>
 80059c2:	4652      	mov	r2, sl
 80059c4:	4623      	mov	r3, r4
 80059c6:	4650      	mov	r0, sl
 80059c8:	4621      	mov	r1, r4
 80059ca:	f7fa fd7d 	bl	80004c8 <__aeabi_dmul>
 80059ce:	4606      	mov	r6, r0
 80059d0:	460f      	mov	r7, r1
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4650      	mov	r0, sl
 80059d8:	4621      	mov	r1, r4
 80059da:	f7fa fd75 	bl	80004c8 <__aeabi_dmul>
 80059de:	a33e      	add	r3, pc, #248	; (adr r3, 8005ad8 <__kernel_sin+0x138>)
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	4680      	mov	r8, r0
 80059e6:	4689      	mov	r9, r1
 80059e8:	4630      	mov	r0, r6
 80059ea:	4639      	mov	r1, r7
 80059ec:	f7fa fd6c 	bl	80004c8 <__aeabi_dmul>
 80059f0:	a33b      	add	r3, pc, #236	; (adr r3, 8005ae0 <__kernel_sin+0x140>)
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f7fa fbaf 	bl	8000158 <__aeabi_dsub>
 80059fa:	4632      	mov	r2, r6
 80059fc:	463b      	mov	r3, r7
 80059fe:	f7fa fd63 	bl	80004c8 <__aeabi_dmul>
 8005a02:	a339      	add	r3, pc, #228	; (adr r3, 8005ae8 <__kernel_sin+0x148>)
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	f7fa fba8 	bl	800015c <__adddf3>
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	463b      	mov	r3, r7
 8005a10:	f7fa fd5a 	bl	80004c8 <__aeabi_dmul>
 8005a14:	a336      	add	r3, pc, #216	; (adr r3, 8005af0 <__kernel_sin+0x150>)
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	f7fa fb9d 	bl	8000158 <__aeabi_dsub>
 8005a1e:	4632      	mov	r2, r6
 8005a20:	463b      	mov	r3, r7
 8005a22:	f7fa fd51 	bl	80004c8 <__aeabi_dmul>
 8005a26:	a334      	add	r3, pc, #208	; (adr r3, 8005af8 <__kernel_sin+0x158>)
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	f7fa fb96 	bl	800015c <__adddf3>
 8005a30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a34:	b9dd      	cbnz	r5, 8005a6e <__kernel_sin+0xce>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	f7fa fd43 	bl	80004c8 <__aeabi_dmul>
 8005a42:	a32f      	add	r3, pc, #188	; (adr r3, 8005b00 <__kernel_sin+0x160>)
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	f7fa fb86 	bl	8000158 <__aeabi_dsub>
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	464b      	mov	r3, r9
 8005a50:	f7fa fd3a 	bl	80004c8 <__aeabi_dmul>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4650      	mov	r0, sl
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	f7fa fb7e 	bl	800015c <__adddf3>
 8005a60:	4682      	mov	sl, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	4650      	mov	r0, sl
 8005a66:	4621      	mov	r1, r4
 8005a68:	b006      	add	sp, #24
 8005a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6e:	2200      	movs	r2, #0
 8005a70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a74:	4b24      	ldr	r3, [pc, #144]	; (8005b08 <__kernel_sin+0x168>)
 8005a76:	f7fa fd27 	bl	80004c8 <__aeabi_dmul>
 8005a7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	f7fa fd1f 	bl	80004c8 <__aeabi_dmul>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a92:	f7fa fb61 	bl	8000158 <__aeabi_dsub>
 8005a96:	4632      	mov	r2, r6
 8005a98:	463b      	mov	r3, r7
 8005a9a:	f7fa fd15 	bl	80004c8 <__aeabi_dmul>
 8005a9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aa2:	f7fa fb59 	bl	8000158 <__aeabi_dsub>
 8005aa6:	a316      	add	r3, pc, #88	; (adr r3, 8005b00 <__kernel_sin+0x160>)
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	4606      	mov	r6, r0
 8005aae:	460f      	mov	r7, r1
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	f7fa fd08 	bl	80004c8 <__aeabi_dmul>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4630      	mov	r0, r6
 8005abe:	4639      	mov	r1, r7
 8005ac0:	f7fa fb4c 	bl	800015c <__adddf3>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4650      	mov	r0, sl
 8005aca:	4621      	mov	r1, r4
 8005acc:	f7fa fb44 	bl	8000158 <__aeabi_dsub>
 8005ad0:	e7c6      	b.n	8005a60 <__kernel_sin+0xc0>
 8005ad2:	bf00      	nop
 8005ad4:	f3af 8000 	nop.w
 8005ad8:	5acfd57c 	.word	0x5acfd57c
 8005adc:	3de5d93a 	.word	0x3de5d93a
 8005ae0:	8a2b9ceb 	.word	0x8a2b9ceb
 8005ae4:	3e5ae5e6 	.word	0x3e5ae5e6
 8005ae8:	57b1fe7d 	.word	0x57b1fe7d
 8005aec:	3ec71de3 	.word	0x3ec71de3
 8005af0:	19c161d5 	.word	0x19c161d5
 8005af4:	3f2a01a0 	.word	0x3f2a01a0
 8005af8:	1110f8a6 	.word	0x1110f8a6
 8005afc:	3f811111 	.word	0x3f811111
 8005b00:	55555549 	.word	0x55555549
 8005b04:	3fc55555 	.word	0x3fc55555
 8005b08:	3fe00000 	.word	0x3fe00000

08005b0c <fabs>:
 8005b0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b10:	4619      	mov	r1, r3
 8005b12:	4770      	bx	lr
 8005b14:	0000      	movs	r0, r0
	...

08005b18 <floor>:
 8005b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b1c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005b20:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8005b24:	2e13      	cmp	r6, #19
 8005b26:	4607      	mov	r7, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	dc35      	bgt.n	8005b9c <floor+0x84>
 8005b30:	2e00      	cmp	r6, #0
 8005b32:	da16      	bge.n	8005b62 <floor+0x4a>
 8005b34:	a336      	add	r3, pc, #216	; (adr r3, 8005c10 <floor+0xf8>)
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	f7fa fb0f 	bl	800015c <__adddf3>
 8005b3e:	2200      	movs	r2, #0
 8005b40:	2300      	movs	r3, #0
 8005b42:	f7fa ff51 	bl	80009e8 <__aeabi_dcmpgt>
 8005b46:	b148      	cbz	r0, 8005b5c <floor+0x44>
 8005b48:	2c00      	cmp	r4, #0
 8005b4a:	da5b      	bge.n	8005c04 <floor+0xec>
 8005b4c:	2500      	movs	r5, #0
 8005b4e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005b52:	4a31      	ldr	r2, [pc, #196]	; (8005c18 <floor+0x100>)
 8005b54:	433b      	orrs	r3, r7
 8005b56:	42ab      	cmp	r3, r5
 8005b58:	bf18      	it	ne
 8005b5a:	4614      	movne	r4, r2
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	462f      	mov	r7, r5
 8005b60:	e026      	b.n	8005bb0 <floor+0x98>
 8005b62:	4a2e      	ldr	r2, [pc, #184]	; (8005c1c <floor+0x104>)
 8005b64:	fa42 f806 	asr.w	r8, r2, r6
 8005b68:	ea01 0208 	and.w	r2, r1, r8
 8005b6c:	4302      	orrs	r2, r0
 8005b6e:	d01f      	beq.n	8005bb0 <floor+0x98>
 8005b70:	a327      	add	r3, pc, #156	; (adr r3, 8005c10 <floor+0xf8>)
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f7fa faf1 	bl	800015c <__adddf3>
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f7fa ff33 	bl	80009e8 <__aeabi_dcmpgt>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d0ea      	beq.n	8005b5c <floor+0x44>
 8005b86:	2c00      	cmp	r4, #0
 8005b88:	bfbe      	ittt	lt
 8005b8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005b8e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005b92:	19a4      	addlt	r4, r4, r6
 8005b94:	ea24 0408 	bic.w	r4, r4, r8
 8005b98:	2500      	movs	r5, #0
 8005b9a:	e7df      	b.n	8005b5c <floor+0x44>
 8005b9c:	2e33      	cmp	r6, #51	; 0x33
 8005b9e:	dd0b      	ble.n	8005bb8 <floor+0xa0>
 8005ba0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005ba4:	d104      	bne.n	8005bb0 <floor+0x98>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	f7fa fad8 	bl	800015c <__adddf3>
 8005bac:	4607      	mov	r7, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bbc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005bc0:	fa22 f808 	lsr.w	r8, r2, r8
 8005bc4:	ea18 0f00 	tst.w	r8, r0
 8005bc8:	d0f2      	beq.n	8005bb0 <floor+0x98>
 8005bca:	a311      	add	r3, pc, #68	; (adr r3, 8005c10 <floor+0xf8>)
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	f7fa fac4 	bl	800015c <__adddf3>
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f7fa ff06 	bl	80009e8 <__aeabi_dcmpgt>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d0bd      	beq.n	8005b5c <floor+0x44>
 8005be0:	2c00      	cmp	r4, #0
 8005be2:	da02      	bge.n	8005bea <floor+0xd2>
 8005be4:	2e14      	cmp	r6, #20
 8005be6:	d103      	bne.n	8005bf0 <floor+0xd8>
 8005be8:	3401      	adds	r4, #1
 8005bea:	ea25 0508 	bic.w	r5, r5, r8
 8005bee:	e7b5      	b.n	8005b5c <floor+0x44>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005bf6:	fa03 f606 	lsl.w	r6, r3, r6
 8005bfa:	4435      	add	r5, r6
 8005bfc:	42bd      	cmp	r5, r7
 8005bfe:	bf38      	it	cc
 8005c00:	18e4      	addcc	r4, r4, r3
 8005c02:	e7f2      	b.n	8005bea <floor+0xd2>
 8005c04:	2500      	movs	r5, #0
 8005c06:	462c      	mov	r4, r5
 8005c08:	e7a8      	b.n	8005b5c <floor+0x44>
 8005c0a:	bf00      	nop
 8005c0c:	f3af 8000 	nop.w
 8005c10:	8800759c 	.word	0x8800759c
 8005c14:	7e37e43c 	.word	0x7e37e43c
 8005c18:	bff00000 	.word	0xbff00000
 8005c1c:	000fffff 	.word	0x000fffff

08005c20 <scalbn>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	4616      	mov	r6, r2
 8005c24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c28:	4604      	mov	r4, r0
 8005c2a:	460d      	mov	r5, r1
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	b982      	cbnz	r2, 8005c52 <scalbn+0x32>
 8005c30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c34:	4303      	orrs	r3, r0
 8005c36:	d034      	beq.n	8005ca2 <scalbn+0x82>
 8005c38:	4b2d      	ldr	r3, [pc, #180]	; (8005cf0 <scalbn+0xd0>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f7fa fc44 	bl	80004c8 <__aeabi_dmul>
 8005c40:	4b2c      	ldr	r3, [pc, #176]	; (8005cf4 <scalbn+0xd4>)
 8005c42:	4604      	mov	r4, r0
 8005c44:	429e      	cmp	r6, r3
 8005c46:	460d      	mov	r5, r1
 8005c48:	da0d      	bge.n	8005c66 <scalbn+0x46>
 8005c4a:	a325      	add	r3, pc, #148	; (adr r3, 8005ce0 <scalbn+0xc0>)
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	e01c      	b.n	8005c8c <scalbn+0x6c>
 8005c52:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005c56:	42ba      	cmp	r2, r7
 8005c58:	d109      	bne.n	8005c6e <scalbn+0x4e>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	f7fa fa7e 	bl	800015c <__adddf3>
 8005c60:	4604      	mov	r4, r0
 8005c62:	460d      	mov	r5, r1
 8005c64:	e01d      	b.n	8005ca2 <scalbn+0x82>
 8005c66:	460b      	mov	r3, r1
 8005c68:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c6c:	3a36      	subs	r2, #54	; 0x36
 8005c6e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005c72:	4432      	add	r2, r6
 8005c74:	428a      	cmp	r2, r1
 8005c76:	dd0c      	ble.n	8005c92 <scalbn+0x72>
 8005c78:	4622      	mov	r2, r4
 8005c7a:	462b      	mov	r3, r5
 8005c7c:	a11a      	add	r1, pc, #104	; (adr r1, 8005ce8 <scalbn+0xc8>)
 8005c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c82:	f000 f83b 	bl	8005cfc <copysign>
 8005c86:	a318      	add	r3, pc, #96	; (adr r3, 8005ce8 <scalbn+0xc8>)
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	f7fa fc1c 	bl	80004c8 <__aeabi_dmul>
 8005c90:	e7e6      	b.n	8005c60 <scalbn+0x40>
 8005c92:	2a00      	cmp	r2, #0
 8005c94:	dd08      	ble.n	8005ca8 <scalbn+0x88>
 8005c96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c9a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c9e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ca8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005cac:	da0b      	bge.n	8005cc6 <scalbn+0xa6>
 8005cae:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005cb2:	429e      	cmp	r6, r3
 8005cb4:	4622      	mov	r2, r4
 8005cb6:	462b      	mov	r3, r5
 8005cb8:	dce0      	bgt.n	8005c7c <scalbn+0x5c>
 8005cba:	a109      	add	r1, pc, #36	; (adr r1, 8005ce0 <scalbn+0xc0>)
 8005cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cc0:	f000 f81c 	bl	8005cfc <copysign>
 8005cc4:	e7c1      	b.n	8005c4a <scalbn+0x2a>
 8005cc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005cca:	3236      	adds	r2, #54	; 0x36
 8005ccc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005cd0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	2200      	movs	r2, #0
 8005cda:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <scalbn+0xd8>)
 8005cdc:	e7d6      	b.n	8005c8c <scalbn+0x6c>
 8005cde:	bf00      	nop
 8005ce0:	c2f8f359 	.word	0xc2f8f359
 8005ce4:	01a56e1f 	.word	0x01a56e1f
 8005ce8:	8800759c 	.word	0x8800759c
 8005cec:	7e37e43c 	.word	0x7e37e43c
 8005cf0:	43500000 	.word	0x43500000
 8005cf4:	ffff3cb0 	.word	0xffff3cb0
 8005cf8:	3c900000 	.word	0x3c900000

08005cfc <copysign>:
 8005cfc:	b530      	push	{r4, r5, lr}
 8005cfe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005d02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d06:	ea42 0503 	orr.w	r5, r2, r3
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	bd30      	pop	{r4, r5, pc}
	...

08005d10 <_init>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	bf00      	nop
 8005d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d16:	bc08      	pop	{r3}
 8005d18:	469e      	mov	lr, r3
 8005d1a:	4770      	bx	lr

08005d1c <_fini>:
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1e:	bf00      	nop
 8005d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d22:	bc08      	pop	{r3}
 8005d24:	469e      	mov	lr, r3
 8005d26:	4770      	bx	lr
