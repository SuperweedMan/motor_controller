
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c60  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005d70  08005d70  00015d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc8  08005fc8  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  08005fc8  08005fc8  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fc8  08005fc8  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fc8  08005fc8  00015fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fcc  08005fcc  00015fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08005fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000220  080061f0  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  080061f0  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c40f  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fa1  00000000  00000000  0002c658  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c68  00000000  00000000  0002e600  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  0002f268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014da0  00000000  00000000  0002fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097fa  00000000  00000000  00044b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072375  00000000  00000000  0004e362  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c06d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bac  00000000  00000000  000c0754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d58 	.word	0x08005d58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	08005d58 	.word	0x08005d58

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_Init+0x28>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_Init+0x28>)
 800103a:	f043 0310 	orr.w	r3, r3, #16
 800103e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f923 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	2000      	movs	r0, #0
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f002 fea0 	bl	8003d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40022000 	.word	0x40022000

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f93b 	bl	80012f6 <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 f903 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000004c 	.word	0x2000004c
 80010b4:	20000004 	.word	0x20000004
 80010b8:	20000000 	.word	0x20000000

080010bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_IncTick+0x1c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_IncTick+0x20>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a03      	ldr	r2, [pc, #12]	; (80010dc <HAL_IncTick+0x20>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	20000004 	.word	0x20000004
 80010dc:	200002f4 	.word	0x200002f4

080010e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <HAL_GetTick+0x10>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	200002f4 	.word	0x200002f4

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800111c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4906      	ldr	r1, [pc, #24]	; (800118c <__NVIC_EnableIRQ+0x34>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	; (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	; (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff90 	bl	8001190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff2d 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff42 	bl	800113c <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff90 	bl	80011e4 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5f 	bl	8001190 <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff35 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffa2 	bl	8001248 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e043      	b.n	80013ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_DMA_Init+0xa8>)
 800132e:	4413      	add	r3, r2
 8001330:	4a22      	ldr	r2, [pc, #136]	; (80013bc <HAL_DMA_Init+0xac>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	009a      	lsls	r2, r3, #2
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a1f      	ldr	r2, [pc, #124]	; (80013c0 <HAL_DMA_Init+0xb0>)
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2202      	movs	r2, #2
 8001348:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800135a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800135e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001368:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001374:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001380:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	bffdfff8 	.word	0xbffdfff8
 80013bc:	cccccccd 	.word	0xcccccccd
 80013c0:	40020000 	.word	0x40020000

080013c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_DMA_Start_IT+0x20>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e04a      	b.n	800147a <HAL_DMA_Start_IT+0xb6>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d13a      	bne.n	800146c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2202      	movs	r2, #2
 80013fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 f938 	bl	8001690 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 020e 	orr.w	r2, r2, #14
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	e00f      	b.n	800145a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0204 	bic.w	r2, r2, #4
 8001448:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f042 020a 	orr.w	r2, r2, #10
 8001458:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f042 0201 	orr.w	r2, r2, #1
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	e005      	b.n	8001478 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001474:	2302      	movs	r3, #2
 8001476:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001478:	7dfb      	ldrb	r3, [r7, #23]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	2204      	movs	r2, #4
 80014a2:	409a      	lsls	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d04f      	beq.n	800154c <HAL_DMA_IRQHandler+0xc8>
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d04a      	beq.n	800154c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0320 	and.w	r3, r3, #32
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d107      	bne.n	80014d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0204 	bic.w	r2, r2, #4
 80014d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a66      	ldr	r2, [pc, #408]	; (8001674 <HAL_DMA_IRQHandler+0x1f0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d029      	beq.n	8001532 <HAL_DMA_IRQHandler+0xae>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a65      	ldr	r2, [pc, #404]	; (8001678 <HAL_DMA_IRQHandler+0x1f4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d022      	beq.n	800152e <HAL_DMA_IRQHandler+0xaa>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a63      	ldr	r2, [pc, #396]	; (800167c <HAL_DMA_IRQHandler+0x1f8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d01a      	beq.n	8001528 <HAL_DMA_IRQHandler+0xa4>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a62      	ldr	r2, [pc, #392]	; (8001680 <HAL_DMA_IRQHandler+0x1fc>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d012      	beq.n	8001522 <HAL_DMA_IRQHandler+0x9e>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a60      	ldr	r2, [pc, #384]	; (8001684 <HAL_DMA_IRQHandler+0x200>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00a      	beq.n	800151c <HAL_DMA_IRQHandler+0x98>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a5f      	ldr	r2, [pc, #380]	; (8001688 <HAL_DMA_IRQHandler+0x204>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d102      	bne.n	8001516 <HAL_DMA_IRQHandler+0x92>
 8001510:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001514:	e00e      	b.n	8001534 <HAL_DMA_IRQHandler+0xb0>
 8001516:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800151a:	e00b      	b.n	8001534 <HAL_DMA_IRQHandler+0xb0>
 800151c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001520:	e008      	b.n	8001534 <HAL_DMA_IRQHandler+0xb0>
 8001522:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001526:	e005      	b.n	8001534 <HAL_DMA_IRQHandler+0xb0>
 8001528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152c:	e002      	b.n	8001534 <HAL_DMA_IRQHandler+0xb0>
 800152e:	2340      	movs	r3, #64	; 0x40
 8001530:	e000      	b.n	8001534 <HAL_DMA_IRQHandler+0xb0>
 8001532:	2304      	movs	r3, #4
 8001534:	4a55      	ldr	r2, [pc, #340]	; (800168c <HAL_DMA_IRQHandler+0x208>)
 8001536:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 8094 	beq.w	800166a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800154a:	e08e      	b.n	800166a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	2202      	movs	r2, #2
 8001552:	409a      	lsls	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d056      	beq.n	800160a <HAL_DMA_IRQHandler+0x186>
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d051      	beq.n	800160a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0320 	and.w	r3, r3, #32
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10b      	bne.n	800158c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 020a 	bic.w	r2, r2, #10
 8001582:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a38      	ldr	r2, [pc, #224]	; (8001674 <HAL_DMA_IRQHandler+0x1f0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d029      	beq.n	80015ea <HAL_DMA_IRQHandler+0x166>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a37      	ldr	r2, [pc, #220]	; (8001678 <HAL_DMA_IRQHandler+0x1f4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d022      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x162>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a35      	ldr	r2, [pc, #212]	; (800167c <HAL_DMA_IRQHandler+0x1f8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d01a      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x15c>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a34      	ldr	r2, [pc, #208]	; (8001680 <HAL_DMA_IRQHandler+0x1fc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d012      	beq.n	80015da <HAL_DMA_IRQHandler+0x156>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a32      	ldr	r2, [pc, #200]	; (8001684 <HAL_DMA_IRQHandler+0x200>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d00a      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x150>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a31      	ldr	r2, [pc, #196]	; (8001688 <HAL_DMA_IRQHandler+0x204>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d102      	bne.n	80015ce <HAL_DMA_IRQHandler+0x14a>
 80015c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015cc:	e00e      	b.n	80015ec <HAL_DMA_IRQHandler+0x168>
 80015ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015d2:	e00b      	b.n	80015ec <HAL_DMA_IRQHandler+0x168>
 80015d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d8:	e008      	b.n	80015ec <HAL_DMA_IRQHandler+0x168>
 80015da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015de:	e005      	b.n	80015ec <HAL_DMA_IRQHandler+0x168>
 80015e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e4:	e002      	b.n	80015ec <HAL_DMA_IRQHandler+0x168>
 80015e6:	2320      	movs	r3, #32
 80015e8:	e000      	b.n	80015ec <HAL_DMA_IRQHandler+0x168>
 80015ea:	2302      	movs	r3, #2
 80015ec:	4a27      	ldr	r2, [pc, #156]	; (800168c <HAL_DMA_IRQHandler+0x208>)
 80015ee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d034      	beq.n	800166a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001608:	e02f      	b.n	800166a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	2208      	movs	r2, #8
 8001610:	409a      	lsls	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d028      	beq.n	800166c <HAL_DMA_IRQHandler+0x1e8>
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d023      	beq.n	800166c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 020e 	bic.w	r2, r2, #14
 8001632:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163c:	2101      	movs	r1, #1
 800163e:	fa01 f202 	lsl.w	r2, r1, r2
 8001642:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	2b00      	cmp	r3, #0
 8001660:	d004      	beq.n	800166c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	4798      	blx	r3
    }
  }
  return;
 800166a:	bf00      	nop
 800166c:	bf00      	nop
}
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40020008 	.word	0x40020008
 8001678:	4002001c 	.word	0x4002001c
 800167c:	40020030 	.word	0x40020030
 8001680:	40020044 	.word	0x40020044
 8001684:	40020058 	.word	0x40020058
 8001688:	4002006c 	.word	0x4002006c
 800168c:	40020000 	.word	0x40020000

08001690 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a6:	2101      	movs	r1, #1
 80016a8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b10      	cmp	r3, #16
 80016bc:	d108      	bne.n	80016d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016ce:	e007      	b.n	80016e0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	60da      	str	r2, [r3, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b08b      	sub	sp, #44	; 0x2c
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	e127      	b.n	8001950 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001700:	2201      	movs	r2, #1
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 8116 	bne.w	800194a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b12      	cmp	r3, #18
 8001724:	d034      	beq.n	8001790 <HAL_GPIO_Init+0xa4>
 8001726:	2b12      	cmp	r3, #18
 8001728:	d80d      	bhi.n	8001746 <HAL_GPIO_Init+0x5a>
 800172a:	2b02      	cmp	r3, #2
 800172c:	d02b      	beq.n	8001786 <HAL_GPIO_Init+0x9a>
 800172e:	2b02      	cmp	r3, #2
 8001730:	d804      	bhi.n	800173c <HAL_GPIO_Init+0x50>
 8001732:	2b00      	cmp	r3, #0
 8001734:	d031      	beq.n	800179a <HAL_GPIO_Init+0xae>
 8001736:	2b01      	cmp	r3, #1
 8001738:	d01c      	beq.n	8001774 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800173a:	e048      	b.n	80017ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800173c:	2b03      	cmp	r3, #3
 800173e:	d043      	beq.n	80017c8 <HAL_GPIO_Init+0xdc>
 8001740:	2b11      	cmp	r3, #17
 8001742:	d01b      	beq.n	800177c <HAL_GPIO_Init+0x90>
          break;
 8001744:	e043      	b.n	80017ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001746:	4a89      	ldr	r2, [pc, #548]	; (800196c <HAL_GPIO_Init+0x280>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d026      	beq.n	800179a <HAL_GPIO_Init+0xae>
 800174c:	4a87      	ldr	r2, [pc, #540]	; (800196c <HAL_GPIO_Init+0x280>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d806      	bhi.n	8001760 <HAL_GPIO_Init+0x74>
 8001752:	4a87      	ldr	r2, [pc, #540]	; (8001970 <HAL_GPIO_Init+0x284>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d020      	beq.n	800179a <HAL_GPIO_Init+0xae>
 8001758:	4a86      	ldr	r2, [pc, #536]	; (8001974 <HAL_GPIO_Init+0x288>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01d      	beq.n	800179a <HAL_GPIO_Init+0xae>
          break;
 800175e:	e036      	b.n	80017ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001760:	4a85      	ldr	r2, [pc, #532]	; (8001978 <HAL_GPIO_Init+0x28c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d019      	beq.n	800179a <HAL_GPIO_Init+0xae>
 8001766:	4a85      	ldr	r2, [pc, #532]	; (800197c <HAL_GPIO_Init+0x290>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d016      	beq.n	800179a <HAL_GPIO_Init+0xae>
 800176c:	4a84      	ldr	r2, [pc, #528]	; (8001980 <HAL_GPIO_Init+0x294>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_GPIO_Init+0xae>
          break;
 8001772:	e02c      	b.n	80017ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	623b      	str	r3, [r7, #32]
          break;
 800177a:	e028      	b.n	80017ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	3304      	adds	r3, #4
 8001782:	623b      	str	r3, [r7, #32]
          break;
 8001784:	e023      	b.n	80017ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	3308      	adds	r3, #8
 800178c:	623b      	str	r3, [r7, #32]
          break;
 800178e:	e01e      	b.n	80017ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	330c      	adds	r3, #12
 8001796:	623b      	str	r3, [r7, #32]
          break;
 8001798:	e019      	b.n	80017ce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017a2:	2304      	movs	r3, #4
 80017a4:	623b      	str	r3, [r7, #32]
          break;
 80017a6:	e012      	b.n	80017ce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d105      	bne.n	80017bc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b0:	2308      	movs	r3, #8
 80017b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69fa      	ldr	r2, [r7, #28]
 80017b8:	611a      	str	r2, [r3, #16]
          break;
 80017ba:	e008      	b.n	80017ce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017bc:	2308      	movs	r3, #8
 80017be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	615a      	str	r2, [r3, #20]
          break;
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
          break;
 80017cc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2bff      	cmp	r3, #255	; 0xff
 80017d2:	d801      	bhi.n	80017d8 <HAL_GPIO_Init+0xec>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	e001      	b.n	80017dc <HAL_GPIO_Init+0xf0>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3304      	adds	r3, #4
 80017dc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2bff      	cmp	r3, #255	; 0xff
 80017e2:	d802      	bhi.n	80017ea <HAL_GPIO_Init+0xfe>
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	e002      	b.n	80017f0 <HAL_GPIO_Init+0x104>
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	3b08      	subs	r3, #8
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	210f      	movs	r1, #15
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	401a      	ands	r2, r3
 8001802:	6a39      	ldr	r1, [r7, #32]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	431a      	orrs	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 8096 	beq.w	800194a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800181e:	4b59      	ldr	r3, [pc, #356]	; (8001984 <HAL_GPIO_Init+0x298>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4a58      	ldr	r2, [pc, #352]	; (8001984 <HAL_GPIO_Init+0x298>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6193      	str	r3, [r2, #24]
 800182a:	4b56      	ldr	r3, [pc, #344]	; (8001984 <HAL_GPIO_Init+0x298>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001836:	4a54      	ldr	r2, [pc, #336]	; (8001988 <HAL_GPIO_Init+0x29c>)
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001842:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	4013      	ands	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4b      	ldr	r2, [pc, #300]	; (800198c <HAL_GPIO_Init+0x2a0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0x19e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4a      	ldr	r2, [pc, #296]	; (8001990 <HAL_GPIO_Init+0x2a4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00d      	beq.n	8001886 <HAL_GPIO_Init+0x19a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a49      	ldr	r2, [pc, #292]	; (8001994 <HAL_GPIO_Init+0x2a8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d007      	beq.n	8001882 <HAL_GPIO_Init+0x196>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a48      	ldr	r2, [pc, #288]	; (8001998 <HAL_GPIO_Init+0x2ac>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_GPIO_Init+0x192>
 800187a:	2303      	movs	r3, #3
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x1a0>
 800187e:	2304      	movs	r3, #4
 8001880:	e004      	b.n	800188c <HAL_GPIO_Init+0x1a0>
 8001882:	2302      	movs	r3, #2
 8001884:	e002      	b.n	800188c <HAL_GPIO_Init+0x1a0>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_GPIO_Init+0x1a0>
 800188a:	2300      	movs	r3, #0
 800188c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188e:	f002 0203 	and.w	r2, r2, #3
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	4093      	lsls	r3, r2
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800189c:	493a      	ldr	r1, [pc, #232]	; (8001988 <HAL_GPIO_Init+0x29c>)
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d006      	beq.n	80018c4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018b6:	4b39      	ldr	r3, [pc, #228]	; (800199c <HAL_GPIO_Init+0x2b0>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4938      	ldr	r1, [pc, #224]	; (800199c <HAL_GPIO_Init+0x2b0>)
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]
 80018c2:	e006      	b.n	80018d2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018c4:	4b35      	ldr	r3, [pc, #212]	; (800199c <HAL_GPIO_Init+0x2b0>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	4933      	ldr	r1, [pc, #204]	; (800199c <HAL_GPIO_Init+0x2b0>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d006      	beq.n	80018ec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018de:	4b2f      	ldr	r3, [pc, #188]	; (800199c <HAL_GPIO_Init+0x2b0>)
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	492e      	ldr	r1, [pc, #184]	; (800199c <HAL_GPIO_Init+0x2b0>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	604b      	str	r3, [r1, #4]
 80018ea:	e006      	b.n	80018fa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <HAL_GPIO_Init+0x2b0>)
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	4929      	ldr	r1, [pc, #164]	; (800199c <HAL_GPIO_Init+0x2b0>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001906:	4b25      	ldr	r3, [pc, #148]	; (800199c <HAL_GPIO_Init+0x2b0>)
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	4924      	ldr	r1, [pc, #144]	; (800199c <HAL_GPIO_Init+0x2b0>)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
 8001912:	e006      	b.n	8001922 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_GPIO_Init+0x2b0>)
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	43db      	mvns	r3, r3
 800191c:	491f      	ldr	r1, [pc, #124]	; (800199c <HAL_GPIO_Init+0x2b0>)
 800191e:	4013      	ands	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d006      	beq.n	800193c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_GPIO_Init+0x2b0>)
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	491a      	ldr	r1, [pc, #104]	; (800199c <HAL_GPIO_Init+0x2b0>)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	60cb      	str	r3, [r1, #12]
 800193a:	e006      	b.n	800194a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_GPIO_Init+0x2b0>)
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	43db      	mvns	r3, r3
 8001944:	4915      	ldr	r1, [pc, #84]	; (800199c <HAL_GPIO_Init+0x2b0>)
 8001946:	4013      	ands	r3, r2
 8001948:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3301      	adds	r3, #1
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	fa22 f303 	lsr.w	r3, r2, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	f47f aed0 	bne.w	8001700 <HAL_GPIO_Init+0x14>
  }
}
 8001960:	bf00      	nop
 8001962:	372c      	adds	r7, #44	; 0x2c
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	10210000 	.word	0x10210000
 8001970:	10110000 	.word	0x10110000
 8001974:	10120000 	.word	0x10120000
 8001978:	10310000 	.word	0x10310000
 800197c:	10320000 	.word	0x10320000
 8001980:	10220000 	.word	0x10220000
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	40010800 	.word	0x40010800
 8001990:	40010c00 	.word	0x40010c00
 8001994:	40011000 	.word	0x40011000
 8001998:	40011400 	.word	0x40011400
 800199c:	40010400 	.word	0x40010400

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019bc:	e003      	b.n	80019c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	611a      	str	r2, [r3, #16]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e26c      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8087 	beq.w	8001afe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f0:	4b92      	ldr	r3, [pc, #584]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d00c      	beq.n	8001a16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019fc:	4b8f      	ldr	r3, [pc, #572]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d112      	bne.n	8001a2e <HAL_RCC_OscConfig+0x5e>
 8001a08:	4b8c      	ldr	r3, [pc, #560]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a14:	d10b      	bne.n	8001a2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a16:	4b89      	ldr	r3, [pc, #548]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d06c      	beq.n	8001afc <HAL_RCC_OscConfig+0x12c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d168      	bne.n	8001afc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e246      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x76>
 8001a38:	4b80      	ldr	r3, [pc, #512]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a7f      	ldr	r2, [pc, #508]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	e02e      	b.n	8001aa4 <HAL_RCC_OscConfig+0xd4>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x98>
 8001a4e:	4b7b      	ldr	r3, [pc, #492]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a7a      	ldr	r2, [pc, #488]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b78      	ldr	r3, [pc, #480]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a77      	ldr	r2, [pc, #476]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e01d      	b.n	8001aa4 <HAL_RCC_OscConfig+0xd4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0xbc>
 8001a72:	4b72      	ldr	r3, [pc, #456]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a71      	ldr	r2, [pc, #452]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a6e      	ldr	r2, [pc, #440]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e00b      	b.n	8001aa4 <HAL_RCC_OscConfig+0xd4>
 8001a8c:	4b6b      	ldr	r3, [pc, #428]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a6a      	ldr	r2, [pc, #424]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a67      	ldr	r2, [pc, #412]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d013      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fb18 	bl	80010e0 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fb14 	bl	80010e0 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e1fa      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b5d      	ldr	r3, [pc, #372]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
 8001ad2:	e014      	b.n	8001afe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fb04 	bl	80010e0 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001adc:	f7ff fb00 	bl	80010e0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e1e6      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x10c>
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d063      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0a:	4b4c      	ldr	r3, [pc, #304]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00b      	beq.n	8001b2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b16:	4b49      	ldr	r3, [pc, #292]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d11c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x18c>
 8001b22:	4b46      	ldr	r3, [pc, #280]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d116      	bne.n	8001b5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_RCC_OscConfig+0x176>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e1ba      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4939      	ldr	r1, [pc, #228]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	e03a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d020      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b64:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fab9 	bl	80010e0 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b72:	f7ff fab5 	bl	80010e0 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e19b      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4927      	ldr	r1, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
 8001ba4:	e015      	b.n	8001bd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff fa98 	bl	80010e0 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa94 	bl	80010e0 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e17a      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d03a      	beq.n	8001c54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d019      	beq.n	8001c1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bec:	f7ff fa78 	bl	80010e0 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fa74 	bl	80010e0 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e15a      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f000 fada 	bl	80021cc <RCC_Delay>
 8001c18:	e01c      	b.n	8001c54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c20:	f7ff fa5e 	bl	80010e0 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c26:	e00f      	b.n	8001c48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c28:	f7ff fa5a 	bl	80010e0 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d908      	bls.n	8001c48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e140      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	42420000 	.word	0x42420000
 8001c44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c48:	4b9e      	ldr	r3, [pc, #632]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1e9      	bne.n	8001c28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80a6 	beq.w	8001dae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c66:	4b97      	ldr	r3, [pc, #604]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10d      	bne.n	8001c8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	4b94      	ldr	r3, [pc, #592]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a93      	ldr	r2, [pc, #588]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	61d3      	str	r3, [r2, #28]
 8001c7e:	4b91      	ldr	r3, [pc, #580]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8e:	4b8e      	ldr	r3, [pc, #568]	; (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d118      	bne.n	8001ccc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9a:	4b8b      	ldr	r3, [pc, #556]	; (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a8a      	ldr	r2, [pc, #552]	; (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff fa1b 	bl	80010e0 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cae:	f7ff fa17 	bl	80010e0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b64      	cmp	r3, #100	; 0x64
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e0fd      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc0:	4b81      	ldr	r3, [pc, #516]	; (8001ec8 <HAL_RCC_OscConfig+0x4f8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x312>
 8001cd4:	4b7b      	ldr	r3, [pc, #492]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4a7a      	ldr	r2, [pc, #488]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6213      	str	r3, [r2, #32]
 8001ce0:	e02d      	b.n	8001d3e <HAL_RCC_OscConfig+0x36e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x334>
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a75      	ldr	r2, [pc, #468]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	6213      	str	r3, [r2, #32]
 8001cf6:	4b73      	ldr	r3, [pc, #460]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a72      	ldr	r2, [pc, #456]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	f023 0304 	bic.w	r3, r3, #4
 8001d00:	6213      	str	r3, [r2, #32]
 8001d02:	e01c      	b.n	8001d3e <HAL_RCC_OscConfig+0x36e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b05      	cmp	r3, #5
 8001d0a:	d10c      	bne.n	8001d26 <HAL_RCC_OscConfig+0x356>
 8001d0c:	4b6d      	ldr	r3, [pc, #436]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4a6c      	ldr	r2, [pc, #432]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6213      	str	r3, [r2, #32]
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	4a69      	ldr	r2, [pc, #420]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6213      	str	r3, [r2, #32]
 8001d24:	e00b      	b.n	8001d3e <HAL_RCC_OscConfig+0x36e>
 8001d26:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a66      	ldr	r2, [pc, #408]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	6213      	str	r3, [r2, #32]
 8001d32:	4b64      	ldr	r3, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	4a63      	ldr	r2, [pc, #396]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	f023 0304 	bic.w	r3, r3, #4
 8001d3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d015      	beq.n	8001d72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d46:	f7ff f9cb 	bl	80010e0 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7ff f9c7 	bl	80010e0 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e0ab      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	4b57      	ldr	r3, [pc, #348]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0ee      	beq.n	8001d4e <HAL_RCC_OscConfig+0x37e>
 8001d70:	e014      	b.n	8001d9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d72:	f7ff f9b5 	bl	80010e0 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d78:	e00a      	b.n	8001d90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7ff f9b1 	bl	80010e0 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e095      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d90:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ee      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d9c:	7dfb      	ldrb	r3, [r7, #23]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d105      	bne.n	8001dae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da2:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a47      	ldr	r2, [pc, #284]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8081 	beq.w	8001eba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db8:	4b42      	ldr	r3, [pc, #264]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d061      	beq.n	8001e88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d146      	bne.n	8001e5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <HAL_RCC_OscConfig+0x4fc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7ff f985 	bl	80010e0 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dda:	f7ff f981 	bl	80010e0 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e067      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dec:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e00:	d108      	bne.n	8001e14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e02:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	492d      	ldr	r1, [pc, #180]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e14:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a19      	ldr	r1, [r3, #32]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	430b      	orrs	r3, r1
 8001e26:	4927      	ldr	r1, [pc, #156]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e2c:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <HAL_RCC_OscConfig+0x4fc>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7ff f955 	bl	80010e0 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3a:	f7ff f951 	bl	80010e0 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e037      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x46a>
 8001e58:	e02f      	b.n	8001eba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <HAL_RCC_OscConfig+0x4fc>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff f93e 	bl	80010e0 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e68:	f7ff f93a 	bl	80010e0 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e020      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x498>
 8001e86:	e018      	b.n	8001eba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e013      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	42420060 	.word	0x42420060

08001ed0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0d0      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d910      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 0207 	bic.w	r2, r3, #7
 8001efa:	4965      	ldr	r1, [pc, #404]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b63      	ldr	r3, [pc, #396]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0b8      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f2c:	4b59      	ldr	r3, [pc, #356]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a58      	ldr	r2, [pc, #352]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f44:	4b53      	ldr	r3, [pc, #332]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a52      	ldr	r2, [pc, #328]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4b50      	ldr	r3, [pc, #320]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	494d      	ldr	r1, [pc, #308]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d040      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d115      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e07f      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e073      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e06b      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b39      	ldr	r3, [pc, #228]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4936      	ldr	r1, [pc, #216]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc0:	f7ff f88e 	bl	80010e0 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7ff f88a 	bl	80010e0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e053      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 020c 	and.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1eb      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d210      	bcs.n	8002020 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 0207 	bic.w	r2, r3, #7
 8002006:	4922      	ldr	r1, [pc, #136]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e032      	b.n	8002086 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4916      	ldr	r1, [pc, #88]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	490e      	ldr	r1, [pc, #56]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800205e:	f000 f821 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8002062:	4601      	mov	r1, r0
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8002070:	5cd3      	ldrb	r3, [r2, r3]
 8002072:	fa21 f303 	lsr.w	r3, r1, r3
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1cc>)
 8002078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1d0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe ffec 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40022000 	.word	0x40022000
 8002094:	40021000 	.word	0x40021000
 8002098:	08005d84 	.word	0x08005d84
 800209c:	2000004c 	.word	0x2000004c
 80020a0:	20000000 	.word	0x20000000

080020a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	b490      	push	{r4, r7}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020aa:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020ac:	1d3c      	adds	r4, r7, #4
 80020ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d002      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x40>
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d003      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x46>
 80020e2:	e02d      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e4:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020e6:	623b      	str	r3, [r7, #32]
      break;
 80020e8:	e02d      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	0c9b      	lsrs	r3, r3, #18
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020f6:	4413      	add	r3, r2
 80020f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d013      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_RCC_GetSysClockFreq+0xb8>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	0c5b      	lsrs	r3, r3, #17
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002116:	4413      	add	r3, r2
 8002118:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800211c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	4a0f      	ldr	r2, [pc, #60]	; (8002160 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002122:	fb02 f203 	mul.w	r2, r2, r3
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
 800212e:	e004      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002134:	fb02 f303 	mul.w	r3, r2, r3
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	623b      	str	r3, [r7, #32]
      break;
 800213e:	e002      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002140:	4b07      	ldr	r3, [pc, #28]	; (8002160 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002142:	623b      	str	r3, [r7, #32]
      break;
 8002144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002146:	6a3b      	ldr	r3, [r7, #32]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3728      	adds	r7, #40	; 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	bc90      	pop	{r4, r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	08005d70 	.word	0x08005d70
 8002158:	08005d80 	.word	0x08005d80
 800215c:	40021000 	.word	0x40021000
 8002160:	007a1200 	.word	0x007a1200
 8002164:	003d0900 	.word	0x003d0900

08002168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800216c:	4b02      	ldr	r3, [pc, #8]	; (8002178 <HAL_RCC_GetHCLKFreq+0x10>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	2000004c 	.word	0x2000004c

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002180:	f7ff fff2 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 8002184:	4601      	mov	r1, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4a03      	ldr	r2, [pc, #12]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002192:	5cd3      	ldrb	r3, [r2, r3]
 8002194:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	08005d94 	.word	0x08005d94

080021a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021a8:	f7ff ffde 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 80021ac:	4601      	mov	r1, r0
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	0adb      	lsrs	r3, r3, #11
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	4a03      	ldr	r2, [pc, #12]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08005d94 	.word	0x08005d94

080021cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <RCC_Delay+0x34>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <RCC_Delay+0x38>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0a5b      	lsrs	r3, r3, #9
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021e8:	bf00      	nop
  }
  while (Delay --);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1e5a      	subs	r2, r3, #1
 80021ee:	60fa      	str	r2, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f9      	bne.n	80021e8 <RCC_Delay+0x1c>
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	2000004c 	.word	0x2000004c
 8002204:	10624dd3 	.word	0x10624dd3

08002208 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e01d      	b.n	8002256 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f001 fde0 	bl	8003df4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3304      	adds	r3, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f000 f9c8 	bl	80025dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2201      	movs	r2, #1
 8002270:	6839      	ldr	r1, [r7, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fb9c 	bl	80029b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <HAL_TIM_PWM_Start+0x60>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d107      	bne.n	8002292 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002290:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b06      	cmp	r3, #6
 80022a2:	d007      	beq.n	80022b4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40012c00 	.word	0x40012c00

080022c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e07f      	b.n	80023d8 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d106      	bne.n	80022f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f001 fdb1 	bl	8003e54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2202      	movs	r2, #2
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002308:	f023 0307 	bic.w	r3, r3, #7
 800230c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
 8002316:	4619      	mov	r1, r3
 8002318:	4610      	mov	r0, r2
 800231a:	f000 f95f 	bl	80025dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002346:	f023 0303 	bic.w	r3, r3, #3
 800234a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	4313      	orrs	r3, r2
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002364:	f023 030c 	bic.w	r3, r3, #12
 8002368:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002370:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002374:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	4313      	orrs	r3, r2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	011a      	lsls	r2, r3, #4
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	031b      	lsls	r3, r3, #12
 8002394:	4313      	orrs	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80023a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	4313      	orrs	r3, r2
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_TIM_Encoder_Start+0x16>
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d008      	beq.n	8002406 <HAL_TIM_Encoder_Start+0x26>
 80023f4:	e00f      	b.n	8002416 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2201      	movs	r2, #1
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fad6 	bl	80029b0 <TIM_CCxChannelCmd>
      break;
 8002404:	e016      	b.n	8002434 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2201      	movs	r2, #1
 800240c:	2104      	movs	r1, #4
 800240e:	4618      	mov	r0, r3
 8002410:	f000 face 	bl	80029b0 <TIM_CCxChannelCmd>
      break;
 8002414:	e00e      	b.n	8002434 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2201      	movs	r2, #1
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fac6 	bl	80029b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2201      	movs	r2, #1
 800242a:	2104      	movs	r1, #4
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fabf 	bl	80029b0 <TIM_CCxChannelCmd>
      break;
 8002432:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002466:	2302      	movs	r3, #2
 8002468:	e0b4      	b.n	80025d4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b0c      	cmp	r3, #12
 800247e:	f200 809f 	bhi.w	80025c0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002482:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002488:	080024bd 	.word	0x080024bd
 800248c:	080025c1 	.word	0x080025c1
 8002490:	080025c1 	.word	0x080025c1
 8002494:	080025c1 	.word	0x080025c1
 8002498:	080024fd 	.word	0x080024fd
 800249c:	080025c1 	.word	0x080025c1
 80024a0:	080025c1 	.word	0x080025c1
 80024a4:	080025c1 	.word	0x080025c1
 80024a8:	0800253f 	.word	0x0800253f
 80024ac:	080025c1 	.word	0x080025c1
 80024b0:	080025c1 	.word	0x080025c1
 80024b4:	080025c1 	.word	0x080025c1
 80024b8:	0800257f 	.word	0x0800257f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f8ec 	bl	80026a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0208 	orr.w	r2, r2, #8
 80024d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699a      	ldr	r2, [r3, #24]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0204 	bic.w	r2, r2, #4
 80024e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6999      	ldr	r1, [r3, #24]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	619a      	str	r2, [r3, #24]
      break;
 80024fa:	e062      	b.n	80025c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f932 	bl	800276c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6999      	ldr	r1, [r3, #24]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	021a      	lsls	r2, r3, #8
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	619a      	str	r2, [r3, #24]
      break;
 800253c:	e041      	b.n	80025c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f97b 	bl	8002840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69da      	ldr	r2, [r3, #28]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0208 	orr.w	r2, r2, #8
 8002558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	69da      	ldr	r2, [r3, #28]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0204 	bic.w	r2, r2, #4
 8002568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69d9      	ldr	r1, [r3, #28]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	61da      	str	r2, [r3, #28]
      break;
 800257c:	e021      	b.n	80025c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	4618      	mov	r0, r3
 8002586:	f000 f9c5 	bl	8002914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	69da      	ldr	r2, [r3, #28]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69da      	ldr	r2, [r3, #28]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69d9      	ldr	r1, [r3, #28]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	021a      	lsls	r2, r3, #8
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	61da      	str	r2, [r3, #28]
      break;
 80025be:	e000      	b.n	80025c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80025c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a29      	ldr	r2, [pc, #164]	; (8002694 <TIM_Base_SetConfig+0xb8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00b      	beq.n	800260c <TIM_Base_SetConfig+0x30>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fa:	d007      	beq.n	800260c <TIM_Base_SetConfig+0x30>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a26      	ldr	r2, [pc, #152]	; (8002698 <TIM_Base_SetConfig+0xbc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d003      	beq.n	800260c <TIM_Base_SetConfig+0x30>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a25      	ldr	r2, [pc, #148]	; (800269c <TIM_Base_SetConfig+0xc0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d108      	bne.n	800261e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a1c      	ldr	r2, [pc, #112]	; (8002694 <TIM_Base_SetConfig+0xb8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00b      	beq.n	800263e <TIM_Base_SetConfig+0x62>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262c:	d007      	beq.n	800263e <TIM_Base_SetConfig+0x62>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a19      	ldr	r2, [pc, #100]	; (8002698 <TIM_Base_SetConfig+0xbc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d003      	beq.n	800263e <TIM_Base_SetConfig+0x62>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a18      	ldr	r2, [pc, #96]	; (800269c <TIM_Base_SetConfig+0xc0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d108      	bne.n	8002650 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a07      	ldr	r2, [pc, #28]	; (8002694 <TIM_Base_SetConfig+0xb8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d103      	bne.n	8002684 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	615a      	str	r2, [r3, #20]
}
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	40012c00 	.word	0x40012c00
 8002698:	40000400 	.word	0x40000400
 800269c:	40000800 	.word	0x40000800

080026a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f023 0201 	bic.w	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 0303 	bic.w	r3, r3, #3
 80026d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f023 0302 	bic.w	r3, r3, #2
 80026e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a1c      	ldr	r2, [pc, #112]	; (8002768 <TIM_OC1_SetConfig+0xc8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d10c      	bne.n	8002716 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f023 0308 	bic.w	r3, r3, #8
 8002702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	4313      	orrs	r3, r2
 800270c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a13      	ldr	r2, [pc, #76]	; (8002768 <TIM_OC1_SetConfig+0xc8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d111      	bne.n	8002742 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800272c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	621a      	str	r2, [r3, #32]
}
 800275c:	bf00      	nop
 800275e:	371c      	adds	r7, #28
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40012c00 	.word	0x40012c00

0800276c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	f023 0210 	bic.w	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800279a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f023 0320 	bic.w	r3, r3, #32
 80027b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a1d      	ldr	r2, [pc, #116]	; (800283c <TIM_OC2_SetConfig+0xd0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d10d      	bne.n	80027e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a14      	ldr	r2, [pc, #80]	; (800283c <TIM_OC2_SetConfig+0xd0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d113      	bne.n	8002818 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	621a      	str	r2, [r3, #32]
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	40012c00 	.word	0x40012c00

08002840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <TIM_OC3_SetConfig+0xd0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10d      	bne.n	80028ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <TIM_OC3_SetConfig+0xd0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d113      	bne.n	80028ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	621a      	str	r2, [r3, #32]
}
 8002904:	bf00      	nop
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40012c00 	.word	0x40012c00

08002914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800295e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	031b      	lsls	r3, r3, #12
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <TIM_OC4_SetConfig+0x98>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d109      	bne.n	8002988 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800297a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	019b      	lsls	r3, r3, #6
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	621a      	str	r2, [r3, #32]
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	40012c00 	.word	0x40012c00

080029b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	2201      	movs	r2, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a1a      	ldr	r2, [r3, #32]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	401a      	ands	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a1a      	ldr	r2, [r3, #32]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	621a      	str	r2, [r3, #32]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e032      	b.n	8002a76 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a48:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e03d      	b.n	8002b18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e03f      	b.n	8002bb4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d106      	bne.n	8002b4e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f001 fa41 	bl	8003fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2224      	movs	r2, #36	; 0x24
 8002b52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f970 	bl	8002e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d166      	bne.n	8002ca4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_UART_Receive_DMA+0x26>
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e05f      	b.n	8002ca6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_UART_Receive_DMA+0x38>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e058      	b.n	8002ca6 <HAL_UART_Receive_DMA+0xea>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	88fa      	ldrh	r2, [r7, #6]
 8002c06:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2222      	movs	r2, #34	; 0x22
 8002c12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1a:	4a25      	ldr	r2, [pc, #148]	; (8002cb0 <HAL_UART_Receive_DMA+0xf4>)
 8002c1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c22:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <HAL_UART_Receive_DMA+0xf8>)
 8002c24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	4a23      	ldr	r2, [pc, #140]	; (8002cb8 <HAL_UART_Receive_DMA+0xfc>)
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	2200      	movs	r2, #0
 8002c34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8002c36:	f107 0308 	add.w	r3, r7, #8
 8002c3a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3304      	adds	r3, #4
 8002c46:	4619      	mov	r1, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	f7fe fbb9 	bl	80013c4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c7e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c9e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e000      	b.n	8002ca6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002ca4:	2302      	movs	r3, #2
  }
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	08002ccf 	.word	0x08002ccf
 8002cb4:	08002d37 	.word	0x08002d37
 8002cb8:	08002d53 	.word	0x08002d53

08002cbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d11e      	bne.n	8002d28 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cfe:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d1e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f001 f809 	bl	8003d40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 ffd5 	bl	8003cf4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf14      	ite	ne
 8002d72:	2301      	movne	r3, #1
 8002d74:	2300      	moveq	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b21      	cmp	r3, #33	; 0x21
 8002d84:	d108      	bne.n	8002d98 <UART_DMAError+0x46>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002d92:	68b8      	ldr	r0, [r7, #8]
 8002d94:	f000 f827 	bl	8002de6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	bf14      	ite	ne
 8002da6:	2301      	movne	r3, #1
 8002da8:	2300      	moveq	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b22      	cmp	r3, #34	; 0x22
 8002db8:	d108      	bne.n	8002dcc <UART_DMAError+0x7a>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002dc6:	68b8      	ldr	r0, [r7, #8]
 8002dc8:	f000 f822 	bl	8002e10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd0:	f043 0210 	orr.w	r2, r3, #16
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dd8:	68b8      	ldr	r0, [r7, #8]
 8002dda:	f7ff ff6f 	bl	8002cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002dfc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
	...

08002e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e86:	f023 030c 	bic.w	r3, r3, #12
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	68f9      	ldr	r1, [r7, #12]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a52      	ldr	r2, [pc, #328]	; (8002ff8 <UART_SetConfig+0x1ac>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d14e      	bne.n	8002f52 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002eb4:	f7ff f976 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8002eb8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009a      	lsls	r2, r3, #2
 8002ec4:	441a      	add	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	4a4a      	ldr	r2, [pc, #296]	; (8002ffc <UART_SetConfig+0x1b0>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	0119      	lsls	r1, r3, #4
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009a      	lsls	r2, r3, #2
 8002ee4:	441a      	add	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef0:	4b42      	ldr	r3, [pc, #264]	; (8002ffc <UART_SetConfig+0x1b0>)
 8002ef2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	2064      	movs	r0, #100	; 0x64
 8002efa:	fb00 f303 	mul.w	r3, r0, r3
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	3332      	adds	r3, #50	; 0x32
 8002f04:	4a3d      	ldr	r2, [pc, #244]	; (8002ffc <UART_SetConfig+0x1b0>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f10:	4419      	add	r1, r3
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009a      	lsls	r2, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f28:	4b34      	ldr	r3, [pc, #208]	; (8002ffc <UART_SetConfig+0x1b0>)
 8002f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2064      	movs	r0, #100	; 0x64
 8002f32:	fb00 f303 	mul.w	r3, r0, r3
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	3332      	adds	r3, #50	; 0x32
 8002f3c:	4a2f      	ldr	r2, [pc, #188]	; (8002ffc <UART_SetConfig+0x1b0>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	f003 020f 	and.w	r2, r3, #15
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	440a      	add	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002f50:	e04d      	b.n	8002fee <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f52:	f7ff f913 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8002f56:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009a      	lsls	r2, r3, #2
 8002f62:	441a      	add	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6e:	4a23      	ldr	r2, [pc, #140]	; (8002ffc <UART_SetConfig+0x1b0>)
 8002f70:	fba2 2303 	umull	r2, r3, r2, r3
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	0119      	lsls	r1, r3, #4
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	009a      	lsls	r2, r3, #2
 8002f82:	441a      	add	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <UART_SetConfig+0x1b0>)
 8002f90:	fba3 0302 	umull	r0, r3, r3, r2
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	2064      	movs	r0, #100	; 0x64
 8002f98:	fb00 f303 	mul.w	r3, r0, r3
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	3332      	adds	r3, #50	; 0x32
 8002fa2:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <UART_SetConfig+0x1b0>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fae:	4419      	add	r1, r3
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009a      	lsls	r2, r3, #2
 8002fba:	441a      	add	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <UART_SetConfig+0x1b0>)
 8002fc8:	fba3 0302 	umull	r0, r3, r3, r2
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	2064      	movs	r0, #100	; 0x64
 8002fd0:	fb00 f303 	mul.w	r3, r0, r3
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	3332      	adds	r3, #50	; 0x32
 8002fda:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <UART_SetConfig+0x1b0>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	f003 020f 	and.w	r2, r3, #15
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	440a      	add	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]
}
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40013800 	.word	0x40013800
 8002ffc:	51eb851f 	.word	0x51eb851f

08003000 <decoupling>:
#include "algorithnm.h"
#include "main.h"
#include "stdio.h"
#include "string.h"

void decoupling(float forwardspeed,float rollspeed,decoulpe_TypeDef * decouple){
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
	decouple->Speed_L = forwardspeed*1+rollspeed*(-0.2050);
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f7fd fa0b 	bl	8000428 <__aeabi_f2d>
 8003012:	4604      	mov	r4, r0
 8003014:	460d      	mov	r5, r1
 8003016:	68b8      	ldr	r0, [r7, #8]
 8003018:	f7fd fa06 	bl	8000428 <__aeabi_f2d>
 800301c:	a31a      	add	r3, pc, #104	; (adr r3, 8003088 <decoupling+0x88>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f7fd fa59 	bl	80004d8 <__aeabi_dmul>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4620      	mov	r0, r4
 800302c:	4629      	mov	r1, r5
 800302e:	f7fd f89d 	bl	800016c <__adddf3>
 8003032:	4603      	mov	r3, r0
 8003034:	460c      	mov	r4, r1
 8003036:	4618      	mov	r0, r3
 8003038:	4621      	mov	r1, r4
 800303a:	f7fd fd25 	bl	8000a88 <__aeabi_d2f>
 800303e:	4602      	mov	r2, r0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	601a      	str	r2, [r3, #0]
	decouple->Speed_R = forwardspeed*1+rollspeed*0.2050;
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7fd f9ef 	bl	8000428 <__aeabi_f2d>
 800304a:	4604      	mov	r4, r0
 800304c:	460d      	mov	r5, r1
 800304e:	68b8      	ldr	r0, [r7, #8]
 8003050:	f7fd f9ea 	bl	8000428 <__aeabi_f2d>
 8003054:	a30e      	add	r3, pc, #56	; (adr r3, 8003090 <decoupling+0x90>)
 8003056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305a:	f7fd fa3d 	bl	80004d8 <__aeabi_dmul>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4620      	mov	r0, r4
 8003064:	4629      	mov	r1, r5
 8003066:	f7fd f881 	bl	800016c <__adddf3>
 800306a:	4603      	mov	r3, r0
 800306c:	460c      	mov	r4, r1
 800306e:	4618      	mov	r0, r3
 8003070:	4621      	mov	r1, r4
 8003072:	f7fd fd09 	bl	8000a88 <__aeabi_d2f>
 8003076:	4602      	mov	r2, r0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	605a      	str	r2, [r3, #4]
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bdb0      	pop	{r4, r5, r7, pc}
 8003084:	f3af 8000 	nop.w
 8003088:	a3d70a3d 	.word	0xa3d70a3d
 800308c:	bfca3d70 	.word	0xbfca3d70
 8003090:	a3d70a3d 	.word	0xa3d70a3d
 8003094:	3fca3d70 	.word	0x3fca3d70

08003098 <fliter>:

float fliter(float r,Filer_TypeDef *filer){
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
	static float A,B,C,u_return;
	A=(2*filer->tc-filer->ts)/(2*filer->tc+filer->ts);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	4619      	mov	r1, r3
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fd43 	bl	8000b34 <__addsf3>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f7fd fd39 	bl	8000b30 <__aeabi_fsub>
 80030be:	4603      	mov	r3, r0
 80030c0:	461c      	mov	r4, r3
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	4619      	mov	r1, r3
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fd33 	bl	8000b34 <__addsf3>
 80030ce:	4603      	mov	r3, r0
 80030d0:	461a      	mov	r2, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4619      	mov	r1, r3
 80030d8:	4610      	mov	r0, r2
 80030da:	f7fd fd2b 	bl	8000b34 <__addsf3>
 80030de:	4603      	mov	r3, r0
 80030e0:	4619      	mov	r1, r3
 80030e2:	4620      	mov	r0, r4
 80030e4:	f7fd fee2 	bl	8000eac <__aeabi_fdiv>
 80030e8:	4603      	mov	r3, r0
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b3f      	ldr	r3, [pc, #252]	; (80031ec <fliter+0x154>)
 80030ee:	601a      	str	r2, [r3, #0]
	B=(2*filer->to+filer->ts)/(2*filer->tc+filer->ts);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4619      	mov	r1, r3
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd fd1c 	bl	8000b34 <__addsf3>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461a      	mov	r2, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f7fd fd14 	bl	8000b34 <__addsf3>
 800310c:	4603      	mov	r3, r0
 800310e:	461c      	mov	r4, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4619      	mov	r1, r3
 8003116:	4618      	mov	r0, r3
 8003118:	f7fd fd0c 	bl	8000b34 <__addsf3>
 800311c:	4603      	mov	r3, r0
 800311e:	461a      	mov	r2, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4619      	mov	r1, r3
 8003126:	4610      	mov	r0, r2
 8003128:	f7fd fd04 	bl	8000b34 <__addsf3>
 800312c:	4603      	mov	r3, r0
 800312e:	4619      	mov	r1, r3
 8003130:	4620      	mov	r0, r4
 8003132:	f7fd febb 	bl	8000eac <__aeabi_fdiv>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <fliter+0x158>)
 800313c:	601a      	str	r2, [r3, #0]
	C=(filer->ts-2*filer->to)/(2*filer->tc+filer->ts);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681c      	ldr	r4, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4619      	mov	r1, r3
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd fcf3 	bl	8000b34 <__addsf3>
 800314e:	4603      	mov	r3, r0
 8003150:	4619      	mov	r1, r3
 8003152:	4620      	mov	r0, r4
 8003154:	f7fd fcec 	bl	8000b30 <__aeabi_fsub>
 8003158:	4603      	mov	r3, r0
 800315a:	461c      	mov	r4, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4619      	mov	r1, r3
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd fce6 	bl	8000b34 <__addsf3>
 8003168:	4603      	mov	r3, r0
 800316a:	461a      	mov	r2, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4619      	mov	r1, r3
 8003172:	4610      	mov	r0, r2
 8003174:	f7fd fcde 	bl	8000b34 <__addsf3>
 8003178:	4603      	mov	r3, r0
 800317a:	4619      	mov	r1, r3
 800317c:	4620      	mov	r0, r4
 800317e:	f7fd fe95 	bl	8000eac <__aeabi_fdiv>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <fliter+0x15c>)
 8003188:	601a      	str	r2, [r3, #0]
	u_return = A*filer->u_last+B*r+C*r;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	4b17      	ldr	r3, [pc, #92]	; (80031ec <fliter+0x154>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4619      	mov	r1, r3
 8003194:	4610      	mov	r0, r2
 8003196:	f7fd fdd5 	bl	8000d44 <__aeabi_fmul>
 800319a:	4603      	mov	r3, r0
 800319c:	461c      	mov	r4, r3
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <fliter+0x158>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd fdcd 	bl	8000d44 <__aeabi_fmul>
 80031aa:	4603      	mov	r3, r0
 80031ac:	4619      	mov	r1, r3
 80031ae:	4620      	mov	r0, r4
 80031b0:	f7fd fcc0 	bl	8000b34 <__addsf3>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461c      	mov	r4, r3
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <fliter+0x15c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fdc0 	bl	8000d44 <__aeabi_fmul>
 80031c4:	4603      	mov	r3, r0
 80031c6:	4619      	mov	r1, r3
 80031c8:	4620      	mov	r0, r4
 80031ca:	f7fd fcb3 	bl	8000b34 <__addsf3>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <fliter+0x160>)
 80031d4:	601a      	str	r2, [r3, #0]
	filer->u_last = u_return;
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <fliter+0x160>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	60da      	str	r2, [r3, #12]
	return u_return;
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <fliter+0x160>)
 80031e0:	681b      	ldr	r3, [r3, #0]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd90      	pop	{r4, r7, pc}
 80031ea:	bf00      	nop
 80031ec:	2000023c 	.word	0x2000023c
 80031f0:	20000240 	.word	0x20000240
 80031f4:	20000244 	.word	0x20000244
 80031f8:	20000248 	.word	0x20000248

080031fc <PID_Inc>:

int PID_Inc(float SetValue, float ActualValue, PID_IncTypeDef *PID){
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
	PID->Ek = SetValue - ActualValue;
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7fd fc90 	bl	8000b30 <__aeabi_fsub>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]
//	float Inc = (PID->Kp*(PID->Ek-PID->Ek1))+(PID->Ki*PID->Ek)+(PID->Kd*(PID->Ek+PID->Ek2-(PID->Ek1*2)));
	float Inc = (PID->Kp * PID->Ek) - (PID->Ki * PID->Ek1) + (PID->Kd * PID->Ek2);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4619      	mov	r1, r3
 8003222:	4610      	mov	r0, r2
 8003224:	f7fd fd8e 	bl	8000d44 <__aeabi_fmul>
 8003228:	4603      	mov	r3, r0
 800322a:	461c      	mov	r4, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	4619      	mov	r1, r3
 8003236:	4610      	mov	r0, r2
 8003238:	f7fd fd84 	bl	8000d44 <__aeabi_fmul>
 800323c:	4603      	mov	r3, r0
 800323e:	4619      	mov	r1, r3
 8003240:	4620      	mov	r0, r4
 8003242:	f7fd fc75 	bl	8000b30 <__aeabi_fsub>
 8003246:	4603      	mov	r3, r0
 8003248:	461c      	mov	r4, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	4619      	mov	r1, r3
 8003254:	4610      	mov	r0, r2
 8003256:	f7fd fd75 	bl	8000d44 <__aeabi_fmul>
 800325a:	4603      	mov	r3, r0
 800325c:	4619      	mov	r1, r3
 800325e:	4620      	mov	r0, r4
 8003260:	f7fd fc68 	bl	8000b34 <__addsf3>
 8003264:	4603      	mov	r3, r0
 8003266:	617b      	str	r3, [r7, #20]
	PID->Ek2 = PID->Ek1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	615a      	str	r2, [r3, #20]
	PID->Ek1 = PID->Ek;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	611a      	str	r2, [r3, #16]
	PID->PWMvalue += (int)Inc;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699c      	ldr	r4, [r3, #24]
 800327c:	6978      	ldr	r0, [r7, #20]
 800327e:	f7fd feb1 	bl	8000fe4 <__aeabi_f2iz>
 8003282:	4603      	mov	r3, r0
 8003284:	18e2      	adds	r2, r4, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	619a      	str	r2, [r3, #24]
	return PID->PWMvalue;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
}
 800328e:	4618      	mov	r0, r3
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd90      	pop	{r4, r7, pc}

08003296 <saturation>:

int saturation(int r,int uplimit,int downlimit){
 8003296:	b480      	push	{r7}
 8003298:	b087      	sub	sp, #28
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
	int result;
	if(r > uplimit){
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	dd02      	ble.n	80032b0 <saturation+0x1a>
		result = uplimit;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	e008      	b.n	80032c2 <saturation+0x2c>
	}else{
		if(r < downlimit){
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	da02      	bge.n	80032be <saturation+0x28>
			result = downlimit;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	e001      	b.n	80032c2 <saturation+0x2c>
		}else{
			result = r;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	617b      	str	r3, [r7, #20]
		}
	}
	return result;
 80032c2:	697b      	ldr	r3, [r7, #20]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
	...

080032d0 <PID_R_motor>:


int PID_R_motor(float r,float speed){
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
	static Transfer1_3_Parameters transfer_data = {{0.04541},{1,17.74,292.9}};
	static Final_Parameters Parameters_data = {5,15,1.5,0.005};
	float kpd = transfer_data.den[0]*Parameters_data.wo/(transfer_data.num[0]*Parameters_data.lam);
 80032da:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <PID_R_motor+0xf4>)
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	4b3a      	ldr	r3, [pc, #232]	; (80033c8 <PID_R_motor+0xf8>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4619      	mov	r1, r3
 80032e4:	4610      	mov	r0, r2
 80032e6:	f7fd fd2d 	bl	8000d44 <__aeabi_fmul>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461c      	mov	r4, r3
 80032ee:	4b35      	ldr	r3, [pc, #212]	; (80033c4 <PID_R_motor+0xf4>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4b35      	ldr	r3, [pc, #212]	; (80033c8 <PID_R_motor+0xf8>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	4619      	mov	r1, r3
 80032f8:	4610      	mov	r0, r2
 80032fa:	f7fd fd23 	bl	8000d44 <__aeabi_fmul>
 80032fe:	4603      	mov	r3, r0
 8003300:	4619      	mov	r1, r3
 8003302:	4620      	mov	r0, r4
 8003304:	f7fd fdd2 	bl	8000eac <__aeabi_fdiv>
 8003308:	4603      	mov	r3, r0
 800330a:	60fb      	str	r3, [r7, #12]
	static Filer_TypeDef Filter_data;
	static PID_IncTypeDef PID_data;
	Filter_data.ts = Parameters_data.ts;Filter_data.tc =1/Parameters_data.wc;
 800330c:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <PID_R_motor+0xf8>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4a2e      	ldr	r2, [pc, #184]	; (80033cc <PID_R_motor+0xfc>)
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <PID_R_motor+0xf8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4619      	mov	r1, r3
 800331a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800331e:	f7fd fdc5 	bl	8000eac <__aeabi_fdiv>
 8003322:	4603      	mov	r3, r0
 8003324:	461a      	mov	r2, r3
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <PID_R_motor+0xfc>)
 8003328:	609a      	str	r2, [r3, #8]
	Filter_data.to = 1/Parameters_data.wo;
 800332a:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <PID_R_motor+0xf8>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4619      	mov	r1, r3
 8003330:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003334:	f7fd fdba 	bl	8000eac <__aeabi_fdiv>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	4b23      	ldr	r3, [pc, #140]	; (80033cc <PID_R_motor+0xfc>)
 800333e:	605a      	str	r2, [r3, #4]
	PID_data.Kp = kpd*(1+Parameters_data.wc*Parameters_data.lam);
 8003340:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <PID_R_motor+0xf8>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <PID_R_motor+0xf8>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f7fd fcfa 	bl	8000d44 <__aeabi_fmul>
 8003350:	4603      	mov	r3, r0
 8003352:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd fbec 	bl	8000b34 <__addsf3>
 800335c:	4603      	mov	r3, r0
 800335e:	68f9      	ldr	r1, [r7, #12]
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd fcef 	bl	8000d44 <__aeabi_fmul>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <PID_R_motor+0x100>)
 800336c:	601a      	str	r2, [r3, #0]
	PID_data.Ki = kpd*Parameters_data.wc;
 800336e:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <PID_R_motor+0xf8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	4618      	mov	r0, r3
 8003376:	f7fd fce5 	bl	8000d44 <__aeabi_fmul>
 800337a:	4603      	mov	r3, r0
 800337c:	461a      	mov	r2, r3
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <PID_R_motor+0x100>)
 8003380:	605a      	str	r2, [r3, #4]
	PID_data.Kd = kpd*Parameters_data.lam;
 8003382:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <PID_R_motor+0xf8>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	68f9      	ldr	r1, [r7, #12]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd fcdb 	bl	8000d44 <__aeabi_fmul>
 800338e:	4603      	mov	r3, r0
 8003390:	461a      	mov	r2, r3
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <PID_R_motor+0x100>)
 8003394:	609a      	str	r2, [r3, #8]

	return saturation(PID_Inc(fliter(r,&Filter_data),speed,&PID_data),10000,-10000);
 8003396:	490d      	ldr	r1, [pc, #52]	; (80033cc <PID_R_motor+0xfc>)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff fe7d 	bl	8003098 <fliter>
 800339e:	4603      	mov	r3, r0
 80033a0:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <PID_R_motor+0x100>)
 80033a2:	6839      	ldr	r1, [r7, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff29 	bl	80031fc <PID_Inc>
 80033aa:	4603      	mov	r3, r0
 80033ac:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <PID_R_motor+0x104>)
 80033ae:	f242 7110 	movw	r1, #10000	; 0x2710
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff6f 	bl	8003296 <saturation>
 80033b8:	4603      	mov	r3, r0
//	int b = PID_Inc(a,speed,&PID_data);
//	int c = saturation(b,10000,-10000);
//	sprintf(data,"d:%d,%d,%0.3f,",b,c,a);
//	HAL_UART_Transmit(&huart1, data, strlen(data), 0x03);
//	return c;
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd90      	pop	{r4, r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000008 	.word	0x20000008
 80033c8:	20000018 	.word	0x20000018
 80033cc:	2000024c 	.word	0x2000024c
 80033d0:	2000025c 	.word	0x2000025c
 80033d4:	ffffd8f0 	.word	0xffffd8f0

080033d8 <PID_L_motor>:

//static uint8_t data[20];
//extern UART_HandleTypeDef huart1;
int PID_L_motor(float r,float speed){
 80033d8:	b590      	push	{r4, r7, lr}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
	static Transfer1_3_Parameters transfer_data = {{0.08475},{1,32.93,502.1}};
	static Final_Parameters Parameters_data = {5,15,1.5,0.005};
	float kpd = transfer_data.den[0]*Parameters_data.wo/(transfer_data.num[0]*Parameters_data.lam);
 80033e2:	4b3a      	ldr	r3, [pc, #232]	; (80034cc <PID_L_motor+0xf4>)
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	4b3a      	ldr	r3, [pc, #232]	; (80034d0 <PID_L_motor+0xf8>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4619      	mov	r1, r3
 80033ec:	4610      	mov	r0, r2
 80033ee:	f7fd fca9 	bl	8000d44 <__aeabi_fmul>
 80033f2:	4603      	mov	r3, r0
 80033f4:	461c      	mov	r4, r3
 80033f6:	4b35      	ldr	r3, [pc, #212]	; (80034cc <PID_L_motor+0xf4>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b35      	ldr	r3, [pc, #212]	; (80034d0 <PID_L_motor+0xf8>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f7fd fc9f 	bl	8000d44 <__aeabi_fmul>
 8003406:	4603      	mov	r3, r0
 8003408:	4619      	mov	r1, r3
 800340a:	4620      	mov	r0, r4
 800340c:	f7fd fd4e 	bl	8000eac <__aeabi_fdiv>
 8003410:	4603      	mov	r3, r0
 8003412:	60fb      	str	r3, [r7, #12]
	static Filer_TypeDef Filter_data;
	static PID_IncTypeDef PID_data;
	Filter_data.ts = Parameters_data.ts;Filter_data.tc =1/Parameters_data.wc;
 8003414:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <PID_L_motor+0xf8>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a2e      	ldr	r2, [pc, #184]	; (80034d4 <PID_L_motor+0xfc>)
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b2c      	ldr	r3, [pc, #176]	; (80034d0 <PID_L_motor+0xf8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4619      	mov	r1, r3
 8003422:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003426:	f7fd fd41 	bl	8000eac <__aeabi_fdiv>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
 800342e:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <PID_L_motor+0xfc>)
 8003430:	609a      	str	r2, [r3, #8]
	Filter_data.to = 1/Parameters_data.wo;
 8003432:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <PID_L_motor+0xf8>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4619      	mov	r1, r3
 8003438:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800343c:	f7fd fd36 	bl	8000eac <__aeabi_fdiv>
 8003440:	4603      	mov	r3, r0
 8003442:	461a      	mov	r2, r3
 8003444:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <PID_L_motor+0xfc>)
 8003446:	605a      	str	r2, [r3, #4]
	PID_data.Kp = kpd*(1+Parameters_data.wc*Parameters_data.lam);
 8003448:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <PID_L_motor+0xf8>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <PID_L_motor+0xf8>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f7fd fc76 	bl	8000d44 <__aeabi_fmul>
 8003458:	4603      	mov	r3, r0
 800345a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fb68 	bl	8000b34 <__addsf3>
 8003464:	4603      	mov	r3, r0
 8003466:	68f9      	ldr	r1, [r7, #12]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd fc6b 	bl	8000d44 <__aeabi_fmul>
 800346e:	4603      	mov	r3, r0
 8003470:	461a      	mov	r2, r3
 8003472:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <PID_L_motor+0x100>)
 8003474:	601a      	str	r2, [r3, #0]
	PID_data.Ki = kpd*Parameters_data.wc;
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <PID_L_motor+0xf8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68f9      	ldr	r1, [r7, #12]
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd fc61 	bl	8000d44 <__aeabi_fmul>
 8003482:	4603      	mov	r3, r0
 8003484:	461a      	mov	r2, r3
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <PID_L_motor+0x100>)
 8003488:	605a      	str	r2, [r3, #4]
	PID_data.Kd = kpd*Parameters_data.lam;
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <PID_L_motor+0xf8>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	68f9      	ldr	r1, [r7, #12]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd fc57 	bl	8000d44 <__aeabi_fmul>
 8003496:	4603      	mov	r3, r0
 8003498:	461a      	mov	r2, r3
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <PID_L_motor+0x100>)
 800349c:	609a      	str	r2, [r3, #8]

	return saturation(PID_Inc(fliter(r,&Filter_data),speed,&PID_data),10000,-10000);
 800349e:	490d      	ldr	r1, [pc, #52]	; (80034d4 <PID_L_motor+0xfc>)
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff fdf9 	bl	8003098 <fliter>
 80034a6:	4603      	mov	r3, r0
 80034a8:	4a0b      	ldr	r2, [pc, #44]	; (80034d8 <PID_L_motor+0x100>)
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fea5 	bl	80031fc <PID_Inc>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4a09      	ldr	r2, [pc, #36]	; (80034dc <PID_L_motor+0x104>)
 80034b6:	f242 7110 	movw	r1, #10000	; 0x2710
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff feeb 	bl	8003296 <saturation>
 80034c0:	4603      	mov	r3, r0
//	int b = PID_Inc(a,speed,&PID_data);
//	int c = saturation(b,10000,-10000);
//	sprintf(data,"d:%d,%d,%0.3f,",b,c,a);
//	HAL_UART_Transmit(&huart1, data, strlen(data), 0x03);
//	return c;
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd90      	pop	{r4, r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000028 	.word	0x20000028
 80034d0:	20000038 	.word	0x20000038
 80034d4:	20000278 	.word	0x20000278
 80034d8:	20000288 	.word	0x20000288
 80034dc:	ffffd8f0 	.word	0xffffd8f0

080034e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034e4:	f7fd fda4 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034e8:	f000 f813 	bl	8003512 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034ec:	f000 fa28 	bl	8003940 <MX_GPIO_Init>
  MX_DMA_Init();
 80034f0:	f000 fa00 	bl	80038f4 <MX_DMA_Init>
  MX_TIM1_Init();
 80034f4:	f000 f852 	bl	800359c <MX_TIM1_Init>
  MX_TIM2_Init();
 80034f8:	f000 f8d2 	bl	80036a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80034fc:	f000 f928 	bl	8003750 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003500:	f000 f97a 	bl	80037f8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003504:	f000 f9cc 	bl	80038a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  motor_init();
 8003508:	f000 fa6c 	bl	80039e4 <motor_init>
  my_uart_init();
 800350c:	f000 fba6 	bl	8003c5c <my_uart_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003510:	e7fe      	b.n	8003510 <main+0x30>

08003512 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b090      	sub	sp, #64	; 0x40
 8003516:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003518:	f107 0318 	add.w	r3, r7, #24
 800351c:	2228      	movs	r2, #40	; 0x28
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f000 fef7 	bl	8004314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003526:	1d3b      	adds	r3, r7, #4
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003534:	2301      	movs	r3, #1
 8003536:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800353c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800353e:	2300      	movs	r3, #0
 8003540:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003542:	2301      	movs	r3, #1
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003546:	2302      	movs	r3, #2
 8003548:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800354a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003550:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003554:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003556:	f107 0318 	add.w	r3, r7, #24
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe fa38 	bl	80019d0 <HAL_RCC_OscConfig>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003566:	f000 fa37 	bl	80039d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800356a:	230f      	movs	r3, #15
 800356c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800356e:	2302      	movs	r3, #2
 8003570:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800357a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003580:	1d3b      	adds	r3, r7, #4
 8003582:	2102      	movs	r1, #2
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe fca3 	bl	8001ed0 <HAL_RCC_ClockConfig>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003590:	f000 fa22 	bl	80039d8 <Error_Handler>
  }
}
 8003594:	bf00      	nop
 8003596:	3740      	adds	r7, #64	; 0x40
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b092      	sub	sp, #72	; 0x48
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	611a      	str	r2, [r3, #16]
 80035bc:	615a      	str	r2, [r3, #20]
 80035be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80035c0:	1d3b      	adds	r3, r7, #4
 80035c2:	2220      	movs	r2, #32
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fea4 	bl	8004314 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035cc:	4b32      	ldr	r3, [pc, #200]	; (8003698 <MX_TIM1_Init+0xfc>)
 80035ce:	4a33      	ldr	r2, [pc, #204]	; (800369c <MX_TIM1_Init+0x100>)
 80035d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80035d2:	4b31      	ldr	r3, [pc, #196]	; (8003698 <MX_TIM1_Init+0xfc>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d8:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <MX_TIM1_Init+0xfc>)
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10001;
 80035de:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <MX_TIM1_Init+0xfc>)
 80035e0:	f242 7211 	movw	r2, #10001	; 0x2711
 80035e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e6:	4b2c      	ldr	r3, [pc, #176]	; (8003698 <MX_TIM1_Init+0xfc>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035ec:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <MX_TIM1_Init+0xfc>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <MX_TIM1_Init+0xfc>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035f8:	4827      	ldr	r0, [pc, #156]	; (8003698 <MX_TIM1_Init+0xfc>)
 80035fa:	f7fe fe05 	bl	8002208 <HAL_TIM_PWM_Init>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003604:	f000 f9e8 	bl	80039d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003608:	2300      	movs	r3, #0
 800360a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800360c:	2300      	movs	r3, #0
 800360e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003610:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003614:	4619      	mov	r1, r3
 8003616:	4820      	ldr	r0, [pc, #128]	; (8003698 <MX_TIM1_Init+0xfc>)
 8003618:	f7ff f9ee 	bl	80029f8 <HAL_TIMEx_MasterConfigSynchronization>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003622:	f000 f9d9 	bl	80039d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003626:	2360      	movs	r3, #96	; 0x60
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800362e:	2300      	movs	r3, #0
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003632:	2300      	movs	r3, #0
 8003634:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800363a:	2300      	movs	r3, #0
 800363c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800363e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003642:	220c      	movs	r2, #12
 8003644:	4619      	mov	r1, r3
 8003646:	4814      	ldr	r0, [pc, #80]	; (8003698 <MX_TIM1_Init+0xfc>)
 8003648:	f7fe ff02 	bl	8002450 <HAL_TIM_PWM_ConfigChannel>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8003652:	f000 f9c1 	bl	80039d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800366a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800366e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003670:	2300      	movs	r3, #0
 8003672:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	4619      	mov	r1, r3
 8003678:	4807      	ldr	r0, [pc, #28]	; (8003698 <MX_TIM1_Init+0xfc>)
 800367a:	f7ff fa01 	bl	8002a80 <HAL_TIMEx_ConfigBreakDeadTime>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8003684:	f000 f9a8 	bl	80039d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003688:	4803      	ldr	r0, [pc, #12]	; (8003698 <MX_TIM1_Init+0xfc>)
 800368a:	f000 fc4f 	bl	8003f2c <HAL_TIM_MspPostInit>

}
 800368e:	bf00      	nop
 8003690:	3748      	adds	r7, #72	; 0x48
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000440 	.word	0x20000440
 800369c:	40012c00 	.word	0x40012c00

080036a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	; 0x28
 80036a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036a6:	f107 0320 	add.w	r3, r7, #32
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	60da      	str	r2, [r3, #12]
 80036bc:	611a      	str	r2, [r3, #16]
 80036be:	615a      	str	r2, [r3, #20]
 80036c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <MX_TIM2_Init+0xac>)
 80036c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <MX_TIM2_Init+0xac>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d0:	4b1e      	ldr	r3, [pc, #120]	; (800374c <MX_TIM2_Init+0xac>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10001;
 80036d6:	4b1d      	ldr	r3, [pc, #116]	; (800374c <MX_TIM2_Init+0xac>)
 80036d8:	f242 7211 	movw	r2, #10001	; 0x2711
 80036dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036de:	4b1b      	ldr	r3, [pc, #108]	; (800374c <MX_TIM2_Init+0xac>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <MX_TIM2_Init+0xac>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80036ea:	4818      	ldr	r0, [pc, #96]	; (800374c <MX_TIM2_Init+0xac>)
 80036ec:	f7fe fd8c 	bl	8002208 <HAL_TIM_PWM_Init>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80036f6:	f000 f96f 	bl	80039d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036fa:	2300      	movs	r3, #0
 80036fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036fe:	2300      	movs	r3, #0
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003702:	f107 0320 	add.w	r3, r7, #32
 8003706:	4619      	mov	r1, r3
 8003708:	4810      	ldr	r0, [pc, #64]	; (800374c <MX_TIM2_Init+0xac>)
 800370a:	f7ff f975 	bl	80029f8 <HAL_TIMEx_MasterConfigSynchronization>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003714:	f000 f960 	bl	80039d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003718:	2360      	movs	r3, #96	; 0x60
 800371a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	220c      	movs	r2, #12
 800372c:	4619      	mov	r1, r3
 800372e:	4807      	ldr	r0, [pc, #28]	; (800374c <MX_TIM2_Init+0xac>)
 8003730:	f7fe fe8e 	bl	8002450 <HAL_TIM_PWM_ConfigChannel>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800373a:	f000 f94d 	bl	80039d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800373e:	4803      	ldr	r0, [pc, #12]	; (800374c <MX_TIM2_Init+0xac>)
 8003740:	f000 fbf4 	bl	8003f2c <HAL_TIM_MspPostInit>

}
 8003744:	bf00      	nop
 8003746:	3728      	adds	r7, #40	; 0x28
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000480 	.word	0x20000480

08003750 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	; 0x30
 8003754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003756:	f107 030c 	add.w	r3, r7, #12
 800375a:	2224      	movs	r2, #36	; 0x24
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fdd8 	bl	8004314 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003764:	1d3b      	adds	r3, r7, #4
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800376c:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <MX_TIM3_Init+0xa0>)
 800376e:	4a21      	ldr	r2, [pc, #132]	; (80037f4 <MX_TIM3_Init+0xa4>)
 8003770:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003772:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <MX_TIM3_Init+0xa0>)
 8003774:	2200      	movs	r2, #0
 8003776:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003778:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <MX_TIM3_Init+0xa0>)
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800377e:	4b1c      	ldr	r3, [pc, #112]	; (80037f0 <MX_TIM3_Init+0xa0>)
 8003780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003784:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003786:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <MX_TIM3_Init+0xa0>)
 8003788:	2200      	movs	r2, #0
 800378a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378c:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <MX_TIM3_Init+0xa0>)
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003792:	2303      	movs	r3, #3
 8003794:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003796:	2300      	movs	r3, #0
 8003798:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800379a:	2301      	movs	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800379e:	2300      	movs	r3, #0
 80037a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80037a2:	2305      	movs	r3, #5
 80037a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037aa:	2301      	movs	r3, #1
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037ae:	2300      	movs	r3, #0
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 80037b2:	2305      	movs	r3, #5
 80037b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80037b6:	f107 030c 	add.w	r3, r7, #12
 80037ba:	4619      	mov	r1, r3
 80037bc:	480c      	ldr	r0, [pc, #48]	; (80037f0 <MX_TIM3_Init+0xa0>)
 80037be:	f7fe fd81 	bl	80022c4 <HAL_TIM_Encoder_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80037c8:	f000 f906 	bl	80039d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037cc:	2300      	movs	r3, #0
 80037ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037d4:	1d3b      	adds	r3, r7, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	4805      	ldr	r0, [pc, #20]	; (80037f0 <MX_TIM3_Init+0xa0>)
 80037da:	f7ff f90d 	bl	80029f8 <HAL_TIMEx_MasterConfigSynchronization>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80037e4:	f000 f8f8 	bl	80039d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037e8:	bf00      	nop
 80037ea:	3730      	adds	r7, #48	; 0x30
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000338 	.word	0x20000338
 80037f4:	40000400 	.word	0x40000400

080037f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08c      	sub	sp, #48	; 0x30
 80037fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037fe:	f107 030c 	add.w	r3, r7, #12
 8003802:	2224      	movs	r2, #36	; 0x24
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fd84 	bl	8004314 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800380c:	1d3b      	adds	r3, r7, #4
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003814:	4b20      	ldr	r3, [pc, #128]	; (8003898 <MX_TIM4_Init+0xa0>)
 8003816:	4a21      	ldr	r2, [pc, #132]	; (800389c <MX_TIM4_Init+0xa4>)
 8003818:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800381a:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <MX_TIM4_Init+0xa0>)
 800381c:	2200      	movs	r2, #0
 800381e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003820:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <MX_TIM4_Init+0xa0>)
 8003822:	2200      	movs	r2, #0
 8003824:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003826:	4b1c      	ldr	r3, [pc, #112]	; (8003898 <MX_TIM4_Init+0xa0>)
 8003828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800382c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800382e:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <MX_TIM4_Init+0xa0>)
 8003830:	2200      	movs	r2, #0
 8003832:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003834:	4b18      	ldr	r3, [pc, #96]	; (8003898 <MX_TIM4_Init+0xa0>)
 8003836:	2200      	movs	r2, #0
 8003838:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800383a:	2303      	movs	r3, #3
 800383c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003842:	2301      	movs	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800384a:	2305      	movs	r3, #5
 800384c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800384e:	2300      	movs	r3, #0
 8003850:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003852:	2301      	movs	r3, #1
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003856:	2300      	movs	r3, #0
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 800385a:	2305      	movs	r3, #5
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800385e:	f107 030c 	add.w	r3, r7, #12
 8003862:	4619      	mov	r1, r3
 8003864:	480c      	ldr	r0, [pc, #48]	; (8003898 <MX_TIM4_Init+0xa0>)
 8003866:	f7fe fd2d 	bl	80022c4 <HAL_TIM_Encoder_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003870:	f000 f8b2 	bl	80039d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003874:	2300      	movs	r3, #0
 8003876:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003878:	2300      	movs	r3, #0
 800387a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800387c:	1d3b      	adds	r3, r7, #4
 800387e:	4619      	mov	r1, r3
 8003880:	4805      	ldr	r0, [pc, #20]	; (8003898 <MX_TIM4_Init+0xa0>)
 8003882:	f7ff f8b9 	bl	80029f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800388c:	f000 f8a4 	bl	80039d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003890:	bf00      	nop
 8003892:	3730      	adds	r7, #48	; 0x30
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	200002f8 	.word	0x200002f8
 800389c:	40000800 	.word	0x40000800

080038a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038a4:	4b11      	ldr	r3, [pc, #68]	; (80038ec <MX_USART1_UART_Init+0x4c>)
 80038a6:	4a12      	ldr	r2, [pc, #72]	; (80038f0 <MX_USART1_UART_Init+0x50>)
 80038a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80038aa:	4b10      	ldr	r3, [pc, #64]	; (80038ec <MX_USART1_UART_Init+0x4c>)
 80038ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038b2:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <MX_USART1_UART_Init+0x4c>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038b8:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <MX_USART1_UART_Init+0x4c>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038be:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <MX_USART1_UART_Init+0x4c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <MX_USART1_UART_Init+0x4c>)
 80038c6:	220c      	movs	r2, #12
 80038c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ca:	4b08      	ldr	r3, [pc, #32]	; (80038ec <MX_USART1_UART_Init+0x4c>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038d0:	4b06      	ldr	r3, [pc, #24]	; (80038ec <MX_USART1_UART_Init+0x4c>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038d6:	4805      	ldr	r0, [pc, #20]	; (80038ec <MX_USART1_UART_Init+0x4c>)
 80038d8:	f7ff f923 	bl	8002b22 <HAL_UART_Init>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80038e2:	f000 f879 	bl	80039d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000400 	.word	0x20000400
 80038f0:	40013800 	.word	0x40013800

080038f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <MX_DMA_Init+0x48>)
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	4a0f      	ldr	r2, [pc, #60]	; (800393c <MX_DMA_Init+0x48>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6153      	str	r3, [r2, #20]
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <MX_DMA_Init+0x48>)
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 8003912:	2200      	movs	r2, #0
 8003914:	2103      	movs	r1, #3
 8003916:	200e      	movs	r0, #14
 8003918:	f7fd fcc3 	bl	80012a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800391c:	200e      	movs	r0, #14
 800391e:	f7fd fcdc 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 8003922:	2200      	movs	r2, #0
 8003924:	2103      	movs	r1, #3
 8003926:	200f      	movs	r0, #15
 8003928:	f7fd fcbb 	bl	80012a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800392c:	200f      	movs	r0, #15
 800392e:	f7fd fcd4 	bl	80012da <HAL_NVIC_EnableIRQ>

}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000

08003940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003946:	f107 0310 	add.w	r3, r7, #16
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003954:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <MX_GPIO_Init+0x90>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	4a1d      	ldr	r2, [pc, #116]	; (80039d0 <MX_GPIO_Init+0x90>)
 800395a:	f043 0320 	orr.w	r3, r3, #32
 800395e:	6193      	str	r3, [r2, #24]
 8003960:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <MX_GPIO_Init+0x90>)
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800396c:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <MX_GPIO_Init+0x90>)
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <MX_GPIO_Init+0x90>)
 8003972:	f043 0304 	orr.w	r3, r3, #4
 8003976:	6193      	str	r3, [r2, #24]
 8003978:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <MX_GPIO_Init+0x90>)
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003984:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <MX_GPIO_Init+0x90>)
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <MX_GPIO_Init+0x90>)
 800398a:	f043 0308 	orr.w	r3, r3, #8
 800398e:	6193      	str	r3, [r2, #24]
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <MX_GPIO_Init+0x90>)
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	607b      	str	r3, [r7, #4]
 800399a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DirOfRight_Pin|DirOfLeft_Pin, GPIO_PIN_RESET);
 800399c:	2200      	movs	r2, #0
 800399e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80039a2:	480c      	ldr	r0, [pc, #48]	; (80039d4 <MX_GPIO_Init+0x94>)
 80039a4:	f7fd fffc 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DirOfRight_Pin DirOfLeft_Pin */
  GPIO_InitStruct.Pin = DirOfRight_Pin|DirOfLeft_Pin;
 80039a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80039ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ae:	2301      	movs	r3, #1
 80039b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80039b6:	2301      	movs	r3, #1
 80039b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ba:	f107 0310 	add.w	r3, r7, #16
 80039be:	4619      	mov	r1, r3
 80039c0:	4804      	ldr	r0, [pc, #16]	; (80039d4 <MX_GPIO_Init+0x94>)
 80039c2:	f7fd fe93 	bl	80016ec <HAL_GPIO_Init>

}
 80039c6:	bf00      	nop
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40010c00 	.word	0x40010c00

080039d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <motor_init>:
extern TIM_HandleTypeDef htim3;
static int LeftValueOfPulseNum;
static int RightValueOPulseNum;
static float speed_R,speed_L;

void motor_init(){
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80039e8:	213c      	movs	r1, #60	; 0x3c
 80039ea:	4811      	ldr	r0, [pc, #68]	; (8003a30 <motor_init+0x4c>)
 80039ec:	f7fe fcf8 	bl	80023e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80039f0:	213c      	movs	r1, #60	; 0x3c
 80039f2:	4810      	ldr	r0, [pc, #64]	; (8003a34 <motor_init+0x50>)
 80039f4:	f7fe fcf4 	bl	80023e0 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim3,CENTRAL_POINT);
 80039f8:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <motor_init+0x4c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,CENTRAL_POINT);
 8003a02:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <motor_init+0x50>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4); //PWM
 8003a0c:	210c      	movs	r1, #12
 8003a0e:	480a      	ldr	r0, [pc, #40]	; (8003a38 <motor_init+0x54>)
 8003a10:	f7fe fc26 	bl	8002260 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4); //PWM
 8003a14:	210c      	movs	r1, #12
 8003a16:	4809      	ldr	r0, [pc, #36]	; (8003a3c <motor_init+0x58>)
 8003a18:	f7fe fc22 	bl	8002260 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <motor_init+0x54>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2200      	movs	r2, #0
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,0);
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <motor_init+0x58>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003a2c:	bf00      	nop
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20000338 	.word	0x20000338
 8003a34:	200002f8 	.word	0x200002f8
 8003a38:	20000440 	.word	0x20000440
 8003a3c:	20000480 	.word	0x20000480

08003a40 <set_motor_PWM>:

void set_motor_PWM(enum RightOrLeft side,int value){
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	6039      	str	r1, [r7, #0]
 8003a4a:	71fb      	strb	r3, [r7, #7]
	if(side == left){
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d119      	bne.n	8003a86 <set_motor_PWM+0x46>
		if (value >= 0) {
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	db0a      	blt.n	8003a6e <set_motor_PWM+0x2e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a5e:	4818      	ldr	r0, [pc, #96]	; (8003ac0 <set_motor_PWM+0x80>)
 8003a60:	f7fd ff9e 	bl	80019a0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,value);
 8003a64:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <set_motor_PWM+0x84>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40
		}else{//backward
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,-value);
		}
	}
}
 8003a6c:	e024      	b.n	8003ab8 <set_motor_PWM+0x78>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a74:	4812      	ldr	r0, [pc, #72]	; (8003ac0 <set_motor_PWM+0x80>)
 8003a76:	f7fd ff93 	bl	80019a0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,-value);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	425a      	negs	r2, r3
 8003a7e:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <set_motor_PWM+0x84>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003a84:	e018      	b.n	8003ab8 <set_motor_PWM+0x78>
		if (value >= 0) {
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	db0a      	blt.n	8003aa2 <set_motor_PWM+0x62>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a92:	480b      	ldr	r0, [pc, #44]	; (8003ac0 <set_motor_PWM+0x80>)
 8003a94:	f7fd ff84 	bl	80019a0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,value);
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <set_motor_PWM+0x88>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003aa0:	e00a      	b.n	8003ab8 <set_motor_PWM+0x78>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003aa8:	4805      	ldr	r0, [pc, #20]	; (8003ac0 <set_motor_PWM+0x80>)
 8003aaa:	f7fd ff79 	bl	80019a0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,-value);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	425a      	negs	r2, r3
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <set_motor_PWM+0x88>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40010c00 	.word	0x40010c00
 8003ac4:	20000440 	.word	0x20000440
 8003ac8:	20000480 	.word	0x20000480
 8003acc:	00000000 	.word	0x00000000

08003ad0 <get_motor_speed>:

void get_motor_speed(){
 8003ad0:	b598      	push	{r3, r4, r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
//	DirOfLeft = !(!((htim3.Instance->CR1) & (0x10)));
//	DirOfRight = !((htim4.Instance->CR1) & (0x10));
	LeftValueOfPulseNum = (uint32_t)(__HAL_TIM_GET_COUNTER(&htim3));
 8003ad4:	4b40      	ldr	r3, [pc, #256]	; (8003bd8 <get_motor_speed+0x108>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	461a      	mov	r2, r3
 8003adc:	4b3f      	ldr	r3, [pc, #252]	; (8003bdc <get_motor_speed+0x10c>)
 8003ade:	601a      	str	r2, [r3, #0]
	RightValueOPulseNum = (uint32_t)(__HAL_TIM_GET_COUNTER(&htim4));
 8003ae0:	4b3f      	ldr	r3, [pc, #252]	; (8003be0 <get_motor_speed+0x110>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4b3e      	ldr	r3, [pc, #248]	; (8003be4 <get_motor_speed+0x114>)
 8003aea:	601a      	str	r2, [r3, #0]
//	if(DirOfRight != forward){
//		RightValueOPulseNum = -(RightValueOPulseNum-CENTRAL_POINT );
//	}else{//正转
//		RightValueOPulseNum = CENTRAL_POINT - RightValueOPulseNum;
//	}
	RightValueOPulseNum = RightValueOPulseNum - CENTRAL_POINT ;
 8003aec:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <get_motor_speed+0x114>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8003af4:	3b7d      	subs	r3, #125	; 0x7d
 8003af6:	4a3b      	ldr	r2, [pc, #236]	; (8003be4 <get_motor_speed+0x114>)
 8003af8:	6013      	str	r3, [r2, #0]
	LeftValueOfPulseNum = CENTRAL_POINT-LeftValueOfPulseNum;
 8003afa:	4b38      	ldr	r3, [pc, #224]	; (8003bdc <get_motor_speed+0x10c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8003b02:	337d      	adds	r3, #125	; 0x7d
 8003b04:	4a35      	ldr	r2, [pc, #212]	; (8003bdc <get_motor_speed+0x10c>)
 8003b06:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim3,CENTRAL_POINT);
 8003b08:	4b33      	ldr	r3, [pc, #204]	; (8003bd8 <get_motor_speed+0x108>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,CENTRAL_POINT);
 8003b12:	4b33      	ldr	r3, [pc, #204]	; (8003be0 <get_motor_speed+0x110>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24
	speed_R= ((float)RightValueOPulseNum)*200.0/2528.0*0.6283;
 8003b1c:	4b31      	ldr	r3, [pc, #196]	; (8003be4 <get_motor_speed+0x114>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fd f8bb 	bl	8000c9c <__aeabi_i2f>
 8003b26:	4603      	mov	r3, r0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fc fc7d 	bl	8000428 <__aeabi_f2d>
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <get_motor_speed+0x118>)
 8003b34:	f7fc fcd0 	bl	80004d8 <__aeabi_dmul>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	460c      	mov	r4, r1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	4621      	mov	r1, r4
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	4b29      	ldr	r3, [pc, #164]	; (8003bec <get_motor_speed+0x11c>)
 8003b46:	f7fc fdf1 	bl	800072c <__aeabi_ddiv>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	4618      	mov	r0, r3
 8003b50:	4621      	mov	r1, r4
 8003b52:	a31d      	add	r3, pc, #116	; (adr r3, 8003bc8 <get_motor_speed+0xf8>)
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f7fc fcbe 	bl	80004d8 <__aeabi_dmul>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	460c      	mov	r4, r1
 8003b60:	4618      	mov	r0, r3
 8003b62:	4621      	mov	r1, r4
 8003b64:	f7fc ff90 	bl	8000a88 <__aeabi_d2f>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <get_motor_speed+0x120>)
 8003b6c:	601a      	str	r2, [r3, #0]
	speed_L= ((float)LeftValueOfPulseNum)*200.0/1685.0*0.6283;
 8003b6e:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <get_motor_speed+0x10c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fd f892 	bl	8000c9c <__aeabi_i2f>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fc fc54 	bl	8000428 <__aeabi_f2d>
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <get_motor_speed+0x118>)
 8003b86:	f7fc fca7 	bl	80004d8 <__aeabi_dmul>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	4618      	mov	r0, r3
 8003b90:	4621      	mov	r1, r4
 8003b92:	a30f      	add	r3, pc, #60	; (adr r3, 8003bd0 <get_motor_speed+0x100>)
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	f7fc fdc8 	bl	800072c <__aeabi_ddiv>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	a308      	add	r3, pc, #32	; (adr r3, 8003bc8 <get_motor_speed+0xf8>)
 8003ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003baa:	f7fc fc95 	bl	80004d8 <__aeabi_dmul>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	f7fc ff67 	bl	8000a88 <__aeabi_d2f>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <get_motor_speed+0x124>)
 8003bbe:	601a      	str	r2, [r3, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	bd98      	pop	{r3, r4, r7, pc}
 8003bc4:	f3af 8000 	nop.w
 8003bc8:	9a027525 	.word	0x9a027525
 8003bcc:	3fe41b08 	.word	0x3fe41b08
 8003bd0:	00000000 	.word	0x00000000
 8003bd4:	409a5400 	.word	0x409a5400
 8003bd8:	20000338 	.word	0x20000338
 8003bdc:	200002a4 	.word	0x200002a4
 8003be0:	200002f8 	.word	0x200002f8
 8003be4:	200002a8 	.word	0x200002a8
 8003be8:	40690000 	.word	0x40690000
 8003bec:	40a3c000 	.word	0x40a3c000
 8003bf0:	200002ac 	.word	0x200002ac
 8003bf4:	200002b0 	.word	0x200002b0

08003bf8 <my_one_step>:

//static uint8_t data[30];
//uint32_t counter;
//uint32_t PWM=0;
void my_one_step(){
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
//	int PWMvalue;
//	static uint32_t i = 0;
	get_motor_speed();
 8003bfc:	f7ff ff68 	bl	8003ad0 <get_motor_speed>
//	PWMvalue = PID_R_motor(ForwardSpeed,speed_R);
//	PWMvalue = PID_L_motor(ForwardSpeed,speed_L);
//	if(i<2000){i++;}else{PWMvalue+=3000;}
	static decoulpe_TypeDef decouple_speed;
	decoupling(ForwardSpeed, RollSpeed, &decouple_speed);
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <my_one_step+0x50>)
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <my_one_step+0x54>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a11      	ldr	r2, [pc, #68]	; (8003c50 <my_one_step+0x58>)
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	f7ff f9f8 	bl	8003000 <decoupling>
	set_motor_PWM(left,PID_L_motor(decouple_speed.Speed_L,speed_L));
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <my_one_step+0x58>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <my_one_step+0x5c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f7ff fbdc 	bl	80033d8 <PID_L_motor>
 8003c20:	4603      	mov	r3, r0
 8003c22:	4619      	mov	r1, r3
 8003c24:	2001      	movs	r0, #1
 8003c26:	f7ff ff0b 	bl	8003a40 <set_motor_PWM>
	set_motor_PWM(right,PID_R_motor(decouple_speed.Speed_R,speed_R));
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <my_one_step+0x58>)
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <my_one_step+0x60>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4619      	mov	r1, r3
 8003c34:	4610      	mov	r0, r2
 8003c36:	f7ff fb4b 	bl	80032d0 <PID_R_motor>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f7ff fefe 	bl	8003a40 <set_motor_PWM>
//	sprintf(data,"%2.4f\n",speed_L);
//	HAL_UART_Transmit(&huart1, data, strlen(data), 0x05);


}
 8003c44:	bf00      	nop
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	200002dc 	.word	0x200002dc
 8003c4c:	20000048 	.word	0x20000048
 8003c50:	200002b4 	.word	0x200002b4
 8003c54:	200002b0 	.word	0x200002b0
 8003c58:	200002ac 	.word	0x200002ac

08003c5c <my_uart_init>:

static uint8_t rec_data_FIFO[20];
static uint8_t rec_data[10];
float ForwardSpeed = 0,RollSpeed = 0.5;
static FloatToUnsignedChar FTUC;
void my_uart_init(){
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, rec_data_FIFO, 20);
 8003c60:	2214      	movs	r2, #20
 8003c62:	4903      	ldr	r1, [pc, #12]	; (8003c70 <my_uart_init+0x14>)
 8003c64:	4803      	ldr	r0, [pc, #12]	; (8003c74 <my_uart_init+0x18>)
 8003c66:	f7fe ffa9 	bl	8002bbc <HAL_UART_Receive_DMA>
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200002bc 	.word	0x200002bc
 8003c74:	20000400 	.word	0x20000400

08003c78 <transfer_data>:

void transfer_data(){
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
	if((rec_data[0]==0xff)&&(rec_data[9]==0xff)){
 8003c7c:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <transfer_data+0x6c>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2bff      	cmp	r3, #255	; 0xff
 8003c82:	d12b      	bne.n	8003cdc <transfer_data+0x64>
 8003c84:	4b17      	ldr	r3, [pc, #92]	; (8003ce4 <transfer_data+0x6c>)
 8003c86:	7a5b      	ldrb	r3, [r3, #9]
 8003c88:	2bff      	cmp	r3, #255	; 0xff
 8003c8a:	d127      	bne.n	8003cdc <transfer_data+0x64>
		FTUC.U8.low = rec_data[1];
 8003c8c:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <transfer_data+0x6c>)
 8003c8e:	785a      	ldrb	r2, [r3, #1]
 8003c90:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <transfer_data+0x70>)
 8003c92:	701a      	strb	r2, [r3, #0]
		FTUC.U8.mlow = rec_data[2];
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <transfer_data+0x6c>)
 8003c96:	789a      	ldrb	r2, [r3, #2]
 8003c98:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <transfer_data+0x70>)
 8003c9a:	705a      	strb	r2, [r3, #1]
		FTUC.U8.mhigh = rec_data[3];
 8003c9c:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <transfer_data+0x6c>)
 8003c9e:	78da      	ldrb	r2, [r3, #3]
 8003ca0:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <transfer_data+0x70>)
 8003ca2:	709a      	strb	r2, [r3, #2]
		FTUC.U8.high = rec_data[4];
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <transfer_data+0x6c>)
 8003ca6:	791a      	ldrb	r2, [r3, #4]
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <transfer_data+0x70>)
 8003caa:	70da      	strb	r2, [r3, #3]
		ForwardSpeed = FTUC.F32;
 8003cac:	4b0e      	ldr	r3, [pc, #56]	; (8003ce8 <transfer_data+0x70>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <transfer_data+0x74>)
 8003cb2:	6013      	str	r3, [r2, #0]
		FTUC.U8.low = rec_data[5];
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <transfer_data+0x6c>)
 8003cb6:	795a      	ldrb	r2, [r3, #5]
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <transfer_data+0x70>)
 8003cba:	701a      	strb	r2, [r3, #0]
		FTUC.U8.mlow = rec_data[6];
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <transfer_data+0x6c>)
 8003cbe:	799a      	ldrb	r2, [r3, #6]
 8003cc0:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <transfer_data+0x70>)
 8003cc2:	705a      	strb	r2, [r3, #1]
		FTUC.U8.mhigh = rec_data[7];
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <transfer_data+0x6c>)
 8003cc6:	79da      	ldrb	r2, [r3, #7]
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <transfer_data+0x70>)
 8003cca:	709a      	strb	r2, [r3, #2]
		FTUC.U8.high = rec_data[8];
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <transfer_data+0x6c>)
 8003cce:	7a1a      	ldrb	r2, [r3, #8]
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <transfer_data+0x70>)
 8003cd2:	70da      	strb	r2, [r3, #3]
		RollSpeed = FTUC.F32;
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <transfer_data+0x70>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <transfer_data+0x78>)
 8003cda:	6013      	str	r3, [r2, #0]
	}
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	200002d0 	.word	0x200002d0
 8003ce8:	200002e0 	.word	0x200002e0
 8003cec:	200002dc 	.word	0x200002dc
 8003cf0:	20000048 	.word	0x20000048

08003cf4 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback  ( UART_HandleTypeDef *  huart ){
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance){
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <HAL_UART_RxHalfCpltCallback+0x40>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d110      	bne.n	8003d2a <HAL_UART_RxHalfCpltCallback+0x36>
		for(uint8_t i =0;i<10;i++){
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e00a      	b.n	8003d24 <HAL_UART_RxHalfCpltCallback+0x30>
			rec_data[i]=rec_data_FIFO[i];
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	4909      	ldr	r1, [pc, #36]	; (8003d38 <HAL_UART_RxHalfCpltCallback+0x44>)
 8003d14:	5c89      	ldrb	r1, [r1, r2]
 8003d16:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <HAL_UART_RxHalfCpltCallback+0x48>)
 8003d18:	54d1      	strb	r1, [r2, r3]
			transfer_data();
 8003d1a:	f7ff ffad 	bl	8003c78 <transfer_data>
		for(uint8_t i =0;i<10;i++){
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	3301      	adds	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b09      	cmp	r3, #9
 8003d28:	d9f1      	bls.n	8003d0e <HAL_UART_RxHalfCpltCallback+0x1a>
		}
	}
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000400 	.word	0x20000400
 8003d38:	200002bc 	.word	0x200002bc
 8003d3c:	200002d0 	.word	0x200002d0

08003d40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback  ( UART_HandleTypeDef *  huart ){
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance){
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4b0d      	ldr	r3, [pc, #52]	; (8003d84 <HAL_UART_RxCpltCallback+0x44>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d112      	bne.n	8003d7a <HAL_UART_RxCpltCallback+0x3a>
		for(uint8_t i =0;i<10;i++){
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]
 8003d58:	e00c      	b.n	8003d74 <HAL_UART_RxCpltCallback+0x34>
			rec_data[i]=rec_data_FIFO[i+10];
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	f103 020a 	add.w	r2, r3, #10
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	4909      	ldr	r1, [pc, #36]	; (8003d88 <HAL_UART_RxCpltCallback+0x48>)
 8003d64:	5c89      	ldrb	r1, [r1, r2]
 8003d66:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <HAL_UART_RxCpltCallback+0x4c>)
 8003d68:	54d1      	strb	r1, [r2, r3]
			transfer_data();
 8003d6a:	f7ff ff85 	bl	8003c78 <transfer_data>
		for(uint8_t i =0;i<10;i++){
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	3301      	adds	r3, #1
 8003d72:	73fb      	strb	r3, [r7, #15]
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	2b09      	cmp	r3, #9
 8003d78:	d9ef      	bls.n	8003d5a <HAL_UART_RxCpltCallback+0x1a>
		}
	}
}
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000400 	.word	0x20000400
 8003d88:	200002bc 	.word	0x200002bc
 8003d8c:	200002d0 	.word	0x200002d0

08003d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d96:	4b15      	ldr	r3, [pc, #84]	; (8003dec <HAL_MspInit+0x5c>)
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	4a14      	ldr	r2, [pc, #80]	; (8003dec <HAL_MspInit+0x5c>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6193      	str	r3, [r2, #24]
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_MspInit+0x5c>)
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <HAL_MspInit+0x5c>)
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	4a0e      	ldr	r2, [pc, #56]	; (8003dec <HAL_MspInit+0x5c>)
 8003db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db8:	61d3      	str	r3, [r2, #28]
 8003dba:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <HAL_MspInit+0x5c>)
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	607b      	str	r3, [r7, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <HAL_MspInit+0x60>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <HAL_MspInit+0x60>)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40010000 	.word	0x40010000

08003df4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a12      	ldr	r2, [pc, #72]	; (8003e4c <HAL_TIM_PWM_MspInit+0x58>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10c      	bne.n	8003e20 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e06:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_TIM_PWM_MspInit+0x5c>)
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	4a11      	ldr	r2, [pc, #68]	; (8003e50 <HAL_TIM_PWM_MspInit+0x5c>)
 8003e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e10:	6193      	str	r3, [r2, #24]
 8003e12:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <HAL_TIM_PWM_MspInit+0x5c>)
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003e1e:	e010      	b.n	8003e42 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e28:	d10b      	bne.n	8003e42 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_TIM_PWM_MspInit+0x5c>)
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	4a08      	ldr	r2, [pc, #32]	; (8003e50 <HAL_TIM_PWM_MspInit+0x5c>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	61d3      	str	r3, [r2, #28]
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_TIM_PWM_MspInit+0x5c>)
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	40012c00 	.word	0x40012c00
 8003e50:	40021000 	.word	0x40021000

08003e54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08a      	sub	sp, #40	; 0x28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e5c:	f107 0318 	add.w	r3, r7, #24
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a2a      	ldr	r2, [pc, #168]	; (8003f18 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d124      	bne.n	8003ebe <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e74:	4b29      	ldr	r3, [pc, #164]	; (8003f1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	4a28      	ldr	r2, [pc, #160]	; (8003f1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003e7a:	f043 0302 	orr.w	r3, r3, #2
 8003e7e:	61d3      	str	r3, [r2, #28]
 8003e80:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8c:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003e92:	f043 0304 	orr.w	r3, r3, #4
 8003e96:	6193      	str	r3, [r2, #24]
 8003e98:	4b20      	ldr	r3, [pc, #128]	; (8003f1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = A_Left_Pin|B_Left_Pin;
 8003ea4:	23c0      	movs	r3, #192	; 0xc0
 8003ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eac:	2301      	movs	r3, #1
 8003eae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb0:	f107 0318 	add.w	r3, r7, #24
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	481a      	ldr	r0, [pc, #104]	; (8003f20 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003eb8:	f7fd fc18 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ebc:	e028      	b.n	8003f10 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a18      	ldr	r2, [pc, #96]	; (8003f24 <HAL_TIM_Encoder_MspInit+0xd0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d123      	bne.n	8003f10 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ec8:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	4a13      	ldr	r2, [pc, #76]	; (8003f1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003ece:	f043 0304 	orr.w	r3, r3, #4
 8003ed2:	61d3      	str	r3, [r2, #28]
 8003ed4:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	4a0d      	ldr	r2, [pc, #52]	; (8003f1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003ee6:	f043 0308 	orr.w	r3, r3, #8
 8003eea:	6193      	str	r3, [r2, #24]
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_Right_Pin|B_Right_Pin;
 8003ef8:	23c0      	movs	r3, #192	; 0xc0
 8003efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f00:	2301      	movs	r3, #1
 8003f02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f04:	f107 0318 	add.w	r3, r7, #24
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4807      	ldr	r0, [pc, #28]	; (8003f28 <HAL_TIM_Encoder_MspInit+0xd4>)
 8003f0c:	f7fd fbee 	bl	80016ec <HAL_GPIO_Init>
}
 8003f10:	bf00      	nop
 8003f12:	3728      	adds	r7, #40	; 0x28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40000400 	.word	0x40000400
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40010800 	.word	0x40010800
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40010c00 	.word	0x40010c00

08003f2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f34:	f107 0310 	add.w	r3, r7, #16
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1f      	ldr	r2, [pc, #124]	; (8003fc4 <HAL_TIM_MspPostInit+0x98>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d119      	bne.n	8003f80 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4c:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <HAL_TIM_MspPostInit+0x9c>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	4a1d      	ldr	r2, [pc, #116]	; (8003fc8 <HAL_TIM_MspPostInit+0x9c>)
 8003f52:	f043 0304 	orr.w	r3, r3, #4
 8003f56:	6193      	str	r3, [r2, #24]
 8003f58:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <HAL_TIM_MspPostInit+0x9c>)
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWMOfLeft_Pin;
 8003f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOfLeft_GPIO_Port, &GPIO_InitStruct);
 8003f72:	f107 0310 	add.w	r3, r7, #16
 8003f76:	4619      	mov	r1, r3
 8003f78:	4814      	ldr	r0, [pc, #80]	; (8003fcc <HAL_TIM_MspPostInit+0xa0>)
 8003f7a:	f7fd fbb7 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003f7e:	e01c      	b.n	8003fba <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f88:	d117      	bne.n	8003fba <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <HAL_TIM_MspPostInit+0x9c>)
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <HAL_TIM_MspPostInit+0x9c>)
 8003f90:	f043 0304 	orr.w	r3, r3, #4
 8003f94:	6193      	str	r3, [r2, #24]
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <HAL_TIM_MspPostInit+0x9c>)
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMOfRight_Pin;
 8003fa2:	2308      	movs	r3, #8
 8003fa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003faa:	2302      	movs	r3, #2
 8003fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOfRight_GPIO_Port, &GPIO_InitStruct);
 8003fae:	f107 0310 	add.w	r3, r7, #16
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4805      	ldr	r0, [pc, #20]	; (8003fcc <HAL_TIM_MspPostInit+0xa0>)
 8003fb6:	f7fd fb99 	bl	80016ec <HAL_GPIO_Init>
}
 8003fba:	bf00      	nop
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40010800 	.word	0x40010800

08003fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd8:	f107 0310 	add.w	r3, r7, #16
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a43      	ldr	r2, [pc, #268]	; (80040f8 <HAL_UART_MspInit+0x128>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d17f      	bne.n	80040f0 <HAL_UART_MspInit+0x120>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ff0:	4b42      	ldr	r3, [pc, #264]	; (80040fc <HAL_UART_MspInit+0x12c>)
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	4a41      	ldr	r2, [pc, #260]	; (80040fc <HAL_UART_MspInit+0x12c>)
 8003ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ffa:	6193      	str	r3, [r2, #24]
 8003ffc:	4b3f      	ldr	r3, [pc, #252]	; (80040fc <HAL_UART_MspInit+0x12c>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004008:	4b3c      	ldr	r3, [pc, #240]	; (80040fc <HAL_UART_MspInit+0x12c>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	4a3b      	ldr	r2, [pc, #236]	; (80040fc <HAL_UART_MspInit+0x12c>)
 800400e:	f043 0304 	orr.w	r3, r3, #4
 8004012:	6193      	str	r3, [r2, #24]
 8004014:	4b39      	ldr	r3, [pc, #228]	; (80040fc <HAL_UART_MspInit+0x12c>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004024:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004026:	2302      	movs	r3, #2
 8004028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800402a:	2303      	movs	r3, #3
 800402c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402e:	f107 0310 	add.w	r3, r7, #16
 8004032:	4619      	mov	r1, r3
 8004034:	4832      	ldr	r0, [pc, #200]	; (8004100 <HAL_UART_MspInit+0x130>)
 8004036:	f7fd fb59 	bl	80016ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800403a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800403e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004044:	2300      	movs	r3, #0
 8004046:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004048:	f107 0310 	add.w	r3, r7, #16
 800404c:	4619      	mov	r1, r3
 800404e:	482c      	ldr	r0, [pc, #176]	; (8004100 <HAL_UART_MspInit+0x130>)
 8004050:	f7fd fb4c 	bl	80016ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004054:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <HAL_UART_MspInit+0x134>)
 8004056:	4a2c      	ldr	r2, [pc, #176]	; (8004108 <HAL_UART_MspInit+0x138>)
 8004058:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800405a:	4b2a      	ldr	r3, [pc, #168]	; (8004104 <HAL_UART_MspInit+0x134>)
 800405c:	2210      	movs	r2, #16
 800405e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004060:	4b28      	ldr	r3, [pc, #160]	; (8004104 <HAL_UART_MspInit+0x134>)
 8004062:	2200      	movs	r2, #0
 8004064:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004066:	4b27      	ldr	r3, [pc, #156]	; (8004104 <HAL_UART_MspInit+0x134>)
 8004068:	2280      	movs	r2, #128	; 0x80
 800406a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800406c:	4b25      	ldr	r3, [pc, #148]	; (8004104 <HAL_UART_MspInit+0x134>)
 800406e:	2200      	movs	r2, #0
 8004070:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_UART_MspInit+0x134>)
 8004074:	2200      	movs	r2, #0
 8004076:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004078:	4b22      	ldr	r3, [pc, #136]	; (8004104 <HAL_UART_MspInit+0x134>)
 800407a:	2200      	movs	r2, #0
 800407c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800407e:	4b21      	ldr	r3, [pc, #132]	; (8004104 <HAL_UART_MspInit+0x134>)
 8004080:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004084:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004086:	481f      	ldr	r0, [pc, #124]	; (8004104 <HAL_UART_MspInit+0x134>)
 8004088:	f7fd f942 	bl	8001310 <HAL_DMA_Init>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8004092:	f7ff fca1 	bl	80039d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a1a      	ldr	r2, [pc, #104]	; (8004104 <HAL_UART_MspInit+0x134>)
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
 800409c:	4a19      	ldr	r2, [pc, #100]	; (8004104 <HAL_UART_MspInit+0x134>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80040a2:	4b1a      	ldr	r3, [pc, #104]	; (800410c <HAL_UART_MspInit+0x13c>)
 80040a4:	4a1a      	ldr	r2, [pc, #104]	; (8004110 <HAL_UART_MspInit+0x140>)
 80040a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040a8:	4b18      	ldr	r3, [pc, #96]	; (800410c <HAL_UART_MspInit+0x13c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040ae:	4b17      	ldr	r3, [pc, #92]	; (800410c <HAL_UART_MspInit+0x13c>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040b4:	4b15      	ldr	r3, [pc, #84]	; (800410c <HAL_UART_MspInit+0x13c>)
 80040b6:	2280      	movs	r2, #128	; 0x80
 80040b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040ba:	4b14      	ldr	r3, [pc, #80]	; (800410c <HAL_UART_MspInit+0x13c>)
 80040bc:	2200      	movs	r2, #0
 80040be:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040c0:	4b12      	ldr	r3, [pc, #72]	; (800410c <HAL_UART_MspInit+0x13c>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80040c6:	4b11      	ldr	r3, [pc, #68]	; (800410c <HAL_UART_MspInit+0x13c>)
 80040c8:	2220      	movs	r2, #32
 80040ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <HAL_UART_MspInit+0x13c>)
 80040ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80040d4:	480d      	ldr	r0, [pc, #52]	; (800410c <HAL_UART_MspInit+0x13c>)
 80040d6:	f7fd f91b 	bl	8001310 <HAL_DMA_Init>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 80040e0:	f7ff fc7a 	bl	80039d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a09      	ldr	r2, [pc, #36]	; (800410c <HAL_UART_MspInit+0x13c>)
 80040e8:	635a      	str	r2, [r3, #52]	; 0x34
 80040ea:	4a08      	ldr	r2, [pc, #32]	; (800410c <HAL_UART_MspInit+0x13c>)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80040f0:	bf00      	nop
 80040f2:	3720      	adds	r7, #32
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40013800 	.word	0x40013800
 80040fc:	40021000 	.word	0x40021000
 8004100:	40010800 	.word	0x40010800
 8004104:	20000378 	.word	0x20000378
 8004108:	40020044 	.word	0x40020044
 800410c:	200003bc 	.word	0x200003bc
 8004110:	40020058 	.word	0x40020058

08004114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004118:	bf00      	nop
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004124:	e7fe      	b.n	8004124 <HardFault_Handler+0x4>

08004126 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004126:	b480      	push	{r7}
 8004128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800412a:	e7fe      	b.n	800412a <MemManage_Handler+0x4>

0800412c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004130:	e7fe      	b.n	8004130 <BusFault_Handler+0x4>

08004132 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004132:	b480      	push	{r7}
 8004134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004136:	e7fe      	b.n	8004136 <UsageFault_Handler+0x4>

08004138 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint8_t flag =0;
	if(flag >=5 ){
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <SysTick_Handler+0x2c>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d905      	bls.n	8004174 <SysTick_Handler+0x18>
		my_one_step();
 8004168:	f7ff fd46 	bl	8003bf8 <my_one_step>
		flag =0;
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <SysTick_Handler+0x2c>)
 800416e:	2200      	movs	r2, #0
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	e005      	b.n	8004180 <SysTick_Handler+0x24>
	}else{
		flag++;
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <SysTick_Handler+0x2c>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	3301      	adds	r3, #1
 800417a:	b2da      	uxtb	r2, r3
 800417c:	4b02      	ldr	r3, [pc, #8]	; (8004188 <SysTick_Handler+0x2c>)
 800417e:	701a      	strb	r2, [r3, #0]
	}
//	my_one_step();
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004180:	f7fc ff9c 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004184:	bf00      	nop
 8004186:	bd80      	pop	{r7, pc}
 8004188:	200002e4 	.word	0x200002e4

0800418c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004190:	4802      	ldr	r0, [pc, #8]	; (800419c <DMA1_Channel4_IRQHandler+0x10>)
 8004192:	f7fd f977 	bl	8001484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004196:	bf00      	nop
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000378 	.word	0x20000378

080041a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80041a4:	4802      	ldr	r0, [pc, #8]	; (80041b0 <DMA1_Channel5_IRQHandler+0x10>)
 80041a6:	f7fd f96d 	bl	8001484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80041aa:	bf00      	nop
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	200003bc 	.word	0x200003bc

080041b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <_sbrk+0x50>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <_sbrk+0x16>
		heap_end = &end;
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <_sbrk+0x50>)
 80041c6:	4a10      	ldr	r2, [pc, #64]	; (8004208 <_sbrk+0x54>)
 80041c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80041ca:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <_sbrk+0x50>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <_sbrk+0x50>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4413      	add	r3, r2
 80041d8:	466a      	mov	r2, sp
 80041da:	4293      	cmp	r3, r2
 80041dc:	d907      	bls.n	80041ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80041de:	f000 f86f 	bl	80042c0 <__errno>
 80041e2:	4602      	mov	r2, r0
 80041e4:	230c      	movs	r3, #12
 80041e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80041e8:	f04f 33ff 	mov.w	r3, #4294967295
 80041ec:	e006      	b.n	80041fc <_sbrk+0x48>
	}

	heap_end += incr;
 80041ee:	4b05      	ldr	r3, [pc, #20]	; (8004204 <_sbrk+0x50>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	4a03      	ldr	r2, [pc, #12]	; (8004204 <_sbrk+0x50>)
 80041f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80041fa:	68fb      	ldr	r3, [r7, #12]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	200002e8 	.word	0x200002e8
 8004208:	200004c8 	.word	0x200004c8

0800420c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004210:	4b15      	ldr	r3, [pc, #84]	; (8004268 <SystemInit+0x5c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a14      	ldr	r2, [pc, #80]	; (8004268 <SystemInit+0x5c>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800421c:	4b12      	ldr	r3, [pc, #72]	; (8004268 <SystemInit+0x5c>)
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	4911      	ldr	r1, [pc, #68]	; (8004268 <SystemInit+0x5c>)
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <SystemInit+0x60>)
 8004224:	4013      	ands	r3, r2
 8004226:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <SystemInit+0x5c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a0e      	ldr	r2, [pc, #56]	; (8004268 <SystemInit+0x5c>)
 800422e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004236:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <SystemInit+0x5c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a0a      	ldr	r2, [pc, #40]	; (8004268 <SystemInit+0x5c>)
 800423e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004242:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004244:	4b08      	ldr	r3, [pc, #32]	; (8004268 <SystemInit+0x5c>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a07      	ldr	r2, [pc, #28]	; (8004268 <SystemInit+0x5c>)
 800424a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800424e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <SystemInit+0x5c>)
 8004252:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004256:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <SystemInit+0x64>)
 800425a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800425e:	609a      	str	r2, [r3, #8]
#endif 
}
 8004260:	bf00      	nop
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	40021000 	.word	0x40021000
 800426c:	f8ff0000 	.word	0xf8ff0000
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004274:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004276:	e003      	b.n	8004280 <LoopCopyDataInit>

08004278 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800427a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800427c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800427e:	3104      	adds	r1, #4

08004280 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004280:	480a      	ldr	r0, [pc, #40]	; (80042ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004284:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004286:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004288:	d3f6      	bcc.n	8004278 <CopyDataInit>
  ldr r2, =_sbss
 800428a:	4a0a      	ldr	r2, [pc, #40]	; (80042b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800428c:	e002      	b.n	8004294 <LoopFillZerobss>

0800428e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800428e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004290:	f842 3b04 	str.w	r3, [r2], #4

08004294 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004294:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004296:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004298:	d3f9      	bcc.n	800428e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800429a:	f7ff ffb7 	bl	800420c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800429e:	f000 f815 	bl	80042cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042a2:	f7ff f91d 	bl	80034e0 <main>
  bx lr
 80042a6:	4770      	bx	lr
  ldr r3, =_sidata
 80042a8:	08005fd0 	.word	0x08005fd0
  ldr r0, =_sdata
 80042ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80042b0:	20000220 	.word	0x20000220
  ldr r2, =_sbss
 80042b4:	20000220 	.word	0x20000220
  ldr r3, = _ebss
 80042b8:	200004c4 	.word	0x200004c4

080042bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042bc:	e7fe      	b.n	80042bc <ADC1_2_IRQHandler>
	...

080042c0 <__errno>:
 80042c0:	4b01      	ldr	r3, [pc, #4]	; (80042c8 <__errno+0x8>)
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000050 	.word	0x20000050

080042cc <__libc_init_array>:
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	2500      	movs	r5, #0
 80042d0:	4e0c      	ldr	r6, [pc, #48]	; (8004304 <__libc_init_array+0x38>)
 80042d2:	4c0d      	ldr	r4, [pc, #52]	; (8004308 <__libc_init_array+0x3c>)
 80042d4:	1ba4      	subs	r4, r4, r6
 80042d6:	10a4      	asrs	r4, r4, #2
 80042d8:	42a5      	cmp	r5, r4
 80042da:	d109      	bne.n	80042f0 <__libc_init_array+0x24>
 80042dc:	f001 fd3c 	bl	8005d58 <_init>
 80042e0:	2500      	movs	r5, #0
 80042e2:	4e0a      	ldr	r6, [pc, #40]	; (800430c <__libc_init_array+0x40>)
 80042e4:	4c0a      	ldr	r4, [pc, #40]	; (8004310 <__libc_init_array+0x44>)
 80042e6:	1ba4      	subs	r4, r4, r6
 80042e8:	10a4      	asrs	r4, r4, #2
 80042ea:	42a5      	cmp	r5, r4
 80042ec:	d105      	bne.n	80042fa <__libc_init_array+0x2e>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042f4:	4798      	blx	r3
 80042f6:	3501      	adds	r5, #1
 80042f8:	e7ee      	b.n	80042d8 <__libc_init_array+0xc>
 80042fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042fe:	4798      	blx	r3
 8004300:	3501      	adds	r5, #1
 8004302:	e7f2      	b.n	80042ea <__libc_init_array+0x1e>
 8004304:	08005fc8 	.word	0x08005fc8
 8004308:	08005fc8 	.word	0x08005fc8
 800430c:	08005fc8 	.word	0x08005fc8
 8004310:	08005fcc 	.word	0x08005fcc

08004314 <memset>:
 8004314:	4603      	mov	r3, r0
 8004316:	4402      	add	r2, r0
 8004318:	4293      	cmp	r3, r2
 800431a:	d100      	bne.n	800431e <memset+0xa>
 800431c:	4770      	bx	lr
 800431e:	f803 1b01 	strb.w	r1, [r3], #1
 8004322:	e7f9      	b.n	8004318 <memset+0x4>

08004324 <__cvt>:
 8004324:	2b00      	cmp	r3, #0
 8004326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800432a:	461e      	mov	r6, r3
 800432c:	bfbb      	ittet	lt
 800432e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004332:	461e      	movlt	r6, r3
 8004334:	2300      	movge	r3, #0
 8004336:	232d      	movlt	r3, #45	; 0x2d
 8004338:	b088      	sub	sp, #32
 800433a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800433c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004340:	f027 0720 	bic.w	r7, r7, #32
 8004344:	2f46      	cmp	r7, #70	; 0x46
 8004346:	4614      	mov	r4, r2
 8004348:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800434a:	700b      	strb	r3, [r1, #0]
 800434c:	d004      	beq.n	8004358 <__cvt+0x34>
 800434e:	2f45      	cmp	r7, #69	; 0x45
 8004350:	d100      	bne.n	8004354 <__cvt+0x30>
 8004352:	3501      	adds	r5, #1
 8004354:	2302      	movs	r3, #2
 8004356:	e000      	b.n	800435a <__cvt+0x36>
 8004358:	2303      	movs	r3, #3
 800435a:	aa07      	add	r2, sp, #28
 800435c:	9204      	str	r2, [sp, #16]
 800435e:	aa06      	add	r2, sp, #24
 8004360:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004364:	e9cd 3500 	strd	r3, r5, [sp]
 8004368:	4622      	mov	r2, r4
 800436a:	4633      	mov	r3, r6
 800436c:	f000 fba8 	bl	8004ac0 <_dtoa_r>
 8004370:	2f47      	cmp	r7, #71	; 0x47
 8004372:	4680      	mov	r8, r0
 8004374:	d102      	bne.n	800437c <__cvt+0x58>
 8004376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004378:	07db      	lsls	r3, r3, #31
 800437a:	d526      	bpl.n	80043ca <__cvt+0xa6>
 800437c:	2f46      	cmp	r7, #70	; 0x46
 800437e:	eb08 0905 	add.w	r9, r8, r5
 8004382:	d111      	bne.n	80043a8 <__cvt+0x84>
 8004384:	f898 3000 	ldrb.w	r3, [r8]
 8004388:	2b30      	cmp	r3, #48	; 0x30
 800438a:	d10a      	bne.n	80043a2 <__cvt+0x7e>
 800438c:	2200      	movs	r2, #0
 800438e:	2300      	movs	r3, #0
 8004390:	4620      	mov	r0, r4
 8004392:	4631      	mov	r1, r6
 8004394:	f7fc fb08 	bl	80009a8 <__aeabi_dcmpeq>
 8004398:	b918      	cbnz	r0, 80043a2 <__cvt+0x7e>
 800439a:	f1c5 0501 	rsb	r5, r5, #1
 800439e:	f8ca 5000 	str.w	r5, [sl]
 80043a2:	f8da 3000 	ldr.w	r3, [sl]
 80043a6:	4499      	add	r9, r3
 80043a8:	2200      	movs	r2, #0
 80043aa:	2300      	movs	r3, #0
 80043ac:	4620      	mov	r0, r4
 80043ae:	4631      	mov	r1, r6
 80043b0:	f7fc fafa 	bl	80009a8 <__aeabi_dcmpeq>
 80043b4:	b938      	cbnz	r0, 80043c6 <__cvt+0xa2>
 80043b6:	2230      	movs	r2, #48	; 0x30
 80043b8:	9b07      	ldr	r3, [sp, #28]
 80043ba:	454b      	cmp	r3, r9
 80043bc:	d205      	bcs.n	80043ca <__cvt+0xa6>
 80043be:	1c59      	adds	r1, r3, #1
 80043c0:	9107      	str	r1, [sp, #28]
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	e7f8      	b.n	80043b8 <__cvt+0x94>
 80043c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80043ca:	4640      	mov	r0, r8
 80043cc:	9b07      	ldr	r3, [sp, #28]
 80043ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80043d0:	eba3 0308 	sub.w	r3, r3, r8
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	b008      	add	sp, #32
 80043d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080043dc <__exponent>:
 80043dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043de:	2900      	cmp	r1, #0
 80043e0:	bfb4      	ite	lt
 80043e2:	232d      	movlt	r3, #45	; 0x2d
 80043e4:	232b      	movge	r3, #43	; 0x2b
 80043e6:	4604      	mov	r4, r0
 80043e8:	bfb8      	it	lt
 80043ea:	4249      	neglt	r1, r1
 80043ec:	2909      	cmp	r1, #9
 80043ee:	f804 2b02 	strb.w	r2, [r4], #2
 80043f2:	7043      	strb	r3, [r0, #1]
 80043f4:	dd21      	ble.n	800443a <__exponent+0x5e>
 80043f6:	f10d 0307 	add.w	r3, sp, #7
 80043fa:	461f      	mov	r7, r3
 80043fc:	260a      	movs	r6, #10
 80043fe:	fb91 f5f6 	sdiv	r5, r1, r6
 8004402:	fb06 1115 	mls	r1, r6, r5, r1
 8004406:	2d09      	cmp	r5, #9
 8004408:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800440c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004410:	f103 32ff 	add.w	r2, r3, #4294967295
 8004414:	4629      	mov	r1, r5
 8004416:	dc09      	bgt.n	800442c <__exponent+0x50>
 8004418:	3130      	adds	r1, #48	; 0x30
 800441a:	3b02      	subs	r3, #2
 800441c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004420:	42bb      	cmp	r3, r7
 8004422:	4622      	mov	r2, r4
 8004424:	d304      	bcc.n	8004430 <__exponent+0x54>
 8004426:	1a10      	subs	r0, r2, r0
 8004428:	b003      	add	sp, #12
 800442a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800442c:	4613      	mov	r3, r2
 800442e:	e7e6      	b.n	80043fe <__exponent+0x22>
 8004430:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004434:	f804 2b01 	strb.w	r2, [r4], #1
 8004438:	e7f2      	b.n	8004420 <__exponent+0x44>
 800443a:	2330      	movs	r3, #48	; 0x30
 800443c:	4419      	add	r1, r3
 800443e:	7083      	strb	r3, [r0, #2]
 8004440:	1d02      	adds	r2, r0, #4
 8004442:	70c1      	strb	r1, [r0, #3]
 8004444:	e7ef      	b.n	8004426 <__exponent+0x4a>
	...

08004448 <_printf_float>:
 8004448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444c:	b091      	sub	sp, #68	; 0x44
 800444e:	460c      	mov	r4, r1
 8004450:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004452:	4693      	mov	fp, r2
 8004454:	461e      	mov	r6, r3
 8004456:	4605      	mov	r5, r0
 8004458:	f001 f8e6 	bl	8005628 <_localeconv_r>
 800445c:	6803      	ldr	r3, [r0, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	9309      	str	r3, [sp, #36]	; 0x24
 8004462:	f7fb fe75 	bl	8000150 <strlen>
 8004466:	2300      	movs	r3, #0
 8004468:	930e      	str	r3, [sp, #56]	; 0x38
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	900a      	str	r0, [sp, #40]	; 0x28
 800446e:	3307      	adds	r3, #7
 8004470:	f023 0307 	bic.w	r3, r3, #7
 8004474:	f103 0208 	add.w	r2, r3, #8
 8004478:	f894 8018 	ldrb.w	r8, [r4, #24]
 800447c:	f8d4 a000 	ldr.w	sl, [r4]
 8004480:	603a      	str	r2, [r7, #0]
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800448a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800448e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004492:	930b      	str	r3, [sp, #44]	; 0x2c
 8004494:	f04f 32ff 	mov.w	r2, #4294967295
 8004498:	4ba6      	ldr	r3, [pc, #664]	; (8004734 <_printf_float+0x2ec>)
 800449a:	4638      	mov	r0, r7
 800449c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800449e:	f7fc fab5 	bl	8000a0c <__aeabi_dcmpun>
 80044a2:	bb68      	cbnz	r0, 8004500 <_printf_float+0xb8>
 80044a4:	f04f 32ff 	mov.w	r2, #4294967295
 80044a8:	4ba2      	ldr	r3, [pc, #648]	; (8004734 <_printf_float+0x2ec>)
 80044aa:	4638      	mov	r0, r7
 80044ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044ae:	f7fc fa8f 	bl	80009d0 <__aeabi_dcmple>
 80044b2:	bb28      	cbnz	r0, 8004500 <_printf_float+0xb8>
 80044b4:	2200      	movs	r2, #0
 80044b6:	2300      	movs	r3, #0
 80044b8:	4638      	mov	r0, r7
 80044ba:	4649      	mov	r1, r9
 80044bc:	f7fc fa7e 	bl	80009bc <__aeabi_dcmplt>
 80044c0:	b110      	cbz	r0, 80044c8 <_printf_float+0x80>
 80044c2:	232d      	movs	r3, #45	; 0x2d
 80044c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c8:	4f9b      	ldr	r7, [pc, #620]	; (8004738 <_printf_float+0x2f0>)
 80044ca:	4b9c      	ldr	r3, [pc, #624]	; (800473c <_printf_float+0x2f4>)
 80044cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044d0:	bf98      	it	ls
 80044d2:	461f      	movls	r7, r3
 80044d4:	2303      	movs	r3, #3
 80044d6:	f04f 0900 	mov.w	r9, #0
 80044da:	6123      	str	r3, [r4, #16]
 80044dc:	f02a 0304 	bic.w	r3, sl, #4
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	9600      	str	r6, [sp, #0]
 80044e4:	465b      	mov	r3, fp
 80044e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80044e8:	4621      	mov	r1, r4
 80044ea:	4628      	mov	r0, r5
 80044ec:	f000 f9e2 	bl	80048b4 <_printf_common>
 80044f0:	3001      	adds	r0, #1
 80044f2:	f040 8090 	bne.w	8004616 <_printf_float+0x1ce>
 80044f6:	f04f 30ff 	mov.w	r0, #4294967295
 80044fa:	b011      	add	sp, #68	; 0x44
 80044fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004500:	463a      	mov	r2, r7
 8004502:	464b      	mov	r3, r9
 8004504:	4638      	mov	r0, r7
 8004506:	4649      	mov	r1, r9
 8004508:	f7fc fa80 	bl	8000a0c <__aeabi_dcmpun>
 800450c:	b110      	cbz	r0, 8004514 <_printf_float+0xcc>
 800450e:	4f8c      	ldr	r7, [pc, #560]	; (8004740 <_printf_float+0x2f8>)
 8004510:	4b8c      	ldr	r3, [pc, #560]	; (8004744 <_printf_float+0x2fc>)
 8004512:	e7db      	b.n	80044cc <_printf_float+0x84>
 8004514:	6863      	ldr	r3, [r4, #4]
 8004516:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800451a:	1c59      	adds	r1, r3, #1
 800451c:	a80d      	add	r0, sp, #52	; 0x34
 800451e:	a90e      	add	r1, sp, #56	; 0x38
 8004520:	d140      	bne.n	80045a4 <_printf_float+0x15c>
 8004522:	2306      	movs	r3, #6
 8004524:	6063      	str	r3, [r4, #4]
 8004526:	f04f 0c00 	mov.w	ip, #0
 800452a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800452e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004532:	6863      	ldr	r3, [r4, #4]
 8004534:	6022      	str	r2, [r4, #0]
 8004536:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	463a      	mov	r2, r7
 800453e:	464b      	mov	r3, r9
 8004540:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004544:	4628      	mov	r0, r5
 8004546:	f7ff feed 	bl	8004324 <__cvt>
 800454a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800454e:	2b47      	cmp	r3, #71	; 0x47
 8004550:	4607      	mov	r7, r0
 8004552:	d109      	bne.n	8004568 <_printf_float+0x120>
 8004554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004556:	1cd8      	adds	r0, r3, #3
 8004558:	db02      	blt.n	8004560 <_printf_float+0x118>
 800455a:	6862      	ldr	r2, [r4, #4]
 800455c:	4293      	cmp	r3, r2
 800455e:	dd47      	ble.n	80045f0 <_printf_float+0x1a8>
 8004560:	f1a8 0802 	sub.w	r8, r8, #2
 8004564:	fa5f f888 	uxtb.w	r8, r8
 8004568:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800456c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800456e:	d824      	bhi.n	80045ba <_printf_float+0x172>
 8004570:	3901      	subs	r1, #1
 8004572:	4642      	mov	r2, r8
 8004574:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004578:	910d      	str	r1, [sp, #52]	; 0x34
 800457a:	f7ff ff2f 	bl	80043dc <__exponent>
 800457e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004580:	4681      	mov	r9, r0
 8004582:	1813      	adds	r3, r2, r0
 8004584:	2a01      	cmp	r2, #1
 8004586:	6123      	str	r3, [r4, #16]
 8004588:	dc02      	bgt.n	8004590 <_printf_float+0x148>
 800458a:	6822      	ldr	r2, [r4, #0]
 800458c:	07d1      	lsls	r1, r2, #31
 800458e:	d501      	bpl.n	8004594 <_printf_float+0x14c>
 8004590:	3301      	adds	r3, #1
 8004592:	6123      	str	r3, [r4, #16]
 8004594:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0a2      	beq.n	80044e2 <_printf_float+0x9a>
 800459c:	232d      	movs	r3, #45	; 0x2d
 800459e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a2:	e79e      	b.n	80044e2 <_printf_float+0x9a>
 80045a4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80045a8:	f000 816e 	beq.w	8004888 <_printf_float+0x440>
 80045ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045b0:	d1b9      	bne.n	8004526 <_printf_float+0xde>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1b7      	bne.n	8004526 <_printf_float+0xde>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e7b4      	b.n	8004524 <_printf_float+0xdc>
 80045ba:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80045be:	d119      	bne.n	80045f4 <_printf_float+0x1ac>
 80045c0:	2900      	cmp	r1, #0
 80045c2:	6863      	ldr	r3, [r4, #4]
 80045c4:	dd0c      	ble.n	80045e0 <_printf_float+0x198>
 80045c6:	6121      	str	r1, [r4, #16]
 80045c8:	b913      	cbnz	r3, 80045d0 <_printf_float+0x188>
 80045ca:	6822      	ldr	r2, [r4, #0]
 80045cc:	07d2      	lsls	r2, r2, #31
 80045ce:	d502      	bpl.n	80045d6 <_printf_float+0x18e>
 80045d0:	3301      	adds	r3, #1
 80045d2:	440b      	add	r3, r1
 80045d4:	6123      	str	r3, [r4, #16]
 80045d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045d8:	f04f 0900 	mov.w	r9, #0
 80045dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80045de:	e7d9      	b.n	8004594 <_printf_float+0x14c>
 80045e0:	b913      	cbnz	r3, 80045e8 <_printf_float+0x1a0>
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	07d0      	lsls	r0, r2, #31
 80045e6:	d501      	bpl.n	80045ec <_printf_float+0x1a4>
 80045e8:	3302      	adds	r3, #2
 80045ea:	e7f3      	b.n	80045d4 <_printf_float+0x18c>
 80045ec:	2301      	movs	r3, #1
 80045ee:	e7f1      	b.n	80045d4 <_printf_float+0x18c>
 80045f0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80045f4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80045f8:	4293      	cmp	r3, r2
 80045fa:	db05      	blt.n	8004608 <_printf_float+0x1c0>
 80045fc:	6822      	ldr	r2, [r4, #0]
 80045fe:	6123      	str	r3, [r4, #16]
 8004600:	07d1      	lsls	r1, r2, #31
 8004602:	d5e8      	bpl.n	80045d6 <_printf_float+0x18e>
 8004604:	3301      	adds	r3, #1
 8004606:	e7e5      	b.n	80045d4 <_printf_float+0x18c>
 8004608:	2b00      	cmp	r3, #0
 800460a:	bfcc      	ite	gt
 800460c:	2301      	movgt	r3, #1
 800460e:	f1c3 0302 	rsble	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	e7de      	b.n	80045d4 <_printf_float+0x18c>
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	055a      	lsls	r2, r3, #21
 800461a:	d407      	bmi.n	800462c <_printf_float+0x1e4>
 800461c:	6923      	ldr	r3, [r4, #16]
 800461e:	463a      	mov	r2, r7
 8004620:	4659      	mov	r1, fp
 8004622:	4628      	mov	r0, r5
 8004624:	47b0      	blx	r6
 8004626:	3001      	adds	r0, #1
 8004628:	d129      	bne.n	800467e <_printf_float+0x236>
 800462a:	e764      	b.n	80044f6 <_printf_float+0xae>
 800462c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004630:	f240 80d7 	bls.w	80047e2 <_printf_float+0x39a>
 8004634:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004638:	2200      	movs	r2, #0
 800463a:	2300      	movs	r3, #0
 800463c:	f7fc f9b4 	bl	80009a8 <__aeabi_dcmpeq>
 8004640:	b388      	cbz	r0, 80046a6 <_printf_float+0x25e>
 8004642:	2301      	movs	r3, #1
 8004644:	4a40      	ldr	r2, [pc, #256]	; (8004748 <_printf_float+0x300>)
 8004646:	4659      	mov	r1, fp
 8004648:	4628      	mov	r0, r5
 800464a:	47b0      	blx	r6
 800464c:	3001      	adds	r0, #1
 800464e:	f43f af52 	beq.w	80044f6 <_printf_float+0xae>
 8004652:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004656:	429a      	cmp	r2, r3
 8004658:	db02      	blt.n	8004660 <_printf_float+0x218>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	07d8      	lsls	r0, r3, #31
 800465e:	d50e      	bpl.n	800467e <_printf_float+0x236>
 8004660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004664:	4659      	mov	r1, fp
 8004666:	4628      	mov	r0, r5
 8004668:	47b0      	blx	r6
 800466a:	3001      	adds	r0, #1
 800466c:	f43f af43 	beq.w	80044f6 <_printf_float+0xae>
 8004670:	2700      	movs	r7, #0
 8004672:	f104 081a 	add.w	r8, r4, #26
 8004676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004678:	3b01      	subs	r3, #1
 800467a:	42bb      	cmp	r3, r7
 800467c:	dc09      	bgt.n	8004692 <_printf_float+0x24a>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	079f      	lsls	r7, r3, #30
 8004682:	f100 80fd 	bmi.w	8004880 <_printf_float+0x438>
 8004686:	68e0      	ldr	r0, [r4, #12]
 8004688:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800468a:	4298      	cmp	r0, r3
 800468c:	bfb8      	it	lt
 800468e:	4618      	movlt	r0, r3
 8004690:	e733      	b.n	80044fa <_printf_float+0xb2>
 8004692:	2301      	movs	r3, #1
 8004694:	4642      	mov	r2, r8
 8004696:	4659      	mov	r1, fp
 8004698:	4628      	mov	r0, r5
 800469a:	47b0      	blx	r6
 800469c:	3001      	adds	r0, #1
 800469e:	f43f af2a 	beq.w	80044f6 <_printf_float+0xae>
 80046a2:	3701      	adds	r7, #1
 80046a4:	e7e7      	b.n	8004676 <_printf_float+0x22e>
 80046a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	dc2b      	bgt.n	8004704 <_printf_float+0x2bc>
 80046ac:	2301      	movs	r3, #1
 80046ae:	4a26      	ldr	r2, [pc, #152]	; (8004748 <_printf_float+0x300>)
 80046b0:	4659      	mov	r1, fp
 80046b2:	4628      	mov	r0, r5
 80046b4:	47b0      	blx	r6
 80046b6:	3001      	adds	r0, #1
 80046b8:	f43f af1d 	beq.w	80044f6 <_printf_float+0xae>
 80046bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046be:	b923      	cbnz	r3, 80046ca <_printf_float+0x282>
 80046c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046c2:	b913      	cbnz	r3, 80046ca <_printf_float+0x282>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	07d9      	lsls	r1, r3, #31
 80046c8:	d5d9      	bpl.n	800467e <_printf_float+0x236>
 80046ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046ce:	4659      	mov	r1, fp
 80046d0:	4628      	mov	r0, r5
 80046d2:	47b0      	blx	r6
 80046d4:	3001      	adds	r0, #1
 80046d6:	f43f af0e 	beq.w	80044f6 <_printf_float+0xae>
 80046da:	f04f 0800 	mov.w	r8, #0
 80046de:	f104 091a 	add.w	r9, r4, #26
 80046e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046e4:	425b      	negs	r3, r3
 80046e6:	4543      	cmp	r3, r8
 80046e8:	dc01      	bgt.n	80046ee <_printf_float+0x2a6>
 80046ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046ec:	e797      	b.n	800461e <_printf_float+0x1d6>
 80046ee:	2301      	movs	r3, #1
 80046f0:	464a      	mov	r2, r9
 80046f2:	4659      	mov	r1, fp
 80046f4:	4628      	mov	r0, r5
 80046f6:	47b0      	blx	r6
 80046f8:	3001      	adds	r0, #1
 80046fa:	f43f aefc 	beq.w	80044f6 <_printf_float+0xae>
 80046fe:	f108 0801 	add.w	r8, r8, #1
 8004702:	e7ee      	b.n	80046e2 <_printf_float+0x29a>
 8004704:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004706:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004708:	429a      	cmp	r2, r3
 800470a:	bfa8      	it	ge
 800470c:	461a      	movge	r2, r3
 800470e:	2a00      	cmp	r2, #0
 8004710:	4690      	mov	r8, r2
 8004712:	dd07      	ble.n	8004724 <_printf_float+0x2dc>
 8004714:	4613      	mov	r3, r2
 8004716:	4659      	mov	r1, fp
 8004718:	463a      	mov	r2, r7
 800471a:	4628      	mov	r0, r5
 800471c:	47b0      	blx	r6
 800471e:	3001      	adds	r0, #1
 8004720:	f43f aee9 	beq.w	80044f6 <_printf_float+0xae>
 8004724:	f104 031a 	add.w	r3, r4, #26
 8004728:	f04f 0a00 	mov.w	sl, #0
 800472c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004730:	930b      	str	r3, [sp, #44]	; 0x2c
 8004732:	e015      	b.n	8004760 <_printf_float+0x318>
 8004734:	7fefffff 	.word	0x7fefffff
 8004738:	08005da0 	.word	0x08005da0
 800473c:	08005d9c 	.word	0x08005d9c
 8004740:	08005da8 	.word	0x08005da8
 8004744:	08005da4 	.word	0x08005da4
 8004748:	08005dac 	.word	0x08005dac
 800474c:	2301      	movs	r3, #1
 800474e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004750:	4659      	mov	r1, fp
 8004752:	4628      	mov	r0, r5
 8004754:	47b0      	blx	r6
 8004756:	3001      	adds	r0, #1
 8004758:	f43f aecd 	beq.w	80044f6 <_printf_float+0xae>
 800475c:	f10a 0a01 	add.w	sl, sl, #1
 8004760:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004764:	eba9 0308 	sub.w	r3, r9, r8
 8004768:	4553      	cmp	r3, sl
 800476a:	dcef      	bgt.n	800474c <_printf_float+0x304>
 800476c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004770:	429a      	cmp	r2, r3
 8004772:	444f      	add	r7, r9
 8004774:	db14      	blt.n	80047a0 <_printf_float+0x358>
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	07da      	lsls	r2, r3, #31
 800477a:	d411      	bmi.n	80047a0 <_printf_float+0x358>
 800477c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800477e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004780:	eba3 0209 	sub.w	r2, r3, r9
 8004784:	eba3 0901 	sub.w	r9, r3, r1
 8004788:	4591      	cmp	r9, r2
 800478a:	bfa8      	it	ge
 800478c:	4691      	movge	r9, r2
 800478e:	f1b9 0f00 	cmp.w	r9, #0
 8004792:	dc0d      	bgt.n	80047b0 <_printf_float+0x368>
 8004794:	2700      	movs	r7, #0
 8004796:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800479a:	f104 081a 	add.w	r8, r4, #26
 800479e:	e018      	b.n	80047d2 <_printf_float+0x38a>
 80047a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047a4:	4659      	mov	r1, fp
 80047a6:	4628      	mov	r0, r5
 80047a8:	47b0      	blx	r6
 80047aa:	3001      	adds	r0, #1
 80047ac:	d1e6      	bne.n	800477c <_printf_float+0x334>
 80047ae:	e6a2      	b.n	80044f6 <_printf_float+0xae>
 80047b0:	464b      	mov	r3, r9
 80047b2:	463a      	mov	r2, r7
 80047b4:	4659      	mov	r1, fp
 80047b6:	4628      	mov	r0, r5
 80047b8:	47b0      	blx	r6
 80047ba:	3001      	adds	r0, #1
 80047bc:	d1ea      	bne.n	8004794 <_printf_float+0x34c>
 80047be:	e69a      	b.n	80044f6 <_printf_float+0xae>
 80047c0:	2301      	movs	r3, #1
 80047c2:	4642      	mov	r2, r8
 80047c4:	4659      	mov	r1, fp
 80047c6:	4628      	mov	r0, r5
 80047c8:	47b0      	blx	r6
 80047ca:	3001      	adds	r0, #1
 80047cc:	f43f ae93 	beq.w	80044f6 <_printf_float+0xae>
 80047d0:	3701      	adds	r7, #1
 80047d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	eba3 0309 	sub.w	r3, r3, r9
 80047dc:	42bb      	cmp	r3, r7
 80047de:	dcef      	bgt.n	80047c0 <_printf_float+0x378>
 80047e0:	e74d      	b.n	800467e <_printf_float+0x236>
 80047e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047e4:	2a01      	cmp	r2, #1
 80047e6:	dc01      	bgt.n	80047ec <_printf_float+0x3a4>
 80047e8:	07db      	lsls	r3, r3, #31
 80047ea:	d538      	bpl.n	800485e <_printf_float+0x416>
 80047ec:	2301      	movs	r3, #1
 80047ee:	463a      	mov	r2, r7
 80047f0:	4659      	mov	r1, fp
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b0      	blx	r6
 80047f6:	3001      	adds	r0, #1
 80047f8:	f43f ae7d 	beq.w	80044f6 <_printf_float+0xae>
 80047fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004800:	4659      	mov	r1, fp
 8004802:	4628      	mov	r0, r5
 8004804:	47b0      	blx	r6
 8004806:	3001      	adds	r0, #1
 8004808:	f107 0701 	add.w	r7, r7, #1
 800480c:	f43f ae73 	beq.w	80044f6 <_printf_float+0xae>
 8004810:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004816:	2200      	movs	r2, #0
 8004818:	f103 38ff 	add.w	r8, r3, #4294967295
 800481c:	2300      	movs	r3, #0
 800481e:	f7fc f8c3 	bl	80009a8 <__aeabi_dcmpeq>
 8004822:	b9c0      	cbnz	r0, 8004856 <_printf_float+0x40e>
 8004824:	4643      	mov	r3, r8
 8004826:	463a      	mov	r2, r7
 8004828:	4659      	mov	r1, fp
 800482a:	4628      	mov	r0, r5
 800482c:	47b0      	blx	r6
 800482e:	3001      	adds	r0, #1
 8004830:	d10d      	bne.n	800484e <_printf_float+0x406>
 8004832:	e660      	b.n	80044f6 <_printf_float+0xae>
 8004834:	2301      	movs	r3, #1
 8004836:	4642      	mov	r2, r8
 8004838:	4659      	mov	r1, fp
 800483a:	4628      	mov	r0, r5
 800483c:	47b0      	blx	r6
 800483e:	3001      	adds	r0, #1
 8004840:	f43f ae59 	beq.w	80044f6 <_printf_float+0xae>
 8004844:	3701      	adds	r7, #1
 8004846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004848:	3b01      	subs	r3, #1
 800484a:	42bb      	cmp	r3, r7
 800484c:	dcf2      	bgt.n	8004834 <_printf_float+0x3ec>
 800484e:	464b      	mov	r3, r9
 8004850:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004854:	e6e4      	b.n	8004620 <_printf_float+0x1d8>
 8004856:	2700      	movs	r7, #0
 8004858:	f104 081a 	add.w	r8, r4, #26
 800485c:	e7f3      	b.n	8004846 <_printf_float+0x3fe>
 800485e:	2301      	movs	r3, #1
 8004860:	e7e1      	b.n	8004826 <_printf_float+0x3de>
 8004862:	2301      	movs	r3, #1
 8004864:	4642      	mov	r2, r8
 8004866:	4659      	mov	r1, fp
 8004868:	4628      	mov	r0, r5
 800486a:	47b0      	blx	r6
 800486c:	3001      	adds	r0, #1
 800486e:	f43f ae42 	beq.w	80044f6 <_printf_float+0xae>
 8004872:	3701      	adds	r7, #1
 8004874:	68e3      	ldr	r3, [r4, #12]
 8004876:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	42bb      	cmp	r3, r7
 800487c:	dcf1      	bgt.n	8004862 <_printf_float+0x41a>
 800487e:	e702      	b.n	8004686 <_printf_float+0x23e>
 8004880:	2700      	movs	r7, #0
 8004882:	f104 0819 	add.w	r8, r4, #25
 8004886:	e7f5      	b.n	8004874 <_printf_float+0x42c>
 8004888:	2b00      	cmp	r3, #0
 800488a:	f43f ae94 	beq.w	80045b6 <_printf_float+0x16e>
 800488e:	f04f 0c00 	mov.w	ip, #0
 8004892:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004896:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800489a:	6022      	str	r2, [r4, #0]
 800489c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80048a0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	463a      	mov	r2, r7
 80048a8:	464b      	mov	r3, r9
 80048aa:	4628      	mov	r0, r5
 80048ac:	f7ff fd3a 	bl	8004324 <__cvt>
 80048b0:	4607      	mov	r7, r0
 80048b2:	e64f      	b.n	8004554 <_printf_float+0x10c>

080048b4 <_printf_common>:
 80048b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b8:	4691      	mov	r9, r2
 80048ba:	461f      	mov	r7, r3
 80048bc:	688a      	ldr	r2, [r1, #8]
 80048be:	690b      	ldr	r3, [r1, #16]
 80048c0:	4606      	mov	r6, r0
 80048c2:	4293      	cmp	r3, r2
 80048c4:	bfb8      	it	lt
 80048c6:	4613      	movlt	r3, r2
 80048c8:	f8c9 3000 	str.w	r3, [r9]
 80048cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048d0:	460c      	mov	r4, r1
 80048d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048d6:	b112      	cbz	r2, 80048de <_printf_common+0x2a>
 80048d8:	3301      	adds	r3, #1
 80048da:	f8c9 3000 	str.w	r3, [r9]
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	0699      	lsls	r1, r3, #26
 80048e2:	bf42      	ittt	mi
 80048e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048e8:	3302      	addmi	r3, #2
 80048ea:	f8c9 3000 	strmi.w	r3, [r9]
 80048ee:	6825      	ldr	r5, [r4, #0]
 80048f0:	f015 0506 	ands.w	r5, r5, #6
 80048f4:	d107      	bne.n	8004906 <_printf_common+0x52>
 80048f6:	f104 0a19 	add.w	sl, r4, #25
 80048fa:	68e3      	ldr	r3, [r4, #12]
 80048fc:	f8d9 2000 	ldr.w	r2, [r9]
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	42ab      	cmp	r3, r5
 8004904:	dc29      	bgt.n	800495a <_printf_common+0xa6>
 8004906:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800490a:	6822      	ldr	r2, [r4, #0]
 800490c:	3300      	adds	r3, #0
 800490e:	bf18      	it	ne
 8004910:	2301      	movne	r3, #1
 8004912:	0692      	lsls	r2, r2, #26
 8004914:	d42e      	bmi.n	8004974 <_printf_common+0xc0>
 8004916:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800491a:	4639      	mov	r1, r7
 800491c:	4630      	mov	r0, r6
 800491e:	47c0      	blx	r8
 8004920:	3001      	adds	r0, #1
 8004922:	d021      	beq.n	8004968 <_printf_common+0xb4>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	68e5      	ldr	r5, [r4, #12]
 8004928:	f003 0306 	and.w	r3, r3, #6
 800492c:	2b04      	cmp	r3, #4
 800492e:	bf18      	it	ne
 8004930:	2500      	movne	r5, #0
 8004932:	f8d9 2000 	ldr.w	r2, [r9]
 8004936:	f04f 0900 	mov.w	r9, #0
 800493a:	bf08      	it	eq
 800493c:	1aad      	subeq	r5, r5, r2
 800493e:	68a3      	ldr	r3, [r4, #8]
 8004940:	6922      	ldr	r2, [r4, #16]
 8004942:	bf08      	it	eq
 8004944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004948:	4293      	cmp	r3, r2
 800494a:	bfc4      	itt	gt
 800494c:	1a9b      	subgt	r3, r3, r2
 800494e:	18ed      	addgt	r5, r5, r3
 8004950:	341a      	adds	r4, #26
 8004952:	454d      	cmp	r5, r9
 8004954:	d11a      	bne.n	800498c <_printf_common+0xd8>
 8004956:	2000      	movs	r0, #0
 8004958:	e008      	b.n	800496c <_printf_common+0xb8>
 800495a:	2301      	movs	r3, #1
 800495c:	4652      	mov	r2, sl
 800495e:	4639      	mov	r1, r7
 8004960:	4630      	mov	r0, r6
 8004962:	47c0      	blx	r8
 8004964:	3001      	adds	r0, #1
 8004966:	d103      	bne.n	8004970 <_printf_common+0xbc>
 8004968:	f04f 30ff 	mov.w	r0, #4294967295
 800496c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004970:	3501      	adds	r5, #1
 8004972:	e7c2      	b.n	80048fa <_printf_common+0x46>
 8004974:	2030      	movs	r0, #48	; 0x30
 8004976:	18e1      	adds	r1, r4, r3
 8004978:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004982:	4422      	add	r2, r4
 8004984:	3302      	adds	r3, #2
 8004986:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800498a:	e7c4      	b.n	8004916 <_printf_common+0x62>
 800498c:	2301      	movs	r3, #1
 800498e:	4622      	mov	r2, r4
 8004990:	4639      	mov	r1, r7
 8004992:	4630      	mov	r0, r6
 8004994:	47c0      	blx	r8
 8004996:	3001      	adds	r0, #1
 8004998:	d0e6      	beq.n	8004968 <_printf_common+0xb4>
 800499a:	f109 0901 	add.w	r9, r9, #1
 800499e:	e7d8      	b.n	8004952 <_printf_common+0x9e>

080049a0 <quorem>:
 80049a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a4:	6903      	ldr	r3, [r0, #16]
 80049a6:	690c      	ldr	r4, [r1, #16]
 80049a8:	4680      	mov	r8, r0
 80049aa:	42a3      	cmp	r3, r4
 80049ac:	f2c0 8084 	blt.w	8004ab8 <quorem+0x118>
 80049b0:	3c01      	subs	r4, #1
 80049b2:	f101 0714 	add.w	r7, r1, #20
 80049b6:	f100 0614 	add.w	r6, r0, #20
 80049ba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80049be:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80049c2:	3501      	adds	r5, #1
 80049c4:	fbb0 f5f5 	udiv	r5, r0, r5
 80049c8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80049cc:	eb06 030c 	add.w	r3, r6, ip
 80049d0:	eb07 090c 	add.w	r9, r7, ip
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	b39d      	cbz	r5, 8004a40 <quorem+0xa0>
 80049d8:	f04f 0a00 	mov.w	sl, #0
 80049dc:	4638      	mov	r0, r7
 80049de:	46b6      	mov	lr, r6
 80049e0:	46d3      	mov	fp, sl
 80049e2:	f850 2b04 	ldr.w	r2, [r0], #4
 80049e6:	b293      	uxth	r3, r2
 80049e8:	fb05 a303 	mla	r3, r5, r3, sl
 80049ec:	0c12      	lsrs	r2, r2, #16
 80049ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049f2:	fb05 a202 	mla	r2, r5, r2, sl
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	ebab 0303 	sub.w	r3, fp, r3
 80049fc:	f8de b000 	ldr.w	fp, [lr]
 8004a00:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004a04:	fa1f fb8b 	uxth.w	fp, fp
 8004a08:	445b      	add	r3, fp
 8004a0a:	fa1f fb82 	uxth.w	fp, r2
 8004a0e:	f8de 2000 	ldr.w	r2, [lr]
 8004a12:	4581      	cmp	r9, r0
 8004a14:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004a18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a22:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004a26:	f84e 3b04 	str.w	r3, [lr], #4
 8004a2a:	d2da      	bcs.n	80049e2 <quorem+0x42>
 8004a2c:	f856 300c 	ldr.w	r3, [r6, ip]
 8004a30:	b933      	cbnz	r3, 8004a40 <quorem+0xa0>
 8004a32:	9b01      	ldr	r3, [sp, #4]
 8004a34:	3b04      	subs	r3, #4
 8004a36:	429e      	cmp	r6, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	d331      	bcc.n	8004aa0 <quorem+0x100>
 8004a3c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a40:	4640      	mov	r0, r8
 8004a42:	f001 f827 	bl	8005a94 <__mcmp>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	db26      	blt.n	8004a98 <quorem+0xf8>
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f04f 0c00 	mov.w	ip, #0
 8004a50:	3501      	adds	r5, #1
 8004a52:	f857 1b04 	ldr.w	r1, [r7], #4
 8004a56:	f8d0 e000 	ldr.w	lr, [r0]
 8004a5a:	b28b      	uxth	r3, r1
 8004a5c:	ebac 0303 	sub.w	r3, ip, r3
 8004a60:	fa1f f28e 	uxth.w	r2, lr
 8004a64:	4413      	add	r3, r2
 8004a66:	0c0a      	lsrs	r2, r1, #16
 8004a68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a76:	45b9      	cmp	r9, r7
 8004a78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a7c:	f840 3b04 	str.w	r3, [r0], #4
 8004a80:	d2e7      	bcs.n	8004a52 <quorem+0xb2>
 8004a82:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004a86:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004a8a:	b92a      	cbnz	r2, 8004a98 <quorem+0xf8>
 8004a8c:	3b04      	subs	r3, #4
 8004a8e:	429e      	cmp	r6, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	d30b      	bcc.n	8004aac <quorem+0x10c>
 8004a94:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a98:	4628      	mov	r0, r5
 8004a9a:	b003      	add	sp, #12
 8004a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	3b04      	subs	r3, #4
 8004aa4:	2a00      	cmp	r2, #0
 8004aa6:	d1c9      	bne.n	8004a3c <quorem+0x9c>
 8004aa8:	3c01      	subs	r4, #1
 8004aaa:	e7c4      	b.n	8004a36 <quorem+0x96>
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	3b04      	subs	r3, #4
 8004ab0:	2a00      	cmp	r2, #0
 8004ab2:	d1ef      	bne.n	8004a94 <quorem+0xf4>
 8004ab4:	3c01      	subs	r4, #1
 8004ab6:	e7ea      	b.n	8004a8e <quorem+0xee>
 8004ab8:	2000      	movs	r0, #0
 8004aba:	e7ee      	b.n	8004a9a <quorem+0xfa>
 8004abc:	0000      	movs	r0, r0
	...

08004ac0 <_dtoa_r>:
 8004ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac4:	4616      	mov	r6, r2
 8004ac6:	461f      	mov	r7, r3
 8004ac8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004aca:	b095      	sub	sp, #84	; 0x54
 8004acc:	4604      	mov	r4, r0
 8004ace:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004ad2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004ad6:	b93d      	cbnz	r5, 8004ae8 <_dtoa_r+0x28>
 8004ad8:	2010      	movs	r0, #16
 8004ada:	f000 fdb3 	bl	8005644 <malloc>
 8004ade:	6260      	str	r0, [r4, #36]	; 0x24
 8004ae0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004ae4:	6005      	str	r5, [r0, #0]
 8004ae6:	60c5      	str	r5, [r0, #12]
 8004ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aea:	6819      	ldr	r1, [r3, #0]
 8004aec:	b151      	cbz	r1, 8004b04 <_dtoa_r+0x44>
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	2301      	movs	r3, #1
 8004af2:	4093      	lsls	r3, r2
 8004af4:	604a      	str	r2, [r1, #4]
 8004af6:	608b      	str	r3, [r1, #8]
 8004af8:	4620      	mov	r0, r4
 8004afa:	f000 fdea 	bl	80056d2 <_Bfree>
 8004afe:	2200      	movs	r2, #0
 8004b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	1e3b      	subs	r3, r7, #0
 8004b06:	bfaf      	iteee	ge
 8004b08:	2300      	movge	r3, #0
 8004b0a:	2201      	movlt	r2, #1
 8004b0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b10:	9303      	strlt	r3, [sp, #12]
 8004b12:	bfac      	ite	ge
 8004b14:	f8c8 3000 	strge.w	r3, [r8]
 8004b18:	f8c8 2000 	strlt.w	r2, [r8]
 8004b1c:	4bae      	ldr	r3, [pc, #696]	; (8004dd8 <_dtoa_r+0x318>)
 8004b1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004b22:	ea33 0308 	bics.w	r3, r3, r8
 8004b26:	d11b      	bne.n	8004b60 <_dtoa_r+0xa0>
 8004b28:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	9b02      	ldr	r3, [sp, #8]
 8004b32:	b923      	cbnz	r3, 8004b3e <_dtoa_r+0x7e>
 8004b34:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	f000 8545 	beq.w	80055c8 <_dtoa_r+0xb08>
 8004b3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b40:	b953      	cbnz	r3, 8004b58 <_dtoa_r+0x98>
 8004b42:	4ba6      	ldr	r3, [pc, #664]	; (8004ddc <_dtoa_r+0x31c>)
 8004b44:	e021      	b.n	8004b8a <_dtoa_r+0xca>
 8004b46:	4ba6      	ldr	r3, [pc, #664]	; (8004de0 <_dtoa_r+0x320>)
 8004b48:	9306      	str	r3, [sp, #24]
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	9806      	ldr	r0, [sp, #24]
 8004b52:	b015      	add	sp, #84	; 0x54
 8004b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b58:	4ba0      	ldr	r3, [pc, #640]	; (8004ddc <_dtoa_r+0x31c>)
 8004b5a:	9306      	str	r3, [sp, #24]
 8004b5c:	3303      	adds	r3, #3
 8004b5e:	e7f5      	b.n	8004b4c <_dtoa_r+0x8c>
 8004b60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004b64:	2200      	movs	r2, #0
 8004b66:	2300      	movs	r3, #0
 8004b68:	4630      	mov	r0, r6
 8004b6a:	4639      	mov	r1, r7
 8004b6c:	f7fb ff1c 	bl	80009a8 <__aeabi_dcmpeq>
 8004b70:	4682      	mov	sl, r0
 8004b72:	b160      	cbz	r0, 8004b8e <_dtoa_r+0xce>
 8004b74:	2301      	movs	r3, #1
 8004b76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8520 	beq.w	80055c2 <_dtoa_r+0xb02>
 8004b82:	4b98      	ldr	r3, [pc, #608]	; (8004de4 <_dtoa_r+0x324>)
 8004b84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	9306      	str	r3, [sp, #24]
 8004b8c:	e7e0      	b.n	8004b50 <_dtoa_r+0x90>
 8004b8e:	ab12      	add	r3, sp, #72	; 0x48
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	ab13      	add	r3, sp, #76	; 0x4c
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	4632      	mov	r2, r6
 8004b98:	463b      	mov	r3, r7
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f000 fff2 	bl	8005b84 <__d2b>
 8004ba0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004ba4:	4683      	mov	fp, r0
 8004ba6:	2d00      	cmp	r5, #0
 8004ba8:	d07d      	beq.n	8004ca6 <_dtoa_r+0x1e6>
 8004baa:	46b0      	mov	r8, r6
 8004bac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004bb0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004bb4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004bb8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004bbc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4b89      	ldr	r3, [pc, #548]	; (8004de8 <_dtoa_r+0x328>)
 8004bc4:	4640      	mov	r0, r8
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	f7fb face 	bl	8000168 <__aeabi_dsub>
 8004bcc:	a37c      	add	r3, pc, #496	; (adr r3, 8004dc0 <_dtoa_r+0x300>)
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	f7fb fc81 	bl	80004d8 <__aeabi_dmul>
 8004bd6:	a37c      	add	r3, pc, #496	; (adr r3, 8004dc8 <_dtoa_r+0x308>)
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f7fb fac6 	bl	800016c <__adddf3>
 8004be0:	4606      	mov	r6, r0
 8004be2:	4628      	mov	r0, r5
 8004be4:	460f      	mov	r7, r1
 8004be6:	f7fb fc0d 	bl	8000404 <__aeabi_i2d>
 8004bea:	a379      	add	r3, pc, #484	; (adr r3, 8004dd0 <_dtoa_r+0x310>)
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	f7fb fc72 	bl	80004d8 <__aeabi_dmul>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	4639      	mov	r1, r7
 8004bfc:	f7fb fab6 	bl	800016c <__adddf3>
 8004c00:	4606      	mov	r6, r0
 8004c02:	460f      	mov	r7, r1
 8004c04:	f7fb ff18 	bl	8000a38 <__aeabi_d2iz>
 8004c08:	2200      	movs	r2, #0
 8004c0a:	4682      	mov	sl, r0
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4630      	mov	r0, r6
 8004c10:	4639      	mov	r1, r7
 8004c12:	f7fb fed3 	bl	80009bc <__aeabi_dcmplt>
 8004c16:	b148      	cbz	r0, 8004c2c <_dtoa_r+0x16c>
 8004c18:	4650      	mov	r0, sl
 8004c1a:	f7fb fbf3 	bl	8000404 <__aeabi_i2d>
 8004c1e:	4632      	mov	r2, r6
 8004c20:	463b      	mov	r3, r7
 8004c22:	f7fb fec1 	bl	80009a8 <__aeabi_dcmpeq>
 8004c26:	b908      	cbnz	r0, 8004c2c <_dtoa_r+0x16c>
 8004c28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c2c:	f1ba 0f16 	cmp.w	sl, #22
 8004c30:	d85a      	bhi.n	8004ce8 <_dtoa_r+0x228>
 8004c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c36:	496d      	ldr	r1, [pc, #436]	; (8004dec <_dtoa_r+0x32c>)
 8004c38:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c40:	f7fb feda 	bl	80009f8 <__aeabi_dcmpgt>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d051      	beq.n	8004cec <_dtoa_r+0x22c>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c4e:	930d      	str	r3, [sp, #52]	; 0x34
 8004c50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c52:	1b5d      	subs	r5, r3, r5
 8004c54:	1e6b      	subs	r3, r5, #1
 8004c56:	9307      	str	r3, [sp, #28]
 8004c58:	bf43      	ittte	mi
 8004c5a:	2300      	movmi	r3, #0
 8004c5c:	f1c5 0901 	rsbmi	r9, r5, #1
 8004c60:	9307      	strmi	r3, [sp, #28]
 8004c62:	f04f 0900 	movpl.w	r9, #0
 8004c66:	f1ba 0f00 	cmp.w	sl, #0
 8004c6a:	db41      	blt.n	8004cf0 <_dtoa_r+0x230>
 8004c6c:	9b07      	ldr	r3, [sp, #28]
 8004c6e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004c72:	4453      	add	r3, sl
 8004c74:	9307      	str	r3, [sp, #28]
 8004c76:	2300      	movs	r3, #0
 8004c78:	9308      	str	r3, [sp, #32]
 8004c7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004c7c:	2b09      	cmp	r3, #9
 8004c7e:	f200 808f 	bhi.w	8004da0 <_dtoa_r+0x2e0>
 8004c82:	2b05      	cmp	r3, #5
 8004c84:	bfc4      	itt	gt
 8004c86:	3b04      	subgt	r3, #4
 8004c88:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004c8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004c8c:	bfc8      	it	gt
 8004c8e:	2500      	movgt	r5, #0
 8004c90:	f1a3 0302 	sub.w	r3, r3, #2
 8004c94:	bfd8      	it	le
 8004c96:	2501      	movle	r5, #1
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	f200 808d 	bhi.w	8004db8 <_dtoa_r+0x2f8>
 8004c9e:	e8df f003 	tbb	[pc, r3]
 8004ca2:	7d7b      	.short	0x7d7b
 8004ca4:	6f2f      	.short	0x6f2f
 8004ca6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004caa:	441d      	add	r5, r3
 8004cac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004cb0:	2820      	cmp	r0, #32
 8004cb2:	dd13      	ble.n	8004cdc <_dtoa_r+0x21c>
 8004cb4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004cb8:	9b02      	ldr	r3, [sp, #8]
 8004cba:	fa08 f800 	lsl.w	r8, r8, r0
 8004cbe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004cc2:	fa23 f000 	lsr.w	r0, r3, r0
 8004cc6:	ea48 0000 	orr.w	r0, r8, r0
 8004cca:	f7fb fb8b 	bl	80003e4 <__aeabi_ui2d>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	4680      	mov	r8, r0
 8004cd2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004cd6:	3d01      	subs	r5, #1
 8004cd8:	9310      	str	r3, [sp, #64]	; 0x40
 8004cda:	e771      	b.n	8004bc0 <_dtoa_r+0x100>
 8004cdc:	9b02      	ldr	r3, [sp, #8]
 8004cde:	f1c0 0020 	rsb	r0, r0, #32
 8004ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8004ce6:	e7f0      	b.n	8004cca <_dtoa_r+0x20a>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e7b0      	b.n	8004c4e <_dtoa_r+0x18e>
 8004cec:	900d      	str	r0, [sp, #52]	; 0x34
 8004cee:	e7af      	b.n	8004c50 <_dtoa_r+0x190>
 8004cf0:	f1ca 0300 	rsb	r3, sl, #0
 8004cf4:	9308      	str	r3, [sp, #32]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	eba9 090a 	sub.w	r9, r9, sl
 8004cfc:	930c      	str	r3, [sp, #48]	; 0x30
 8004cfe:	e7bc      	b.n	8004c7a <_dtoa_r+0x1ba>
 8004d00:	2301      	movs	r3, #1
 8004d02:	9309      	str	r3, [sp, #36]	; 0x24
 8004d04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	dd74      	ble.n	8004df4 <_dtoa_r+0x334>
 8004d0a:	4698      	mov	r8, r3
 8004d0c:	9304      	str	r3, [sp, #16]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d12:	6072      	str	r2, [r6, #4]
 8004d14:	2204      	movs	r2, #4
 8004d16:	f102 0014 	add.w	r0, r2, #20
 8004d1a:	4298      	cmp	r0, r3
 8004d1c:	6871      	ldr	r1, [r6, #4]
 8004d1e:	d96e      	bls.n	8004dfe <_dtoa_r+0x33e>
 8004d20:	4620      	mov	r0, r4
 8004d22:	f000 fca2 	bl	800566a <_Balloc>
 8004d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d28:	6030      	str	r0, [r6, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f1b8 0f0e 	cmp.w	r8, #14
 8004d30:	9306      	str	r3, [sp, #24]
 8004d32:	f200 80ed 	bhi.w	8004f10 <_dtoa_r+0x450>
 8004d36:	2d00      	cmp	r5, #0
 8004d38:	f000 80ea 	beq.w	8004f10 <_dtoa_r+0x450>
 8004d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d40:	f1ba 0f00 	cmp.w	sl, #0
 8004d44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004d48:	dd77      	ble.n	8004e3a <_dtoa_r+0x37a>
 8004d4a:	4a28      	ldr	r2, [pc, #160]	; (8004dec <_dtoa_r+0x32c>)
 8004d4c:	f00a 030f 	and.w	r3, sl, #15
 8004d50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004d54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d58:	06f0      	lsls	r0, r6, #27
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004d62:	d568      	bpl.n	8004e36 <_dtoa_r+0x376>
 8004d64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004d68:	4b21      	ldr	r3, [pc, #132]	; (8004df0 <_dtoa_r+0x330>)
 8004d6a:	2503      	movs	r5, #3
 8004d6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d70:	f7fb fcdc 	bl	800072c <__aeabi_ddiv>
 8004d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d78:	f006 060f 	and.w	r6, r6, #15
 8004d7c:	4f1c      	ldr	r7, [pc, #112]	; (8004df0 <_dtoa_r+0x330>)
 8004d7e:	e04f      	b.n	8004e20 <_dtoa_r+0x360>
 8004d80:	2301      	movs	r3, #1
 8004d82:	9309      	str	r3, [sp, #36]	; 0x24
 8004d84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d86:	4453      	add	r3, sl
 8004d88:	f103 0801 	add.w	r8, r3, #1
 8004d8c:	9304      	str	r3, [sp, #16]
 8004d8e:	4643      	mov	r3, r8
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	bfb8      	it	lt
 8004d94:	2301      	movlt	r3, #1
 8004d96:	e7ba      	b.n	8004d0e <_dtoa_r+0x24e>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e7b2      	b.n	8004d02 <_dtoa_r+0x242>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e7f0      	b.n	8004d82 <_dtoa_r+0x2c2>
 8004da0:	2501      	movs	r5, #1
 8004da2:	2300      	movs	r3, #0
 8004da4:	9509      	str	r5, [sp, #36]	; 0x24
 8004da6:	931e      	str	r3, [sp, #120]	; 0x78
 8004da8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dac:	2200      	movs	r2, #0
 8004dae:	9304      	str	r3, [sp, #16]
 8004db0:	4698      	mov	r8, r3
 8004db2:	2312      	movs	r3, #18
 8004db4:	921f      	str	r2, [sp, #124]	; 0x7c
 8004db6:	e7aa      	b.n	8004d0e <_dtoa_r+0x24e>
 8004db8:	2301      	movs	r3, #1
 8004dba:	9309      	str	r3, [sp, #36]	; 0x24
 8004dbc:	e7f4      	b.n	8004da8 <_dtoa_r+0x2e8>
 8004dbe:	bf00      	nop
 8004dc0:	636f4361 	.word	0x636f4361
 8004dc4:	3fd287a7 	.word	0x3fd287a7
 8004dc8:	8b60c8b3 	.word	0x8b60c8b3
 8004dcc:	3fc68a28 	.word	0x3fc68a28
 8004dd0:	509f79fb 	.word	0x509f79fb
 8004dd4:	3fd34413 	.word	0x3fd34413
 8004dd8:	7ff00000 	.word	0x7ff00000
 8004ddc:	08005db7 	.word	0x08005db7
 8004de0:	08005dae 	.word	0x08005dae
 8004de4:	08005dad 	.word	0x08005dad
 8004de8:	3ff80000 	.word	0x3ff80000
 8004dec:	08005de8 	.word	0x08005de8
 8004df0:	08005dc0 	.word	0x08005dc0
 8004df4:	2301      	movs	r3, #1
 8004df6:	9304      	str	r3, [sp, #16]
 8004df8:	4698      	mov	r8, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	e7da      	b.n	8004db4 <_dtoa_r+0x2f4>
 8004dfe:	3101      	adds	r1, #1
 8004e00:	6071      	str	r1, [r6, #4]
 8004e02:	0052      	lsls	r2, r2, #1
 8004e04:	e787      	b.n	8004d16 <_dtoa_r+0x256>
 8004e06:	07f1      	lsls	r1, r6, #31
 8004e08:	d508      	bpl.n	8004e1c <_dtoa_r+0x35c>
 8004e0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e12:	f7fb fb61 	bl	80004d8 <__aeabi_dmul>
 8004e16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e1a:	3501      	adds	r5, #1
 8004e1c:	1076      	asrs	r6, r6, #1
 8004e1e:	3708      	adds	r7, #8
 8004e20:	2e00      	cmp	r6, #0
 8004e22:	d1f0      	bne.n	8004e06 <_dtoa_r+0x346>
 8004e24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e2c:	f7fb fc7e 	bl	800072c <__aeabi_ddiv>
 8004e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e34:	e01b      	b.n	8004e6e <_dtoa_r+0x3ae>
 8004e36:	2502      	movs	r5, #2
 8004e38:	e7a0      	b.n	8004d7c <_dtoa_r+0x2bc>
 8004e3a:	f000 80a4 	beq.w	8004f86 <_dtoa_r+0x4c6>
 8004e3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004e42:	f1ca 0600 	rsb	r6, sl, #0
 8004e46:	4ba0      	ldr	r3, [pc, #640]	; (80050c8 <_dtoa_r+0x608>)
 8004e48:	f006 020f 	and.w	r2, r6, #15
 8004e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f7fb fb40 	bl	80004d8 <__aeabi_dmul>
 8004e58:	2502      	movs	r5, #2
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e60:	4f9a      	ldr	r7, [pc, #616]	; (80050cc <_dtoa_r+0x60c>)
 8004e62:	1136      	asrs	r6, r6, #4
 8004e64:	2e00      	cmp	r6, #0
 8004e66:	f040 8083 	bne.w	8004f70 <_dtoa_r+0x4b0>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e0      	bne.n	8004e30 <_dtoa_r+0x370>
 8004e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 808a 	beq.w	8004f8a <_dtoa_r+0x4ca>
 8004e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004e7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e82:	2200      	movs	r2, #0
 8004e84:	4b92      	ldr	r3, [pc, #584]	; (80050d0 <_dtoa_r+0x610>)
 8004e86:	f7fb fd99 	bl	80009bc <__aeabi_dcmplt>
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d07d      	beq.n	8004f8a <_dtoa_r+0x4ca>
 8004e8e:	f1b8 0f00 	cmp.w	r8, #0
 8004e92:	d07a      	beq.n	8004f8a <_dtoa_r+0x4ca>
 8004e94:	9b04      	ldr	r3, [sp, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	dd36      	ble.n	8004f08 <_dtoa_r+0x448>
 8004e9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	4b8c      	ldr	r3, [pc, #560]	; (80050d4 <_dtoa_r+0x614>)
 8004ea2:	f7fb fb19 	bl	80004d8 <__aeabi_dmul>
 8004ea6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eaa:	9e04      	ldr	r6, [sp, #16]
 8004eac:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004eb0:	3501      	adds	r5, #1
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f7fb faa6 	bl	8000404 <__aeabi_i2d>
 8004eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ebc:	f7fb fb0c 	bl	80004d8 <__aeabi_dmul>
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4b85      	ldr	r3, [pc, #532]	; (80050d8 <_dtoa_r+0x618>)
 8004ec4:	f7fb f952 	bl	800016c <__adddf3>
 8004ec8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004ecc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004ed0:	950b      	str	r5, [sp, #44]	; 0x2c
 8004ed2:	2e00      	cmp	r6, #0
 8004ed4:	d15c      	bne.n	8004f90 <_dtoa_r+0x4d0>
 8004ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eda:	2200      	movs	r2, #0
 8004edc:	4b7f      	ldr	r3, [pc, #508]	; (80050dc <_dtoa_r+0x61c>)
 8004ede:	f7fb f943 	bl	8000168 <__aeabi_dsub>
 8004ee2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ee4:	462b      	mov	r3, r5
 8004ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eea:	f7fb fd85 	bl	80009f8 <__aeabi_dcmpgt>
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	f040 8281 	bne.w	80053f6 <_dtoa_r+0x936>
 8004ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004efa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004efe:	f7fb fd5d 	bl	80009bc <__aeabi_dcmplt>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	f040 8275 	bne.w	80053f2 <_dtoa_r+0x932>
 8004f08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004f0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f2c0 814b 	blt.w	80051ae <_dtoa_r+0x6ee>
 8004f18:	f1ba 0f0e 	cmp.w	sl, #14
 8004f1c:	f300 8147 	bgt.w	80051ae <_dtoa_r+0x6ee>
 8004f20:	4b69      	ldr	r3, [pc, #420]	; (80050c8 <_dtoa_r+0x608>)
 8004f22:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f280 80d7 	bge.w	80050e4 <_dtoa_r+0x624>
 8004f36:	f1b8 0f00 	cmp.w	r8, #0
 8004f3a:	f300 80d3 	bgt.w	80050e4 <_dtoa_r+0x624>
 8004f3e:	f040 8257 	bne.w	80053f0 <_dtoa_r+0x930>
 8004f42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f46:	2200      	movs	r2, #0
 8004f48:	4b64      	ldr	r3, [pc, #400]	; (80050dc <_dtoa_r+0x61c>)
 8004f4a:	f7fb fac5 	bl	80004d8 <__aeabi_dmul>
 8004f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f52:	f7fb fd47 	bl	80009e4 <__aeabi_dcmpge>
 8004f56:	4646      	mov	r6, r8
 8004f58:	4647      	mov	r7, r8
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	f040 822d 	bne.w	80053ba <_dtoa_r+0x8fa>
 8004f60:	9b06      	ldr	r3, [sp, #24]
 8004f62:	9a06      	ldr	r2, [sp, #24]
 8004f64:	1c5d      	adds	r5, r3, #1
 8004f66:	2331      	movs	r3, #49	; 0x31
 8004f68:	f10a 0a01 	add.w	sl, sl, #1
 8004f6c:	7013      	strb	r3, [r2, #0]
 8004f6e:	e228      	b.n	80053c2 <_dtoa_r+0x902>
 8004f70:	07f2      	lsls	r2, r6, #31
 8004f72:	d505      	bpl.n	8004f80 <_dtoa_r+0x4c0>
 8004f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f78:	f7fb faae 	bl	80004d8 <__aeabi_dmul>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	3501      	adds	r5, #1
 8004f80:	1076      	asrs	r6, r6, #1
 8004f82:	3708      	adds	r7, #8
 8004f84:	e76e      	b.n	8004e64 <_dtoa_r+0x3a4>
 8004f86:	2502      	movs	r5, #2
 8004f88:	e771      	b.n	8004e6e <_dtoa_r+0x3ae>
 8004f8a:	4657      	mov	r7, sl
 8004f8c:	4646      	mov	r6, r8
 8004f8e:	e790      	b.n	8004eb2 <_dtoa_r+0x3f2>
 8004f90:	4b4d      	ldr	r3, [pc, #308]	; (80050c8 <_dtoa_r+0x608>)
 8004f92:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004f96:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d048      	beq.n	8005032 <_dtoa_r+0x572>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	494e      	ldr	r1, [pc, #312]	; (80050e0 <_dtoa_r+0x620>)
 8004fa8:	f7fb fbc0 	bl	800072c <__aeabi_ddiv>
 8004fac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004fb0:	f7fb f8da 	bl	8000168 <__aeabi_dsub>
 8004fb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004fb8:	9d06      	ldr	r5, [sp, #24]
 8004fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fbe:	f7fb fd3b 	bl	8000a38 <__aeabi_d2iz>
 8004fc2:	9011      	str	r0, [sp, #68]	; 0x44
 8004fc4:	f7fb fa1e 	bl	8000404 <__aeabi_i2d>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fd0:	f7fb f8ca 	bl	8000168 <__aeabi_dsub>
 8004fd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fda:	3330      	adds	r3, #48	; 0x30
 8004fdc:	f805 3b01 	strb.w	r3, [r5], #1
 8004fe0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004fe4:	f7fb fcea 	bl	80009bc <__aeabi_dcmplt>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	d163      	bne.n	80050b4 <_dtoa_r+0x5f4>
 8004fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	4937      	ldr	r1, [pc, #220]	; (80050d0 <_dtoa_r+0x610>)
 8004ff4:	f7fb f8b8 	bl	8000168 <__aeabi_dsub>
 8004ff8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ffc:	f7fb fcde 	bl	80009bc <__aeabi_dcmplt>
 8005000:	2800      	cmp	r0, #0
 8005002:	f040 80b5 	bne.w	8005170 <_dtoa_r+0x6b0>
 8005006:	9b06      	ldr	r3, [sp, #24]
 8005008:	1aeb      	subs	r3, r5, r3
 800500a:	429e      	cmp	r6, r3
 800500c:	f77f af7c 	ble.w	8004f08 <_dtoa_r+0x448>
 8005010:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005014:	2200      	movs	r2, #0
 8005016:	4b2f      	ldr	r3, [pc, #188]	; (80050d4 <_dtoa_r+0x614>)
 8005018:	f7fb fa5e 	bl	80004d8 <__aeabi_dmul>
 800501c:	2200      	movs	r2, #0
 800501e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005026:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <_dtoa_r+0x614>)
 8005028:	f7fb fa56 	bl	80004d8 <__aeabi_dmul>
 800502c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005030:	e7c3      	b.n	8004fba <_dtoa_r+0x4fa>
 8005032:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005036:	f7fb fa4f 	bl	80004d8 <__aeabi_dmul>
 800503a:	9b06      	ldr	r3, [sp, #24]
 800503c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005040:	199d      	adds	r5, r3, r6
 8005042:	461e      	mov	r6, r3
 8005044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005048:	f7fb fcf6 	bl	8000a38 <__aeabi_d2iz>
 800504c:	9011      	str	r0, [sp, #68]	; 0x44
 800504e:	f7fb f9d9 	bl	8000404 <__aeabi_i2d>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800505a:	f7fb f885 	bl	8000168 <__aeabi_dsub>
 800505e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005064:	3330      	adds	r3, #48	; 0x30
 8005066:	f806 3b01 	strb.w	r3, [r6], #1
 800506a:	42ae      	cmp	r6, r5
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	d124      	bne.n	80050bc <_dtoa_r+0x5fc>
 8005072:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005076:	4b1a      	ldr	r3, [pc, #104]	; (80050e0 <_dtoa_r+0x620>)
 8005078:	f7fb f878 	bl	800016c <__adddf3>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005084:	f7fb fcb8 	bl	80009f8 <__aeabi_dcmpgt>
 8005088:	2800      	cmp	r0, #0
 800508a:	d171      	bne.n	8005170 <_dtoa_r+0x6b0>
 800508c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005090:	2000      	movs	r0, #0
 8005092:	4913      	ldr	r1, [pc, #76]	; (80050e0 <_dtoa_r+0x620>)
 8005094:	f7fb f868 	bl	8000168 <__aeabi_dsub>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050a0:	f7fb fc8c 	bl	80009bc <__aeabi_dcmplt>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	f43f af2f 	beq.w	8004f08 <_dtoa_r+0x448>
 80050aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050ae:	1e6a      	subs	r2, r5, #1
 80050b0:	2b30      	cmp	r3, #48	; 0x30
 80050b2:	d001      	beq.n	80050b8 <_dtoa_r+0x5f8>
 80050b4:	46ba      	mov	sl, r7
 80050b6:	e04a      	b.n	800514e <_dtoa_r+0x68e>
 80050b8:	4615      	mov	r5, r2
 80050ba:	e7f6      	b.n	80050aa <_dtoa_r+0x5ea>
 80050bc:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <_dtoa_r+0x614>)
 80050be:	f7fb fa0b 	bl	80004d8 <__aeabi_dmul>
 80050c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050c6:	e7bd      	b.n	8005044 <_dtoa_r+0x584>
 80050c8:	08005de8 	.word	0x08005de8
 80050cc:	08005dc0 	.word	0x08005dc0
 80050d0:	3ff00000 	.word	0x3ff00000
 80050d4:	40240000 	.word	0x40240000
 80050d8:	401c0000 	.word	0x401c0000
 80050dc:	40140000 	.word	0x40140000
 80050e0:	3fe00000 	.word	0x3fe00000
 80050e4:	9d06      	ldr	r5, [sp, #24]
 80050e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80050ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ee:	4630      	mov	r0, r6
 80050f0:	4639      	mov	r1, r7
 80050f2:	f7fb fb1b 	bl	800072c <__aeabi_ddiv>
 80050f6:	f7fb fc9f 	bl	8000a38 <__aeabi_d2iz>
 80050fa:	4681      	mov	r9, r0
 80050fc:	f7fb f982 	bl	8000404 <__aeabi_i2d>
 8005100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005104:	f7fb f9e8 	bl	80004d8 <__aeabi_dmul>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4630      	mov	r0, r6
 800510e:	4639      	mov	r1, r7
 8005110:	f7fb f82a 	bl	8000168 <__aeabi_dsub>
 8005114:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005118:	f805 6b01 	strb.w	r6, [r5], #1
 800511c:	9e06      	ldr	r6, [sp, #24]
 800511e:	4602      	mov	r2, r0
 8005120:	1bae      	subs	r6, r5, r6
 8005122:	45b0      	cmp	r8, r6
 8005124:	460b      	mov	r3, r1
 8005126:	d135      	bne.n	8005194 <_dtoa_r+0x6d4>
 8005128:	f7fb f820 	bl	800016c <__adddf3>
 800512c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005130:	4606      	mov	r6, r0
 8005132:	460f      	mov	r7, r1
 8005134:	f7fb fc60 	bl	80009f8 <__aeabi_dcmpgt>
 8005138:	b9c8      	cbnz	r0, 800516e <_dtoa_r+0x6ae>
 800513a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800513e:	4630      	mov	r0, r6
 8005140:	4639      	mov	r1, r7
 8005142:	f7fb fc31 	bl	80009a8 <__aeabi_dcmpeq>
 8005146:	b110      	cbz	r0, 800514e <_dtoa_r+0x68e>
 8005148:	f019 0f01 	tst.w	r9, #1
 800514c:	d10f      	bne.n	800516e <_dtoa_r+0x6ae>
 800514e:	4659      	mov	r1, fp
 8005150:	4620      	mov	r0, r4
 8005152:	f000 fabe 	bl	80056d2 <_Bfree>
 8005156:	2300      	movs	r3, #0
 8005158:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800515a:	702b      	strb	r3, [r5, #0]
 800515c:	f10a 0301 	add.w	r3, sl, #1
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005164:	2b00      	cmp	r3, #0
 8005166:	f43f acf3 	beq.w	8004b50 <_dtoa_r+0x90>
 800516a:	601d      	str	r5, [r3, #0]
 800516c:	e4f0      	b.n	8004b50 <_dtoa_r+0x90>
 800516e:	4657      	mov	r7, sl
 8005170:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005174:	1e6b      	subs	r3, r5, #1
 8005176:	2a39      	cmp	r2, #57	; 0x39
 8005178:	d106      	bne.n	8005188 <_dtoa_r+0x6c8>
 800517a:	9a06      	ldr	r2, [sp, #24]
 800517c:	429a      	cmp	r2, r3
 800517e:	d107      	bne.n	8005190 <_dtoa_r+0x6d0>
 8005180:	2330      	movs	r3, #48	; 0x30
 8005182:	7013      	strb	r3, [r2, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	3701      	adds	r7, #1
 8005188:	781a      	ldrb	r2, [r3, #0]
 800518a:	3201      	adds	r2, #1
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	e791      	b.n	80050b4 <_dtoa_r+0x5f4>
 8005190:	461d      	mov	r5, r3
 8005192:	e7ed      	b.n	8005170 <_dtoa_r+0x6b0>
 8005194:	2200      	movs	r2, #0
 8005196:	4b99      	ldr	r3, [pc, #612]	; (80053fc <_dtoa_r+0x93c>)
 8005198:	f7fb f99e 	bl	80004d8 <__aeabi_dmul>
 800519c:	2200      	movs	r2, #0
 800519e:	2300      	movs	r3, #0
 80051a0:	4606      	mov	r6, r0
 80051a2:	460f      	mov	r7, r1
 80051a4:	f7fb fc00 	bl	80009a8 <__aeabi_dcmpeq>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d09e      	beq.n	80050ea <_dtoa_r+0x62a>
 80051ac:	e7cf      	b.n	800514e <_dtoa_r+0x68e>
 80051ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	f000 8088 	beq.w	80052c6 <_dtoa_r+0x806>
 80051b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80051b8:	2a01      	cmp	r2, #1
 80051ba:	dc6d      	bgt.n	8005298 <_dtoa_r+0x7d8>
 80051bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051be:	2a00      	cmp	r2, #0
 80051c0:	d066      	beq.n	8005290 <_dtoa_r+0x7d0>
 80051c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051c6:	464d      	mov	r5, r9
 80051c8:	9e08      	ldr	r6, [sp, #32]
 80051ca:	9a07      	ldr	r2, [sp, #28]
 80051cc:	2101      	movs	r1, #1
 80051ce:	441a      	add	r2, r3
 80051d0:	4620      	mov	r0, r4
 80051d2:	4499      	add	r9, r3
 80051d4:	9207      	str	r2, [sp, #28]
 80051d6:	f000 fb1c 	bl	8005812 <__i2b>
 80051da:	4607      	mov	r7, r0
 80051dc:	2d00      	cmp	r5, #0
 80051de:	dd0b      	ble.n	80051f8 <_dtoa_r+0x738>
 80051e0:	9b07      	ldr	r3, [sp, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	dd08      	ble.n	80051f8 <_dtoa_r+0x738>
 80051e6:	42ab      	cmp	r3, r5
 80051e8:	bfa8      	it	ge
 80051ea:	462b      	movge	r3, r5
 80051ec:	9a07      	ldr	r2, [sp, #28]
 80051ee:	eba9 0903 	sub.w	r9, r9, r3
 80051f2:	1aed      	subs	r5, r5, r3
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	9307      	str	r3, [sp, #28]
 80051f8:	9b08      	ldr	r3, [sp, #32]
 80051fa:	b1eb      	cbz	r3, 8005238 <_dtoa_r+0x778>
 80051fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d065      	beq.n	80052ce <_dtoa_r+0x80e>
 8005202:	b18e      	cbz	r6, 8005228 <_dtoa_r+0x768>
 8005204:	4639      	mov	r1, r7
 8005206:	4632      	mov	r2, r6
 8005208:	4620      	mov	r0, r4
 800520a:	f000 fba1 	bl	8005950 <__pow5mult>
 800520e:	465a      	mov	r2, fp
 8005210:	4601      	mov	r1, r0
 8005212:	4607      	mov	r7, r0
 8005214:	4620      	mov	r0, r4
 8005216:	f000 fb05 	bl	8005824 <__multiply>
 800521a:	4659      	mov	r1, fp
 800521c:	900a      	str	r0, [sp, #40]	; 0x28
 800521e:	4620      	mov	r0, r4
 8005220:	f000 fa57 	bl	80056d2 <_Bfree>
 8005224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005226:	469b      	mov	fp, r3
 8005228:	9b08      	ldr	r3, [sp, #32]
 800522a:	1b9a      	subs	r2, r3, r6
 800522c:	d004      	beq.n	8005238 <_dtoa_r+0x778>
 800522e:	4659      	mov	r1, fp
 8005230:	4620      	mov	r0, r4
 8005232:	f000 fb8d 	bl	8005950 <__pow5mult>
 8005236:	4683      	mov	fp, r0
 8005238:	2101      	movs	r1, #1
 800523a:	4620      	mov	r0, r4
 800523c:	f000 fae9 	bl	8005812 <__i2b>
 8005240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005242:	4606      	mov	r6, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 81c6 	beq.w	80055d6 <_dtoa_r+0xb16>
 800524a:	461a      	mov	r2, r3
 800524c:	4601      	mov	r1, r0
 800524e:	4620      	mov	r0, r4
 8005250:	f000 fb7e 	bl	8005950 <__pow5mult>
 8005254:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005256:	4606      	mov	r6, r0
 8005258:	2b01      	cmp	r3, #1
 800525a:	dc3e      	bgt.n	80052da <_dtoa_r+0x81a>
 800525c:	9b02      	ldr	r3, [sp, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d137      	bne.n	80052d2 <_dtoa_r+0x812>
 8005262:	9b03      	ldr	r3, [sp, #12]
 8005264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005268:	2b00      	cmp	r3, #0
 800526a:	d134      	bne.n	80052d6 <_dtoa_r+0x816>
 800526c:	9b03      	ldr	r3, [sp, #12]
 800526e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005272:	0d1b      	lsrs	r3, r3, #20
 8005274:	051b      	lsls	r3, r3, #20
 8005276:	b12b      	cbz	r3, 8005284 <_dtoa_r+0x7c4>
 8005278:	9b07      	ldr	r3, [sp, #28]
 800527a:	f109 0901 	add.w	r9, r9, #1
 800527e:	3301      	adds	r3, #1
 8005280:	9307      	str	r3, [sp, #28]
 8005282:	2301      	movs	r3, #1
 8005284:	9308      	str	r3, [sp, #32]
 8005286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005288:	2b00      	cmp	r3, #0
 800528a:	d128      	bne.n	80052de <_dtoa_r+0x81e>
 800528c:	2001      	movs	r0, #1
 800528e:	e02e      	b.n	80052ee <_dtoa_r+0x82e>
 8005290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005292:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005296:	e796      	b.n	80051c6 <_dtoa_r+0x706>
 8005298:	9b08      	ldr	r3, [sp, #32]
 800529a:	f108 36ff 	add.w	r6, r8, #4294967295
 800529e:	42b3      	cmp	r3, r6
 80052a0:	bfb7      	itett	lt
 80052a2:	9b08      	ldrlt	r3, [sp, #32]
 80052a4:	1b9e      	subge	r6, r3, r6
 80052a6:	1af2      	sublt	r2, r6, r3
 80052a8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80052aa:	bfbf      	itttt	lt
 80052ac:	9608      	strlt	r6, [sp, #32]
 80052ae:	189b      	addlt	r3, r3, r2
 80052b0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80052b2:	2600      	movlt	r6, #0
 80052b4:	f1b8 0f00 	cmp.w	r8, #0
 80052b8:	bfb9      	ittee	lt
 80052ba:	eba9 0508 	sublt.w	r5, r9, r8
 80052be:	2300      	movlt	r3, #0
 80052c0:	464d      	movge	r5, r9
 80052c2:	4643      	movge	r3, r8
 80052c4:	e781      	b.n	80051ca <_dtoa_r+0x70a>
 80052c6:	9e08      	ldr	r6, [sp, #32]
 80052c8:	464d      	mov	r5, r9
 80052ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80052cc:	e786      	b.n	80051dc <_dtoa_r+0x71c>
 80052ce:	9a08      	ldr	r2, [sp, #32]
 80052d0:	e7ad      	b.n	800522e <_dtoa_r+0x76e>
 80052d2:	2300      	movs	r3, #0
 80052d4:	e7d6      	b.n	8005284 <_dtoa_r+0x7c4>
 80052d6:	9b02      	ldr	r3, [sp, #8]
 80052d8:	e7d4      	b.n	8005284 <_dtoa_r+0x7c4>
 80052da:	2300      	movs	r3, #0
 80052dc:	9308      	str	r3, [sp, #32]
 80052de:	6933      	ldr	r3, [r6, #16]
 80052e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80052e4:	6918      	ldr	r0, [r3, #16]
 80052e6:	f000 fa46 	bl	8005776 <__hi0bits>
 80052ea:	f1c0 0020 	rsb	r0, r0, #32
 80052ee:	9b07      	ldr	r3, [sp, #28]
 80052f0:	4418      	add	r0, r3
 80052f2:	f010 001f 	ands.w	r0, r0, #31
 80052f6:	d047      	beq.n	8005388 <_dtoa_r+0x8c8>
 80052f8:	f1c0 0320 	rsb	r3, r0, #32
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	dd3b      	ble.n	8005378 <_dtoa_r+0x8b8>
 8005300:	9b07      	ldr	r3, [sp, #28]
 8005302:	f1c0 001c 	rsb	r0, r0, #28
 8005306:	4481      	add	r9, r0
 8005308:	4405      	add	r5, r0
 800530a:	4403      	add	r3, r0
 800530c:	9307      	str	r3, [sp, #28]
 800530e:	f1b9 0f00 	cmp.w	r9, #0
 8005312:	dd05      	ble.n	8005320 <_dtoa_r+0x860>
 8005314:	4659      	mov	r1, fp
 8005316:	464a      	mov	r2, r9
 8005318:	4620      	mov	r0, r4
 800531a:	f000 fb67 	bl	80059ec <__lshift>
 800531e:	4683      	mov	fp, r0
 8005320:	9b07      	ldr	r3, [sp, #28]
 8005322:	2b00      	cmp	r3, #0
 8005324:	dd05      	ble.n	8005332 <_dtoa_r+0x872>
 8005326:	4631      	mov	r1, r6
 8005328:	461a      	mov	r2, r3
 800532a:	4620      	mov	r0, r4
 800532c:	f000 fb5e 	bl	80059ec <__lshift>
 8005330:	4606      	mov	r6, r0
 8005332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005334:	b353      	cbz	r3, 800538c <_dtoa_r+0x8cc>
 8005336:	4631      	mov	r1, r6
 8005338:	4658      	mov	r0, fp
 800533a:	f000 fbab 	bl	8005a94 <__mcmp>
 800533e:	2800      	cmp	r0, #0
 8005340:	da24      	bge.n	800538c <_dtoa_r+0x8cc>
 8005342:	2300      	movs	r3, #0
 8005344:	4659      	mov	r1, fp
 8005346:	220a      	movs	r2, #10
 8005348:	4620      	mov	r0, r4
 800534a:	f000 f9d9 	bl	8005700 <__multadd>
 800534e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005350:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005354:	4683      	mov	fp, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 8144 	beq.w	80055e4 <_dtoa_r+0xb24>
 800535c:	2300      	movs	r3, #0
 800535e:	4639      	mov	r1, r7
 8005360:	220a      	movs	r2, #10
 8005362:	4620      	mov	r0, r4
 8005364:	f000 f9cc 	bl	8005700 <__multadd>
 8005368:	9b04      	ldr	r3, [sp, #16]
 800536a:	4607      	mov	r7, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	dc4d      	bgt.n	800540c <_dtoa_r+0x94c>
 8005370:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005372:	2b02      	cmp	r3, #2
 8005374:	dd4a      	ble.n	800540c <_dtoa_r+0x94c>
 8005376:	e011      	b.n	800539c <_dtoa_r+0x8dc>
 8005378:	d0c9      	beq.n	800530e <_dtoa_r+0x84e>
 800537a:	9a07      	ldr	r2, [sp, #28]
 800537c:	331c      	adds	r3, #28
 800537e:	441a      	add	r2, r3
 8005380:	4499      	add	r9, r3
 8005382:	441d      	add	r5, r3
 8005384:	4613      	mov	r3, r2
 8005386:	e7c1      	b.n	800530c <_dtoa_r+0x84c>
 8005388:	4603      	mov	r3, r0
 800538a:	e7f6      	b.n	800537a <_dtoa_r+0x8ba>
 800538c:	f1b8 0f00 	cmp.w	r8, #0
 8005390:	dc36      	bgt.n	8005400 <_dtoa_r+0x940>
 8005392:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005394:	2b02      	cmp	r3, #2
 8005396:	dd33      	ble.n	8005400 <_dtoa_r+0x940>
 8005398:	f8cd 8010 	str.w	r8, [sp, #16]
 800539c:	9b04      	ldr	r3, [sp, #16]
 800539e:	b963      	cbnz	r3, 80053ba <_dtoa_r+0x8fa>
 80053a0:	4631      	mov	r1, r6
 80053a2:	2205      	movs	r2, #5
 80053a4:	4620      	mov	r0, r4
 80053a6:	f000 f9ab 	bl	8005700 <__multadd>
 80053aa:	4601      	mov	r1, r0
 80053ac:	4606      	mov	r6, r0
 80053ae:	4658      	mov	r0, fp
 80053b0:	f000 fb70 	bl	8005a94 <__mcmp>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	f73f add3 	bgt.w	8004f60 <_dtoa_r+0x4a0>
 80053ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80053bc:	9d06      	ldr	r5, [sp, #24]
 80053be:	ea6f 0a03 	mvn.w	sl, r3
 80053c2:	f04f 0900 	mov.w	r9, #0
 80053c6:	4631      	mov	r1, r6
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 f982 	bl	80056d2 <_Bfree>
 80053ce:	2f00      	cmp	r7, #0
 80053d0:	f43f aebd 	beq.w	800514e <_dtoa_r+0x68e>
 80053d4:	f1b9 0f00 	cmp.w	r9, #0
 80053d8:	d005      	beq.n	80053e6 <_dtoa_r+0x926>
 80053da:	45b9      	cmp	r9, r7
 80053dc:	d003      	beq.n	80053e6 <_dtoa_r+0x926>
 80053de:	4649      	mov	r1, r9
 80053e0:	4620      	mov	r0, r4
 80053e2:	f000 f976 	bl	80056d2 <_Bfree>
 80053e6:	4639      	mov	r1, r7
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 f972 	bl	80056d2 <_Bfree>
 80053ee:	e6ae      	b.n	800514e <_dtoa_r+0x68e>
 80053f0:	2600      	movs	r6, #0
 80053f2:	4637      	mov	r7, r6
 80053f4:	e7e1      	b.n	80053ba <_dtoa_r+0x8fa>
 80053f6:	46ba      	mov	sl, r7
 80053f8:	4637      	mov	r7, r6
 80053fa:	e5b1      	b.n	8004f60 <_dtoa_r+0x4a0>
 80053fc:	40240000 	.word	0x40240000
 8005400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005402:	f8cd 8010 	str.w	r8, [sp, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 80f3 	beq.w	80055f2 <_dtoa_r+0xb32>
 800540c:	2d00      	cmp	r5, #0
 800540e:	dd05      	ble.n	800541c <_dtoa_r+0x95c>
 8005410:	4639      	mov	r1, r7
 8005412:	462a      	mov	r2, r5
 8005414:	4620      	mov	r0, r4
 8005416:	f000 fae9 	bl	80059ec <__lshift>
 800541a:	4607      	mov	r7, r0
 800541c:	9b08      	ldr	r3, [sp, #32]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d04c      	beq.n	80054bc <_dtoa_r+0x9fc>
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	4620      	mov	r0, r4
 8005426:	f000 f920 	bl	800566a <_Balloc>
 800542a:	4605      	mov	r5, r0
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	f107 010c 	add.w	r1, r7, #12
 8005432:	3202      	adds	r2, #2
 8005434:	0092      	lsls	r2, r2, #2
 8005436:	300c      	adds	r0, #12
 8005438:	f000 f90c 	bl	8005654 <memcpy>
 800543c:	2201      	movs	r2, #1
 800543e:	4629      	mov	r1, r5
 8005440:	4620      	mov	r0, r4
 8005442:	f000 fad3 	bl	80059ec <__lshift>
 8005446:	46b9      	mov	r9, r7
 8005448:	4607      	mov	r7, r0
 800544a:	9b06      	ldr	r3, [sp, #24]
 800544c:	9307      	str	r3, [sp, #28]
 800544e:	9b02      	ldr	r3, [sp, #8]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	9308      	str	r3, [sp, #32]
 8005456:	4631      	mov	r1, r6
 8005458:	4658      	mov	r0, fp
 800545a:	f7ff faa1 	bl	80049a0 <quorem>
 800545e:	4649      	mov	r1, r9
 8005460:	4605      	mov	r5, r0
 8005462:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005466:	4658      	mov	r0, fp
 8005468:	f000 fb14 	bl	8005a94 <__mcmp>
 800546c:	463a      	mov	r2, r7
 800546e:	9002      	str	r0, [sp, #8]
 8005470:	4631      	mov	r1, r6
 8005472:	4620      	mov	r0, r4
 8005474:	f000 fb28 	bl	8005ac8 <__mdiff>
 8005478:	68c3      	ldr	r3, [r0, #12]
 800547a:	4602      	mov	r2, r0
 800547c:	bb03      	cbnz	r3, 80054c0 <_dtoa_r+0xa00>
 800547e:	4601      	mov	r1, r0
 8005480:	9009      	str	r0, [sp, #36]	; 0x24
 8005482:	4658      	mov	r0, fp
 8005484:	f000 fb06 	bl	8005a94 <__mcmp>
 8005488:	4603      	mov	r3, r0
 800548a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800548c:	4611      	mov	r1, r2
 800548e:	4620      	mov	r0, r4
 8005490:	9309      	str	r3, [sp, #36]	; 0x24
 8005492:	f000 f91e 	bl	80056d2 <_Bfree>
 8005496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005498:	b9a3      	cbnz	r3, 80054c4 <_dtoa_r+0xa04>
 800549a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800549c:	b992      	cbnz	r2, 80054c4 <_dtoa_r+0xa04>
 800549e:	9a08      	ldr	r2, [sp, #32]
 80054a0:	b982      	cbnz	r2, 80054c4 <_dtoa_r+0xa04>
 80054a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80054a6:	d029      	beq.n	80054fc <_dtoa_r+0xa3c>
 80054a8:	9b02      	ldr	r3, [sp, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	dd01      	ble.n	80054b2 <_dtoa_r+0x9f2>
 80054ae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80054b2:	9b07      	ldr	r3, [sp, #28]
 80054b4:	1c5d      	adds	r5, r3, #1
 80054b6:	f883 8000 	strb.w	r8, [r3]
 80054ba:	e784      	b.n	80053c6 <_dtoa_r+0x906>
 80054bc:	4638      	mov	r0, r7
 80054be:	e7c2      	b.n	8005446 <_dtoa_r+0x986>
 80054c0:	2301      	movs	r3, #1
 80054c2:	e7e3      	b.n	800548c <_dtoa_r+0x9cc>
 80054c4:	9a02      	ldr	r2, [sp, #8]
 80054c6:	2a00      	cmp	r2, #0
 80054c8:	db04      	blt.n	80054d4 <_dtoa_r+0xa14>
 80054ca:	d123      	bne.n	8005514 <_dtoa_r+0xa54>
 80054cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80054ce:	bb0a      	cbnz	r2, 8005514 <_dtoa_r+0xa54>
 80054d0:	9a08      	ldr	r2, [sp, #32]
 80054d2:	b9fa      	cbnz	r2, 8005514 <_dtoa_r+0xa54>
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	ddec      	ble.n	80054b2 <_dtoa_r+0x9f2>
 80054d8:	4659      	mov	r1, fp
 80054da:	2201      	movs	r2, #1
 80054dc:	4620      	mov	r0, r4
 80054de:	f000 fa85 	bl	80059ec <__lshift>
 80054e2:	4631      	mov	r1, r6
 80054e4:	4683      	mov	fp, r0
 80054e6:	f000 fad5 	bl	8005a94 <__mcmp>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	dc03      	bgt.n	80054f6 <_dtoa_r+0xa36>
 80054ee:	d1e0      	bne.n	80054b2 <_dtoa_r+0x9f2>
 80054f0:	f018 0f01 	tst.w	r8, #1
 80054f4:	d0dd      	beq.n	80054b2 <_dtoa_r+0x9f2>
 80054f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80054fa:	d1d8      	bne.n	80054ae <_dtoa_r+0x9ee>
 80054fc:	9b07      	ldr	r3, [sp, #28]
 80054fe:	9a07      	ldr	r2, [sp, #28]
 8005500:	1c5d      	adds	r5, r3, #1
 8005502:	2339      	movs	r3, #57	; 0x39
 8005504:	7013      	strb	r3, [r2, #0]
 8005506:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800550a:	1e6a      	subs	r2, r5, #1
 800550c:	2b39      	cmp	r3, #57	; 0x39
 800550e:	d04d      	beq.n	80055ac <_dtoa_r+0xaec>
 8005510:	3301      	adds	r3, #1
 8005512:	e052      	b.n	80055ba <_dtoa_r+0xafa>
 8005514:	9a07      	ldr	r2, [sp, #28]
 8005516:	2b00      	cmp	r3, #0
 8005518:	f102 0501 	add.w	r5, r2, #1
 800551c:	dd06      	ble.n	800552c <_dtoa_r+0xa6c>
 800551e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005522:	d0eb      	beq.n	80054fc <_dtoa_r+0xa3c>
 8005524:	f108 0801 	add.w	r8, r8, #1
 8005528:	9b07      	ldr	r3, [sp, #28]
 800552a:	e7c4      	b.n	80054b6 <_dtoa_r+0x9f6>
 800552c:	9b06      	ldr	r3, [sp, #24]
 800552e:	9a04      	ldr	r2, [sp, #16]
 8005530:	1aeb      	subs	r3, r5, r3
 8005532:	4293      	cmp	r3, r2
 8005534:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005538:	d021      	beq.n	800557e <_dtoa_r+0xabe>
 800553a:	4659      	mov	r1, fp
 800553c:	2300      	movs	r3, #0
 800553e:	220a      	movs	r2, #10
 8005540:	4620      	mov	r0, r4
 8005542:	f000 f8dd 	bl	8005700 <__multadd>
 8005546:	45b9      	cmp	r9, r7
 8005548:	4683      	mov	fp, r0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	f04f 020a 	mov.w	r2, #10
 8005552:	4649      	mov	r1, r9
 8005554:	4620      	mov	r0, r4
 8005556:	d105      	bne.n	8005564 <_dtoa_r+0xaa4>
 8005558:	f000 f8d2 	bl	8005700 <__multadd>
 800555c:	4681      	mov	r9, r0
 800555e:	4607      	mov	r7, r0
 8005560:	9507      	str	r5, [sp, #28]
 8005562:	e778      	b.n	8005456 <_dtoa_r+0x996>
 8005564:	f000 f8cc 	bl	8005700 <__multadd>
 8005568:	4639      	mov	r1, r7
 800556a:	4681      	mov	r9, r0
 800556c:	2300      	movs	r3, #0
 800556e:	220a      	movs	r2, #10
 8005570:	4620      	mov	r0, r4
 8005572:	f000 f8c5 	bl	8005700 <__multadd>
 8005576:	4607      	mov	r7, r0
 8005578:	e7f2      	b.n	8005560 <_dtoa_r+0xaa0>
 800557a:	f04f 0900 	mov.w	r9, #0
 800557e:	4659      	mov	r1, fp
 8005580:	2201      	movs	r2, #1
 8005582:	4620      	mov	r0, r4
 8005584:	f000 fa32 	bl	80059ec <__lshift>
 8005588:	4631      	mov	r1, r6
 800558a:	4683      	mov	fp, r0
 800558c:	f000 fa82 	bl	8005a94 <__mcmp>
 8005590:	2800      	cmp	r0, #0
 8005592:	dcb8      	bgt.n	8005506 <_dtoa_r+0xa46>
 8005594:	d102      	bne.n	800559c <_dtoa_r+0xadc>
 8005596:	f018 0f01 	tst.w	r8, #1
 800559a:	d1b4      	bne.n	8005506 <_dtoa_r+0xa46>
 800559c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055a0:	1e6a      	subs	r2, r5, #1
 80055a2:	2b30      	cmp	r3, #48	; 0x30
 80055a4:	f47f af0f 	bne.w	80053c6 <_dtoa_r+0x906>
 80055a8:	4615      	mov	r5, r2
 80055aa:	e7f7      	b.n	800559c <_dtoa_r+0xadc>
 80055ac:	9b06      	ldr	r3, [sp, #24]
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d105      	bne.n	80055be <_dtoa_r+0xafe>
 80055b2:	2331      	movs	r3, #49	; 0x31
 80055b4:	9a06      	ldr	r2, [sp, #24]
 80055b6:	f10a 0a01 	add.w	sl, sl, #1
 80055ba:	7013      	strb	r3, [r2, #0]
 80055bc:	e703      	b.n	80053c6 <_dtoa_r+0x906>
 80055be:	4615      	mov	r5, r2
 80055c0:	e7a1      	b.n	8005506 <_dtoa_r+0xa46>
 80055c2:	4b17      	ldr	r3, [pc, #92]	; (8005620 <_dtoa_r+0xb60>)
 80055c4:	f7ff bae1 	b.w	8004b8a <_dtoa_r+0xca>
 80055c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f47f aabb 	bne.w	8004b46 <_dtoa_r+0x86>
 80055d0:	4b14      	ldr	r3, [pc, #80]	; (8005624 <_dtoa_r+0xb64>)
 80055d2:	f7ff bada 	b.w	8004b8a <_dtoa_r+0xca>
 80055d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80055d8:	2b01      	cmp	r3, #1
 80055da:	f77f ae3f 	ble.w	800525c <_dtoa_r+0x79c>
 80055de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055e0:	9308      	str	r3, [sp, #32]
 80055e2:	e653      	b.n	800528c <_dtoa_r+0x7cc>
 80055e4:	9b04      	ldr	r3, [sp, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	dc03      	bgt.n	80055f2 <_dtoa_r+0xb32>
 80055ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	f73f aed5 	bgt.w	800539c <_dtoa_r+0x8dc>
 80055f2:	9d06      	ldr	r5, [sp, #24]
 80055f4:	4631      	mov	r1, r6
 80055f6:	4658      	mov	r0, fp
 80055f8:	f7ff f9d2 	bl	80049a0 <quorem>
 80055fc:	9b06      	ldr	r3, [sp, #24]
 80055fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005602:	f805 8b01 	strb.w	r8, [r5], #1
 8005606:	9a04      	ldr	r2, [sp, #16]
 8005608:	1aeb      	subs	r3, r5, r3
 800560a:	429a      	cmp	r2, r3
 800560c:	ddb5      	ble.n	800557a <_dtoa_r+0xaba>
 800560e:	4659      	mov	r1, fp
 8005610:	2300      	movs	r3, #0
 8005612:	220a      	movs	r2, #10
 8005614:	4620      	mov	r0, r4
 8005616:	f000 f873 	bl	8005700 <__multadd>
 800561a:	4683      	mov	fp, r0
 800561c:	e7ea      	b.n	80055f4 <_dtoa_r+0xb34>
 800561e:	bf00      	nop
 8005620:	08005dac 	.word	0x08005dac
 8005624:	08005dae 	.word	0x08005dae

08005628 <_localeconv_r>:
 8005628:	4b04      	ldr	r3, [pc, #16]	; (800563c <_localeconv_r+0x14>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6a18      	ldr	r0, [r3, #32]
 800562e:	4b04      	ldr	r3, [pc, #16]	; (8005640 <_localeconv_r+0x18>)
 8005630:	2800      	cmp	r0, #0
 8005632:	bf08      	it	eq
 8005634:	4618      	moveq	r0, r3
 8005636:	30f0      	adds	r0, #240	; 0xf0
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000050 	.word	0x20000050
 8005640:	200000b4 	.word	0x200000b4

08005644 <malloc>:
 8005644:	4b02      	ldr	r3, [pc, #8]	; (8005650 <malloc+0xc>)
 8005646:	4601      	mov	r1, r0
 8005648:	6818      	ldr	r0, [r3, #0]
 800564a:	f000 baf9 	b.w	8005c40 <_malloc_r>
 800564e:	bf00      	nop
 8005650:	20000050 	.word	0x20000050

08005654 <memcpy>:
 8005654:	b510      	push	{r4, lr}
 8005656:	1e43      	subs	r3, r0, #1
 8005658:	440a      	add	r2, r1
 800565a:	4291      	cmp	r1, r2
 800565c:	d100      	bne.n	8005660 <memcpy+0xc>
 800565e:	bd10      	pop	{r4, pc}
 8005660:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005668:	e7f7      	b.n	800565a <memcpy+0x6>

0800566a <_Balloc>:
 800566a:	b570      	push	{r4, r5, r6, lr}
 800566c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800566e:	4604      	mov	r4, r0
 8005670:	460e      	mov	r6, r1
 8005672:	b93d      	cbnz	r5, 8005684 <_Balloc+0x1a>
 8005674:	2010      	movs	r0, #16
 8005676:	f7ff ffe5 	bl	8005644 <malloc>
 800567a:	6260      	str	r0, [r4, #36]	; 0x24
 800567c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005680:	6005      	str	r5, [r0, #0]
 8005682:	60c5      	str	r5, [r0, #12]
 8005684:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005686:	68eb      	ldr	r3, [r5, #12]
 8005688:	b183      	cbz	r3, 80056ac <_Balloc+0x42>
 800568a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005692:	b9b8      	cbnz	r0, 80056c4 <_Balloc+0x5a>
 8005694:	2101      	movs	r1, #1
 8005696:	fa01 f506 	lsl.w	r5, r1, r6
 800569a:	1d6a      	adds	r2, r5, #5
 800569c:	0092      	lsls	r2, r2, #2
 800569e:	4620      	mov	r0, r4
 80056a0:	f000 fabf 	bl	8005c22 <_calloc_r>
 80056a4:	b160      	cbz	r0, 80056c0 <_Balloc+0x56>
 80056a6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80056aa:	e00e      	b.n	80056ca <_Balloc+0x60>
 80056ac:	2221      	movs	r2, #33	; 0x21
 80056ae:	2104      	movs	r1, #4
 80056b0:	4620      	mov	r0, r4
 80056b2:	f000 fab6 	bl	8005c22 <_calloc_r>
 80056b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056b8:	60e8      	str	r0, [r5, #12]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e4      	bne.n	800568a <_Balloc+0x20>
 80056c0:	2000      	movs	r0, #0
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	6802      	ldr	r2, [r0, #0]
 80056c6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80056ca:	2300      	movs	r3, #0
 80056cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80056d0:	e7f7      	b.n	80056c2 <_Balloc+0x58>

080056d2 <_Bfree>:
 80056d2:	b570      	push	{r4, r5, r6, lr}
 80056d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80056d6:	4606      	mov	r6, r0
 80056d8:	460d      	mov	r5, r1
 80056da:	b93c      	cbnz	r4, 80056ec <_Bfree+0x1a>
 80056dc:	2010      	movs	r0, #16
 80056de:	f7ff ffb1 	bl	8005644 <malloc>
 80056e2:	6270      	str	r0, [r6, #36]	; 0x24
 80056e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056e8:	6004      	str	r4, [r0, #0]
 80056ea:	60c4      	str	r4, [r0, #12]
 80056ec:	b13d      	cbz	r5, 80056fe <_Bfree+0x2c>
 80056ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80056f0:	686a      	ldr	r2, [r5, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056f8:	6029      	str	r1, [r5, #0]
 80056fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80056fe:	bd70      	pop	{r4, r5, r6, pc}

08005700 <__multadd>:
 8005700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005704:	461f      	mov	r7, r3
 8005706:	4606      	mov	r6, r0
 8005708:	460c      	mov	r4, r1
 800570a:	2300      	movs	r3, #0
 800570c:	690d      	ldr	r5, [r1, #16]
 800570e:	f101 0c14 	add.w	ip, r1, #20
 8005712:	f8dc 0000 	ldr.w	r0, [ip]
 8005716:	3301      	adds	r3, #1
 8005718:	b281      	uxth	r1, r0
 800571a:	fb02 7101 	mla	r1, r2, r1, r7
 800571e:	0c00      	lsrs	r0, r0, #16
 8005720:	0c0f      	lsrs	r7, r1, #16
 8005722:	fb02 7000 	mla	r0, r2, r0, r7
 8005726:	b289      	uxth	r1, r1
 8005728:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800572c:	429d      	cmp	r5, r3
 800572e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005732:	f84c 1b04 	str.w	r1, [ip], #4
 8005736:	dcec      	bgt.n	8005712 <__multadd+0x12>
 8005738:	b1d7      	cbz	r7, 8005770 <__multadd+0x70>
 800573a:	68a3      	ldr	r3, [r4, #8]
 800573c:	42ab      	cmp	r3, r5
 800573e:	dc12      	bgt.n	8005766 <__multadd+0x66>
 8005740:	6861      	ldr	r1, [r4, #4]
 8005742:	4630      	mov	r0, r6
 8005744:	3101      	adds	r1, #1
 8005746:	f7ff ff90 	bl	800566a <_Balloc>
 800574a:	4680      	mov	r8, r0
 800574c:	6922      	ldr	r2, [r4, #16]
 800574e:	f104 010c 	add.w	r1, r4, #12
 8005752:	3202      	adds	r2, #2
 8005754:	0092      	lsls	r2, r2, #2
 8005756:	300c      	adds	r0, #12
 8005758:	f7ff ff7c 	bl	8005654 <memcpy>
 800575c:	4621      	mov	r1, r4
 800575e:	4630      	mov	r0, r6
 8005760:	f7ff ffb7 	bl	80056d2 <_Bfree>
 8005764:	4644      	mov	r4, r8
 8005766:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800576a:	3501      	adds	r5, #1
 800576c:	615f      	str	r7, [r3, #20]
 800576e:	6125      	str	r5, [r4, #16]
 8005770:	4620      	mov	r0, r4
 8005772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005776 <__hi0bits>:
 8005776:	0c02      	lsrs	r2, r0, #16
 8005778:	0412      	lsls	r2, r2, #16
 800577a:	4603      	mov	r3, r0
 800577c:	b9b2      	cbnz	r2, 80057ac <__hi0bits+0x36>
 800577e:	0403      	lsls	r3, r0, #16
 8005780:	2010      	movs	r0, #16
 8005782:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005786:	bf04      	itt	eq
 8005788:	021b      	lsleq	r3, r3, #8
 800578a:	3008      	addeq	r0, #8
 800578c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005790:	bf04      	itt	eq
 8005792:	011b      	lsleq	r3, r3, #4
 8005794:	3004      	addeq	r0, #4
 8005796:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800579a:	bf04      	itt	eq
 800579c:	009b      	lsleq	r3, r3, #2
 800579e:	3002      	addeq	r0, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	db06      	blt.n	80057b2 <__hi0bits+0x3c>
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	d503      	bpl.n	80057b0 <__hi0bits+0x3a>
 80057a8:	3001      	adds	r0, #1
 80057aa:	4770      	bx	lr
 80057ac:	2000      	movs	r0, #0
 80057ae:	e7e8      	b.n	8005782 <__hi0bits+0xc>
 80057b0:	2020      	movs	r0, #32
 80057b2:	4770      	bx	lr

080057b4 <__lo0bits>:
 80057b4:	6803      	ldr	r3, [r0, #0]
 80057b6:	4601      	mov	r1, r0
 80057b8:	f013 0207 	ands.w	r2, r3, #7
 80057bc:	d00b      	beq.n	80057d6 <__lo0bits+0x22>
 80057be:	07da      	lsls	r2, r3, #31
 80057c0:	d423      	bmi.n	800580a <__lo0bits+0x56>
 80057c2:	0798      	lsls	r0, r3, #30
 80057c4:	bf49      	itett	mi
 80057c6:	085b      	lsrmi	r3, r3, #1
 80057c8:	089b      	lsrpl	r3, r3, #2
 80057ca:	2001      	movmi	r0, #1
 80057cc:	600b      	strmi	r3, [r1, #0]
 80057ce:	bf5c      	itt	pl
 80057d0:	600b      	strpl	r3, [r1, #0]
 80057d2:	2002      	movpl	r0, #2
 80057d4:	4770      	bx	lr
 80057d6:	b298      	uxth	r0, r3
 80057d8:	b9a8      	cbnz	r0, 8005806 <__lo0bits+0x52>
 80057da:	2010      	movs	r0, #16
 80057dc:	0c1b      	lsrs	r3, r3, #16
 80057de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80057e2:	bf04      	itt	eq
 80057e4:	0a1b      	lsreq	r3, r3, #8
 80057e6:	3008      	addeq	r0, #8
 80057e8:	071a      	lsls	r2, r3, #28
 80057ea:	bf04      	itt	eq
 80057ec:	091b      	lsreq	r3, r3, #4
 80057ee:	3004      	addeq	r0, #4
 80057f0:	079a      	lsls	r2, r3, #30
 80057f2:	bf04      	itt	eq
 80057f4:	089b      	lsreq	r3, r3, #2
 80057f6:	3002      	addeq	r0, #2
 80057f8:	07da      	lsls	r2, r3, #31
 80057fa:	d402      	bmi.n	8005802 <__lo0bits+0x4e>
 80057fc:	085b      	lsrs	r3, r3, #1
 80057fe:	d006      	beq.n	800580e <__lo0bits+0x5a>
 8005800:	3001      	adds	r0, #1
 8005802:	600b      	str	r3, [r1, #0]
 8005804:	4770      	bx	lr
 8005806:	4610      	mov	r0, r2
 8005808:	e7e9      	b.n	80057de <__lo0bits+0x2a>
 800580a:	2000      	movs	r0, #0
 800580c:	4770      	bx	lr
 800580e:	2020      	movs	r0, #32
 8005810:	4770      	bx	lr

08005812 <__i2b>:
 8005812:	b510      	push	{r4, lr}
 8005814:	460c      	mov	r4, r1
 8005816:	2101      	movs	r1, #1
 8005818:	f7ff ff27 	bl	800566a <_Balloc>
 800581c:	2201      	movs	r2, #1
 800581e:	6144      	str	r4, [r0, #20]
 8005820:	6102      	str	r2, [r0, #16]
 8005822:	bd10      	pop	{r4, pc}

08005824 <__multiply>:
 8005824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005828:	4614      	mov	r4, r2
 800582a:	690a      	ldr	r2, [r1, #16]
 800582c:	6923      	ldr	r3, [r4, #16]
 800582e:	4688      	mov	r8, r1
 8005830:	429a      	cmp	r2, r3
 8005832:	bfbe      	ittt	lt
 8005834:	460b      	movlt	r3, r1
 8005836:	46a0      	movlt	r8, r4
 8005838:	461c      	movlt	r4, r3
 800583a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800583e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005842:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005846:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800584a:	eb07 0609 	add.w	r6, r7, r9
 800584e:	42b3      	cmp	r3, r6
 8005850:	bfb8      	it	lt
 8005852:	3101      	addlt	r1, #1
 8005854:	f7ff ff09 	bl	800566a <_Balloc>
 8005858:	f100 0514 	add.w	r5, r0, #20
 800585c:	462b      	mov	r3, r5
 800585e:	2200      	movs	r2, #0
 8005860:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005864:	4573      	cmp	r3, lr
 8005866:	d316      	bcc.n	8005896 <__multiply+0x72>
 8005868:	f104 0214 	add.w	r2, r4, #20
 800586c:	f108 0114 	add.w	r1, r8, #20
 8005870:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005874:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	9b00      	ldr	r3, [sp, #0]
 800587c:	9201      	str	r2, [sp, #4]
 800587e:	4293      	cmp	r3, r2
 8005880:	d80c      	bhi.n	800589c <__multiply+0x78>
 8005882:	2e00      	cmp	r6, #0
 8005884:	dd03      	ble.n	800588e <__multiply+0x6a>
 8005886:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800588a:	2b00      	cmp	r3, #0
 800588c:	d05d      	beq.n	800594a <__multiply+0x126>
 800588e:	6106      	str	r6, [r0, #16]
 8005890:	b003      	add	sp, #12
 8005892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005896:	f843 2b04 	str.w	r2, [r3], #4
 800589a:	e7e3      	b.n	8005864 <__multiply+0x40>
 800589c:	f8b2 b000 	ldrh.w	fp, [r2]
 80058a0:	f1bb 0f00 	cmp.w	fp, #0
 80058a4:	d023      	beq.n	80058ee <__multiply+0xca>
 80058a6:	4689      	mov	r9, r1
 80058a8:	46ac      	mov	ip, r5
 80058aa:	f04f 0800 	mov.w	r8, #0
 80058ae:	f859 4b04 	ldr.w	r4, [r9], #4
 80058b2:	f8dc a000 	ldr.w	sl, [ip]
 80058b6:	b2a3      	uxth	r3, r4
 80058b8:	fa1f fa8a 	uxth.w	sl, sl
 80058bc:	fb0b a303 	mla	r3, fp, r3, sl
 80058c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80058c4:	f8dc 4000 	ldr.w	r4, [ip]
 80058c8:	4443      	add	r3, r8
 80058ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80058ce:	fb0b 840a 	mla	r4, fp, sl, r8
 80058d2:	46e2      	mov	sl, ip
 80058d4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80058d8:	b29b      	uxth	r3, r3
 80058da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80058de:	454f      	cmp	r7, r9
 80058e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80058e4:	f84a 3b04 	str.w	r3, [sl], #4
 80058e8:	d82b      	bhi.n	8005942 <__multiply+0x11e>
 80058ea:	f8cc 8004 	str.w	r8, [ip, #4]
 80058ee:	9b01      	ldr	r3, [sp, #4]
 80058f0:	3204      	adds	r2, #4
 80058f2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80058f6:	f1ba 0f00 	cmp.w	sl, #0
 80058fa:	d020      	beq.n	800593e <__multiply+0x11a>
 80058fc:	4689      	mov	r9, r1
 80058fe:	46a8      	mov	r8, r5
 8005900:	f04f 0b00 	mov.w	fp, #0
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	f8b9 c000 	ldrh.w	ip, [r9]
 800590a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800590e:	b29b      	uxth	r3, r3
 8005910:	fb0a 440c 	mla	r4, sl, ip, r4
 8005914:	46c4      	mov	ip, r8
 8005916:	445c      	add	r4, fp
 8005918:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800591c:	f84c 3b04 	str.w	r3, [ip], #4
 8005920:	f859 3b04 	ldr.w	r3, [r9], #4
 8005924:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005928:	0c1b      	lsrs	r3, r3, #16
 800592a:	fb0a b303 	mla	r3, sl, r3, fp
 800592e:	454f      	cmp	r7, r9
 8005930:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005934:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005938:	d805      	bhi.n	8005946 <__multiply+0x122>
 800593a:	f8c8 3004 	str.w	r3, [r8, #4]
 800593e:	3504      	adds	r5, #4
 8005940:	e79b      	b.n	800587a <__multiply+0x56>
 8005942:	46d4      	mov	ip, sl
 8005944:	e7b3      	b.n	80058ae <__multiply+0x8a>
 8005946:	46e0      	mov	r8, ip
 8005948:	e7dd      	b.n	8005906 <__multiply+0xe2>
 800594a:	3e01      	subs	r6, #1
 800594c:	e799      	b.n	8005882 <__multiply+0x5e>
	...

08005950 <__pow5mult>:
 8005950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005954:	4615      	mov	r5, r2
 8005956:	f012 0203 	ands.w	r2, r2, #3
 800595a:	4606      	mov	r6, r0
 800595c:	460f      	mov	r7, r1
 800595e:	d007      	beq.n	8005970 <__pow5mult+0x20>
 8005960:	4c21      	ldr	r4, [pc, #132]	; (80059e8 <__pow5mult+0x98>)
 8005962:	3a01      	subs	r2, #1
 8005964:	2300      	movs	r3, #0
 8005966:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800596a:	f7ff fec9 	bl	8005700 <__multadd>
 800596e:	4607      	mov	r7, r0
 8005970:	10ad      	asrs	r5, r5, #2
 8005972:	d035      	beq.n	80059e0 <__pow5mult+0x90>
 8005974:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005976:	b93c      	cbnz	r4, 8005988 <__pow5mult+0x38>
 8005978:	2010      	movs	r0, #16
 800597a:	f7ff fe63 	bl	8005644 <malloc>
 800597e:	6270      	str	r0, [r6, #36]	; 0x24
 8005980:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005984:	6004      	str	r4, [r0, #0]
 8005986:	60c4      	str	r4, [r0, #12]
 8005988:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800598c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005990:	b94c      	cbnz	r4, 80059a6 <__pow5mult+0x56>
 8005992:	f240 2171 	movw	r1, #625	; 0x271
 8005996:	4630      	mov	r0, r6
 8005998:	f7ff ff3b 	bl	8005812 <__i2b>
 800599c:	2300      	movs	r3, #0
 800599e:	4604      	mov	r4, r0
 80059a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80059a4:	6003      	str	r3, [r0, #0]
 80059a6:	f04f 0800 	mov.w	r8, #0
 80059aa:	07eb      	lsls	r3, r5, #31
 80059ac:	d50a      	bpl.n	80059c4 <__pow5mult+0x74>
 80059ae:	4639      	mov	r1, r7
 80059b0:	4622      	mov	r2, r4
 80059b2:	4630      	mov	r0, r6
 80059b4:	f7ff ff36 	bl	8005824 <__multiply>
 80059b8:	4681      	mov	r9, r0
 80059ba:	4639      	mov	r1, r7
 80059bc:	4630      	mov	r0, r6
 80059be:	f7ff fe88 	bl	80056d2 <_Bfree>
 80059c2:	464f      	mov	r7, r9
 80059c4:	106d      	asrs	r5, r5, #1
 80059c6:	d00b      	beq.n	80059e0 <__pow5mult+0x90>
 80059c8:	6820      	ldr	r0, [r4, #0]
 80059ca:	b938      	cbnz	r0, 80059dc <__pow5mult+0x8c>
 80059cc:	4622      	mov	r2, r4
 80059ce:	4621      	mov	r1, r4
 80059d0:	4630      	mov	r0, r6
 80059d2:	f7ff ff27 	bl	8005824 <__multiply>
 80059d6:	6020      	str	r0, [r4, #0]
 80059d8:	f8c0 8000 	str.w	r8, [r0]
 80059dc:	4604      	mov	r4, r0
 80059de:	e7e4      	b.n	80059aa <__pow5mult+0x5a>
 80059e0:	4638      	mov	r0, r7
 80059e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059e6:	bf00      	nop
 80059e8:	08005eb0 	.word	0x08005eb0

080059ec <__lshift>:
 80059ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f0:	460c      	mov	r4, r1
 80059f2:	4607      	mov	r7, r0
 80059f4:	4616      	mov	r6, r2
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059fc:	eb0a 0903 	add.w	r9, sl, r3
 8005a00:	6849      	ldr	r1, [r1, #4]
 8005a02:	68a3      	ldr	r3, [r4, #8]
 8005a04:	f109 0501 	add.w	r5, r9, #1
 8005a08:	42ab      	cmp	r3, r5
 8005a0a:	db32      	blt.n	8005a72 <__lshift+0x86>
 8005a0c:	4638      	mov	r0, r7
 8005a0e:	f7ff fe2c 	bl	800566a <_Balloc>
 8005a12:	2300      	movs	r3, #0
 8005a14:	4680      	mov	r8, r0
 8005a16:	461a      	mov	r2, r3
 8005a18:	f100 0114 	add.w	r1, r0, #20
 8005a1c:	4553      	cmp	r3, sl
 8005a1e:	db2b      	blt.n	8005a78 <__lshift+0x8c>
 8005a20:	6920      	ldr	r0, [r4, #16]
 8005a22:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a26:	f104 0314 	add.w	r3, r4, #20
 8005a2a:	f016 021f 	ands.w	r2, r6, #31
 8005a2e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a32:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a36:	d025      	beq.n	8005a84 <__lshift+0x98>
 8005a38:	2000      	movs	r0, #0
 8005a3a:	f1c2 0e20 	rsb	lr, r2, #32
 8005a3e:	468a      	mov	sl, r1
 8005a40:	681e      	ldr	r6, [r3, #0]
 8005a42:	4096      	lsls	r6, r2
 8005a44:	4330      	orrs	r0, r6
 8005a46:	f84a 0b04 	str.w	r0, [sl], #4
 8005a4a:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a4e:	459c      	cmp	ip, r3
 8005a50:	fa20 f00e 	lsr.w	r0, r0, lr
 8005a54:	d814      	bhi.n	8005a80 <__lshift+0x94>
 8005a56:	6048      	str	r0, [r1, #4]
 8005a58:	b108      	cbz	r0, 8005a5e <__lshift+0x72>
 8005a5a:	f109 0502 	add.w	r5, r9, #2
 8005a5e:	3d01      	subs	r5, #1
 8005a60:	4638      	mov	r0, r7
 8005a62:	f8c8 5010 	str.w	r5, [r8, #16]
 8005a66:	4621      	mov	r1, r4
 8005a68:	f7ff fe33 	bl	80056d2 <_Bfree>
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a72:	3101      	adds	r1, #1
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	e7c7      	b.n	8005a08 <__lshift+0x1c>
 8005a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	e7cd      	b.n	8005a1c <__lshift+0x30>
 8005a80:	4651      	mov	r1, sl
 8005a82:	e7dc      	b.n	8005a3e <__lshift+0x52>
 8005a84:	3904      	subs	r1, #4
 8005a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a8a:	459c      	cmp	ip, r3
 8005a8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a90:	d8f9      	bhi.n	8005a86 <__lshift+0x9a>
 8005a92:	e7e4      	b.n	8005a5e <__lshift+0x72>

08005a94 <__mcmp>:
 8005a94:	6903      	ldr	r3, [r0, #16]
 8005a96:	690a      	ldr	r2, [r1, #16]
 8005a98:	b530      	push	{r4, r5, lr}
 8005a9a:	1a9b      	subs	r3, r3, r2
 8005a9c:	d10c      	bne.n	8005ab8 <__mcmp+0x24>
 8005a9e:	0092      	lsls	r2, r2, #2
 8005aa0:	3014      	adds	r0, #20
 8005aa2:	3114      	adds	r1, #20
 8005aa4:	1884      	adds	r4, r0, r2
 8005aa6:	4411      	add	r1, r2
 8005aa8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005aac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ab0:	4295      	cmp	r5, r2
 8005ab2:	d003      	beq.n	8005abc <__mcmp+0x28>
 8005ab4:	d305      	bcc.n	8005ac2 <__mcmp+0x2e>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	4618      	mov	r0, r3
 8005aba:	bd30      	pop	{r4, r5, pc}
 8005abc:	42a0      	cmp	r0, r4
 8005abe:	d3f3      	bcc.n	8005aa8 <__mcmp+0x14>
 8005ac0:	e7fa      	b.n	8005ab8 <__mcmp+0x24>
 8005ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac6:	e7f7      	b.n	8005ab8 <__mcmp+0x24>

08005ac8 <__mdiff>:
 8005ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005acc:	460d      	mov	r5, r1
 8005ace:	4607      	mov	r7, r0
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	f7ff ffdd 	bl	8005a94 <__mcmp>
 8005ada:	1e06      	subs	r6, r0, #0
 8005adc:	d108      	bne.n	8005af0 <__mdiff+0x28>
 8005ade:	4631      	mov	r1, r6
 8005ae0:	4638      	mov	r0, r7
 8005ae2:	f7ff fdc2 	bl	800566a <_Balloc>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af0:	bfa4      	itt	ge
 8005af2:	4623      	movge	r3, r4
 8005af4:	462c      	movge	r4, r5
 8005af6:	4638      	mov	r0, r7
 8005af8:	6861      	ldr	r1, [r4, #4]
 8005afa:	bfa6      	itte	ge
 8005afc:	461d      	movge	r5, r3
 8005afe:	2600      	movge	r6, #0
 8005b00:	2601      	movlt	r6, #1
 8005b02:	f7ff fdb2 	bl	800566a <_Balloc>
 8005b06:	f04f 0e00 	mov.w	lr, #0
 8005b0a:	60c6      	str	r6, [r0, #12]
 8005b0c:	692b      	ldr	r3, [r5, #16]
 8005b0e:	6926      	ldr	r6, [r4, #16]
 8005b10:	f104 0214 	add.w	r2, r4, #20
 8005b14:	f105 0914 	add.w	r9, r5, #20
 8005b18:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005b1c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005b20:	f100 0114 	add.w	r1, r0, #20
 8005b24:	f852 ab04 	ldr.w	sl, [r2], #4
 8005b28:	f859 5b04 	ldr.w	r5, [r9], #4
 8005b2c:	fa1f f38a 	uxth.w	r3, sl
 8005b30:	4473      	add	r3, lr
 8005b32:	b2ac      	uxth	r4, r5
 8005b34:	1b1b      	subs	r3, r3, r4
 8005b36:	0c2c      	lsrs	r4, r5, #16
 8005b38:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005b3c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005b46:	45c8      	cmp	r8, r9
 8005b48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005b4c:	4694      	mov	ip, r2
 8005b4e:	f841 4b04 	str.w	r4, [r1], #4
 8005b52:	d8e7      	bhi.n	8005b24 <__mdiff+0x5c>
 8005b54:	45bc      	cmp	ip, r7
 8005b56:	d304      	bcc.n	8005b62 <__mdiff+0x9a>
 8005b58:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005b5c:	b183      	cbz	r3, 8005b80 <__mdiff+0xb8>
 8005b5e:	6106      	str	r6, [r0, #16]
 8005b60:	e7c4      	b.n	8005aec <__mdiff+0x24>
 8005b62:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005b66:	b2a2      	uxth	r2, r4
 8005b68:	4472      	add	r2, lr
 8005b6a:	1413      	asrs	r3, r2, #16
 8005b6c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005b70:	b292      	uxth	r2, r2
 8005b72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b76:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005b7a:	f841 2b04 	str.w	r2, [r1], #4
 8005b7e:	e7e9      	b.n	8005b54 <__mdiff+0x8c>
 8005b80:	3e01      	subs	r6, #1
 8005b82:	e7e9      	b.n	8005b58 <__mdiff+0x90>

08005b84 <__d2b>:
 8005b84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005b88:	461c      	mov	r4, r3
 8005b8a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005b8e:	2101      	movs	r1, #1
 8005b90:	4690      	mov	r8, r2
 8005b92:	f7ff fd6a 	bl	800566a <_Balloc>
 8005b96:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005b9a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005b9e:	4607      	mov	r7, r0
 8005ba0:	bb34      	cbnz	r4, 8005bf0 <__d2b+0x6c>
 8005ba2:	9201      	str	r2, [sp, #4]
 8005ba4:	f1b8 0200 	subs.w	r2, r8, #0
 8005ba8:	d027      	beq.n	8005bfa <__d2b+0x76>
 8005baa:	a802      	add	r0, sp, #8
 8005bac:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005bb0:	f7ff fe00 	bl	80057b4 <__lo0bits>
 8005bb4:	9900      	ldr	r1, [sp, #0]
 8005bb6:	b1f0      	cbz	r0, 8005bf6 <__d2b+0x72>
 8005bb8:	9a01      	ldr	r2, [sp, #4]
 8005bba:	f1c0 0320 	rsb	r3, r0, #32
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	40c2      	lsrs	r2, r0
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	9201      	str	r2, [sp, #4]
 8005bca:	9b01      	ldr	r3, [sp, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	bf14      	ite	ne
 8005bd0:	2102      	movne	r1, #2
 8005bd2:	2101      	moveq	r1, #1
 8005bd4:	61bb      	str	r3, [r7, #24]
 8005bd6:	6139      	str	r1, [r7, #16]
 8005bd8:	b1c4      	cbz	r4, 8005c0c <__d2b+0x88>
 8005bda:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005bde:	4404      	add	r4, r0
 8005be0:	6034      	str	r4, [r6, #0]
 8005be2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005be6:	6028      	str	r0, [r5, #0]
 8005be8:	4638      	mov	r0, r7
 8005bea:	b002      	add	sp, #8
 8005bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005bf4:	e7d5      	b.n	8005ba2 <__d2b+0x1e>
 8005bf6:	6179      	str	r1, [r7, #20]
 8005bf8:	e7e7      	b.n	8005bca <__d2b+0x46>
 8005bfa:	a801      	add	r0, sp, #4
 8005bfc:	f7ff fdda 	bl	80057b4 <__lo0bits>
 8005c00:	2101      	movs	r1, #1
 8005c02:	9b01      	ldr	r3, [sp, #4]
 8005c04:	6139      	str	r1, [r7, #16]
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	3020      	adds	r0, #32
 8005c0a:	e7e5      	b.n	8005bd8 <__d2b+0x54>
 8005c0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c10:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005c14:	6030      	str	r0, [r6, #0]
 8005c16:	6918      	ldr	r0, [r3, #16]
 8005c18:	f7ff fdad 	bl	8005776 <__hi0bits>
 8005c1c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005c20:	e7e1      	b.n	8005be6 <__d2b+0x62>

08005c22 <_calloc_r>:
 8005c22:	b538      	push	{r3, r4, r5, lr}
 8005c24:	fb02 f401 	mul.w	r4, r2, r1
 8005c28:	4621      	mov	r1, r4
 8005c2a:	f000 f809 	bl	8005c40 <_malloc_r>
 8005c2e:	4605      	mov	r5, r0
 8005c30:	b118      	cbz	r0, 8005c3a <_calloc_r+0x18>
 8005c32:	4622      	mov	r2, r4
 8005c34:	2100      	movs	r1, #0
 8005c36:	f7fe fb6d 	bl	8004314 <memset>
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005c40 <_malloc_r>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	1ccd      	adds	r5, r1, #3
 8005c44:	f025 0503 	bic.w	r5, r5, #3
 8005c48:	3508      	adds	r5, #8
 8005c4a:	2d0c      	cmp	r5, #12
 8005c4c:	bf38      	it	cc
 8005c4e:	250c      	movcc	r5, #12
 8005c50:	2d00      	cmp	r5, #0
 8005c52:	4606      	mov	r6, r0
 8005c54:	db01      	blt.n	8005c5a <_malloc_r+0x1a>
 8005c56:	42a9      	cmp	r1, r5
 8005c58:	d903      	bls.n	8005c62 <_malloc_r+0x22>
 8005c5a:	230c      	movs	r3, #12
 8005c5c:	6033      	str	r3, [r6, #0]
 8005c5e:	2000      	movs	r0, #0
 8005c60:	bd70      	pop	{r4, r5, r6, pc}
 8005c62:	f000 f869 	bl	8005d38 <__malloc_lock>
 8005c66:	4a21      	ldr	r2, [pc, #132]	; (8005cec <_malloc_r+0xac>)
 8005c68:	6814      	ldr	r4, [r2, #0]
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	b991      	cbnz	r1, 8005c94 <_malloc_r+0x54>
 8005c6e:	4c20      	ldr	r4, [pc, #128]	; (8005cf0 <_malloc_r+0xb0>)
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	b91b      	cbnz	r3, 8005c7c <_malloc_r+0x3c>
 8005c74:	4630      	mov	r0, r6
 8005c76:	f000 f83d 	bl	8005cf4 <_sbrk_r>
 8005c7a:	6020      	str	r0, [r4, #0]
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f000 f838 	bl	8005cf4 <_sbrk_r>
 8005c84:	1c43      	adds	r3, r0, #1
 8005c86:	d124      	bne.n	8005cd2 <_malloc_r+0x92>
 8005c88:	230c      	movs	r3, #12
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	6033      	str	r3, [r6, #0]
 8005c8e:	f000 f854 	bl	8005d3a <__malloc_unlock>
 8005c92:	e7e4      	b.n	8005c5e <_malloc_r+0x1e>
 8005c94:	680b      	ldr	r3, [r1, #0]
 8005c96:	1b5b      	subs	r3, r3, r5
 8005c98:	d418      	bmi.n	8005ccc <_malloc_r+0x8c>
 8005c9a:	2b0b      	cmp	r3, #11
 8005c9c:	d90f      	bls.n	8005cbe <_malloc_r+0x7e>
 8005c9e:	600b      	str	r3, [r1, #0]
 8005ca0:	18cc      	adds	r4, r1, r3
 8005ca2:	50cd      	str	r5, [r1, r3]
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f000 f848 	bl	8005d3a <__malloc_unlock>
 8005caa:	f104 000b 	add.w	r0, r4, #11
 8005cae:	1d23      	adds	r3, r4, #4
 8005cb0:	f020 0007 	bic.w	r0, r0, #7
 8005cb4:	1ac3      	subs	r3, r0, r3
 8005cb6:	d0d3      	beq.n	8005c60 <_malloc_r+0x20>
 8005cb8:	425a      	negs	r2, r3
 8005cba:	50e2      	str	r2, [r4, r3]
 8005cbc:	e7d0      	b.n	8005c60 <_malloc_r+0x20>
 8005cbe:	684b      	ldr	r3, [r1, #4]
 8005cc0:	428c      	cmp	r4, r1
 8005cc2:	bf16      	itet	ne
 8005cc4:	6063      	strne	r3, [r4, #4]
 8005cc6:	6013      	streq	r3, [r2, #0]
 8005cc8:	460c      	movne	r4, r1
 8005cca:	e7eb      	b.n	8005ca4 <_malloc_r+0x64>
 8005ccc:	460c      	mov	r4, r1
 8005cce:	6849      	ldr	r1, [r1, #4]
 8005cd0:	e7cc      	b.n	8005c6c <_malloc_r+0x2c>
 8005cd2:	1cc4      	adds	r4, r0, #3
 8005cd4:	f024 0403 	bic.w	r4, r4, #3
 8005cd8:	42a0      	cmp	r0, r4
 8005cda:	d005      	beq.n	8005ce8 <_malloc_r+0xa8>
 8005cdc:	1a21      	subs	r1, r4, r0
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f000 f808 	bl	8005cf4 <_sbrk_r>
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d0cf      	beq.n	8005c88 <_malloc_r+0x48>
 8005ce8:	6025      	str	r5, [r4, #0]
 8005cea:	e7db      	b.n	8005ca4 <_malloc_r+0x64>
 8005cec:	200002ec 	.word	0x200002ec
 8005cf0:	200002f0 	.word	0x200002f0

08005cf4 <_sbrk_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	4c05      	ldr	r4, [pc, #20]	; (8005d10 <_sbrk_r+0x1c>)
 8005cfa:	4605      	mov	r5, r0
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	6023      	str	r3, [r4, #0]
 8005d00:	f7fe fa58 	bl	80041b4 <_sbrk>
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d102      	bne.n	8005d0e <_sbrk_r+0x1a>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	b103      	cbz	r3, 8005d0e <_sbrk_r+0x1a>
 8005d0c:	602b      	str	r3, [r5, #0]
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	200004c0 	.word	0x200004c0

08005d14 <__ascii_mbtowc>:
 8005d14:	b082      	sub	sp, #8
 8005d16:	b901      	cbnz	r1, 8005d1a <__ascii_mbtowc+0x6>
 8005d18:	a901      	add	r1, sp, #4
 8005d1a:	b142      	cbz	r2, 8005d2e <__ascii_mbtowc+0x1a>
 8005d1c:	b14b      	cbz	r3, 8005d32 <__ascii_mbtowc+0x1e>
 8005d1e:	7813      	ldrb	r3, [r2, #0]
 8005d20:	600b      	str	r3, [r1, #0]
 8005d22:	7812      	ldrb	r2, [r2, #0]
 8005d24:	1c10      	adds	r0, r2, #0
 8005d26:	bf18      	it	ne
 8005d28:	2001      	movne	r0, #1
 8005d2a:	b002      	add	sp, #8
 8005d2c:	4770      	bx	lr
 8005d2e:	4610      	mov	r0, r2
 8005d30:	e7fb      	b.n	8005d2a <__ascii_mbtowc+0x16>
 8005d32:	f06f 0001 	mvn.w	r0, #1
 8005d36:	e7f8      	b.n	8005d2a <__ascii_mbtowc+0x16>

08005d38 <__malloc_lock>:
 8005d38:	4770      	bx	lr

08005d3a <__malloc_unlock>:
 8005d3a:	4770      	bx	lr

08005d3c <__ascii_wctomb>:
 8005d3c:	b149      	cbz	r1, 8005d52 <__ascii_wctomb+0x16>
 8005d3e:	2aff      	cmp	r2, #255	; 0xff
 8005d40:	bf8b      	itete	hi
 8005d42:	238a      	movhi	r3, #138	; 0x8a
 8005d44:	700a      	strbls	r2, [r1, #0]
 8005d46:	6003      	strhi	r3, [r0, #0]
 8005d48:	2001      	movls	r0, #1
 8005d4a:	bf88      	it	hi
 8005d4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005d50:	4770      	bx	lr
 8005d52:	4608      	mov	r0, r1
 8005d54:	4770      	bx	lr
	...

08005d58 <_init>:
 8005d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5a:	bf00      	nop
 8005d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5e:	bc08      	pop	{r3}
 8005d60:	469e      	mov	lr, r3
 8005d62:	4770      	bx	lr

08005d64 <_fini>:
 8005d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d66:	bf00      	nop
 8005d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6a:	bc08      	pop	{r3}
 8005d6c:	469e      	mov	lr, r3
 8005d6e:	4770      	bx	lr
